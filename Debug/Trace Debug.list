
Trace Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  08005a20  08005a20  00015a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba4  08006ba4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bac  08006bac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000012c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20000308  20000308  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d631  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001faa  00000000  00000000  0002d83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00009a7c  00000000  00000000  0002f7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d8  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001078  00000000  00000000  00039940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024fb0  00000000  00000000  0003a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d506  00000000  00000000  0005f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd9fa  00000000  00000000  0006ce6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0014a868  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000025d0  00000000  00000000  0014a8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a04 	.word	0x08005a04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08005a04 	.word	0x08005a04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9bf 	b.w	8001008 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b974 	b.w	8001008 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <vFunc_CurfitEstimation>:
#endif

}

void vFunc_CurfitEstimation(int16_t *s16p_data, curfitCoef_t *p_curfitCoef, uint8_t u8_len, uint64_t u64_bitMap)
{
 800100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001010:	b0ad      	sub	sp, #180	; 0xb4
 8001012:	4616      	mov	r6, r2
 8001014:	9002      	str	r0, [sp, #8]
 8001016:	9105      	str	r1, [sp, #20]
  uint32_t u32_x = 0;
  int32_t s32_arrA[9];
  int32_t s32_arrB[3];

  memset(s32_arrA, 0, sizeof(s32_arrA));
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2100      	movs	r1, #0
 800101c:	a823      	add	r0, sp, #140	; 0x8c
{
 800101e:	e9dd 7536 	ldrd	r7, r5, [sp, #216]	; 0xd8
  memset(s32_arrA, 0, sizeof(s32_arrA));
 8001022:	f001 fcb3 	bl	800298c <memset>
  memset(s32_arrB, 0, sizeof(s32_arrB));

  for (uint32_t u32_i = 0; u32_i < u8_len; u32_i++)
 8001026:	2e00      	cmp	r6, #0
 8001028:	f000 824a 	beq.w	80014c0 <vFunc_CurfitEstimation+0x4b4>
 800102c:	2400      	movs	r4, #0
 800102e:	46a6      	mov	lr, r4
 8001030:	9400      	str	r4, [sp, #0]
 8001032:	46a4      	mov	ip, r4
 8001034:	46a2      	mov	sl, r4
 8001036:	46a0      	mov	r8, r4
 8001038:	9401      	str	r4, [sp, #4]
 800103a:	46a3      	mov	fp, r4
 800103c:	4623      	mov	r3, r4
  {
    if (0 != (u64_bitMap & (uint64_t) (1) << u32_i))
 800103e:	f1c3 0920 	rsb	r9, r3, #32
 8001042:	fa05 f909 	lsl.w	r9, r5, r9
 8001046:	f1a3 0020 	sub.w	r0, r3, #32
 800104a:	fa27 f203 	lsr.w	r2, r7, r3
 800104e:	fa25 f000 	lsr.w	r0, r5, r0
 8001052:	ea42 0209 	orr.w	r2, r2, r9
 8001056:	4302      	orrs	r2, r0
 8001058:	07d2      	lsls	r2, r2, #31

      // sum of xy values.
      s32_arrB[1] += ((uint32_t) s16p_data[u32_i] * u32_x);

      // x^2
      u32_x = (u32_x * u32_i);
 800105a:	fb03 f103 	mul.w	r1, r3, r3
    if (0 != (u64_bitMap & (uint64_t) (1) << u32_i))
 800105e:	d514      	bpl.n	800108a <vFunc_CurfitEstimation+0x7e>
      s32_arrA[1] += u32_x;
 8001060:	9801      	ldr	r0, [sp, #4]
      s32_arrB[0] += (int32_t) s16p_data[u32_i];
 8001062:	9a02      	ldr	r2, [sp, #8]
      s32_arrA[1] += u32_x;
 8001064:	4418      	add	r0, r3
      s32_arrB[0] += (int32_t) s16p_data[u32_i];
 8001066:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
      s32_arrA[1] += u32_x;
 800106a:	9001      	str	r0, [sp, #4]
      s32_arrA[2] += u32_x;
      s32_arrA[4] = s32_arrA[2];
      s32_arrA[6] = s32_arrA[2];

      // sum of x2y values.
      s32_arrB[2] += (s16p_data[u32_i] * (int32_t) (u32_x));
 800106c:	9800      	ldr	r0, [sp, #0]
      s32_arrB[1] += ((uint32_t) s16p_data[u32_i] * u32_x);
 800106e:	fb03 aa02 	mla	sl, r3, r2, sl
      s32_arrB[0] += (int32_t) s16p_data[u32_i];
 8001072:	4490      	add	r8, r2
      s32_arrA[2] += u32_x;
 8001074:	448c      	add	ip, r1
      s32_arrB[2] += (s16p_data[u32_i] * (int32_t) (u32_x));
 8001076:	fb02 0201 	mla	r2, r2, r1, r0

      // x^3
      u32_x = u32_x * u32_i;
 800107a:	fb03 f101 	mul.w	r1, r3, r1
      s32_arrA[0]++;
 800107e:	f10b 0b01 	add.w	fp, fp, #1
      s32_arrB[2] += (s16p_data[u32_i] * (int32_t) (u32_x));
 8001082:	9200      	str	r2, [sp, #0]

      // x^4
      u32_x = u32_x * u32_i;

      // sum of x^4 values
      s32_arrA[8] += u32_x;
 8001084:	fb03 4401 	mla	r4, r3, r1, r4
      s32_arrA[5] += u32_x;
 8001088:	448e      	add	lr, r1
  for (uint32_t u32_i = 0; u32_i < u8_len; u32_i++)
 800108a:	3301      	adds	r3, #1
 800108c:	42b3      	cmp	r3, r6
 800108e:	d1d6      	bne.n	800103e <vFunc_CurfitEstimation+0x32>
  p_curfitCoef->s8_signC0 = 1;
 8001090:	9805      	ldr	r0, [sp, #20]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001092:	9f00      	ldr	r7, [sp, #0]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001094:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8001098:	9302      	str	r3, [sp, #8]
  p_curfitCoef->s8_signC0 = 1;
 800109a:	f240 1301 	movw	r3, #257	; 0x101
 800109e:	8303      	strh	r3, [r0, #24]
  p_curfitCoef->s8_signC2 = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	7683      	strb	r3, [r0, #26]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80010a4:	fb8c 030b 	smull	r0, r3, ip, fp
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80010a8:	17fa      	asrs	r2, r7, #31
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80010aa:	fb07 f603 	mul.w	r6, r7, r3
 80010ae:	fb00 6502 	mla	r5, r0, r2, r6
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80010b2:	ea4f 71ee 	mov.w	r1, lr, asr #31
 80010b6:	9104      	str	r1, [sp, #16]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80010b8:	9508      	str	r5, [sp, #32]
 80010ba:	17e1      	asrs	r1, r4, #31
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80010bc:	9d01      	ldr	r5, [sp, #4]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80010be:	9203      	str	r2, [sp, #12]
 80010c0:	fb00 f201 	mul.w	r2, r0, r1
 80010c4:	fb04 2603 	mla	r6, r4, r3, r2
 80010c8:	9014      	str	r0, [sp, #80]	; 0x50
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80010ca:	9a02      	ldr	r2, [sp, #8]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80010cc:	960f      	str	r6, [sp, #60]	; 0x3c
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80010ce:	fb8a 0305 	smull	r0, r3, sl, r5
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80010d2:	fb0c f603 	mul.w	r6, ip, r3
 80010d6:	fb00 6902 	mla	r9, r0, r2, r6
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80010da:	fb00 f201 	mul.w	r2, r0, r1
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80010de:	9e04      	ldr	r6, [sp, #16]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80010e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80010e4:	fb04 2903 	mla	r9, r4, r3, r2
 80010e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80010ec:	fb85 9308 	smull	r9, r3, r5, r8
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80010f0:	fb09 f206 	mul.w	r2, r9, r6
 80010f4:	fb0e 2503 	mla	r5, lr, r3, r2
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80010f8:	fb09 f201 	mul.w	r2, r9, r1
 80010fc:	fb04 2303 	mla	r3, r4, r3, r2
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001100:	950b      	str	r5, [sp, #44]	; 0x2c
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001102:	9a04      	ldr	r2, [sp, #16]
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001104:	9311      	str	r3, [sp, #68]	; 0x44
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001106:	fb8b 530a 	smull	r5, r3, fp, sl
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 800110a:	fb0e f603 	mul.w	r6, lr, r3
 800110e:	fb05 6602 	mla	r6, r5, r2, r6
 8001112:	960c      	str	r6, [sp, #48]	; 0x30
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001114:	fb05 f601 	mul.w	r6, r5, r1
 8001118:	fb04 6603 	mla	r6, r4, r3, r6
 800111c:	960e      	str	r6, [sp, #56]	; 0x38
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 800111e:	fb8b 6b0e 	smull	r6, fp, fp, lr
 8001122:	9606      	str	r6, [sp, #24]
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001124:	fb8c 3a0a 	smull	r3, sl, ip, sl
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001128:	9e03      	ldr	r6, [sp, #12]
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 800112a:	9519      	str	r5, [sp, #100]	; 0x64
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 800112c:	9d06      	ldr	r5, [sp, #24]
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 800112e:	9307      	str	r3, [sp, #28]
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001130:	fb07 f30b 	mul.w	r3, r7, fp
 8001134:	fb0e fb0b 	mul.w	fp, lr, fp
 8001138:	fb05 3306 	mla	r3, r5, r6, r3
 800113c:	fb05 bb02 	mla	fp, r5, r2, fp
 8001140:	4616      	mov	r6, r2
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001142:	9d07      	ldr	r5, [sp, #28]
 8001144:	9a02      	ldr	r2, [sp, #8]
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001146:	9310      	str	r3, [sp, #64]	; 0x40
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001148:	fb0c f30a 	mul.w	r3, ip, sl
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 800114c:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001150:	fb0e fa0a 	mul.w	sl, lr, sl
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001154:	fb05 3b02 	mla	fp, r5, r2, r3
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001158:	9b01      	ldr	r3, [sp, #4]
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 800115a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 800115e:	fb05 aa06 	mla	sl, r5, r6, sl
 8001162:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001166:	fb83 3603 	smull	r3, r6, r3, r3
 800116a:	9a03      	ldr	r2, [sp, #12]
 800116c:	463d      	mov	r5, r7
 800116e:	fb07 f706 	mul.w	r7, r7, r6
 8001172:	fb03 7a02 	mla	sl, r3, r2, r7
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001176:	9a14      	ldr	r2, [sp, #80]	; 0x50
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001178:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800117c:	fb03 f701 	mul.w	r7, r3, r1
 8001180:	fb04 7a06 	mla	sl, r4, r6, r7
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001184:	fba5 7602 	umull	r7, r6, r5, r2
 8001188:	9d08      	ldr	r5, [sp, #32]
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 800118a:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 800118e:	442e      	add	r6, r5
 8001190:	fba2 a504 	umull	sl, r5, r2, r4
 8001194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001196:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 800119a:	1955      	adds	r5, r2, r5
 800119c:	9516      	str	r5, [sp, #88]	; 0x58
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 800119e:	fbac 5a00 	umull	r5, sl, ip, r0
 80011a2:	197d      	adds	r5, r7, r5
 80011a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 80011a6:	9a02      	ldr	r2, [sp, #8]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80011a8:	4457      	add	r7, sl
 80011aa:	eb46 0607 	adc.w	r6, r6, r7
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80011ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80011b0:	fba0 a004 	umull	sl, r0, r0, r4
 80011b4:	1838      	adds	r0, r7, r0
 80011b6:	9015      	str	r0, [sp, #84]	; 0x54
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80011b8:	fb8c 0708 	smull	r0, r7, ip, r8
 80011bc:	fb00 f101 	mul.w	r1, r0, r1
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80011c0:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 80011c4:	fb04 1a07 	mla	sl, r4, r7, r1
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 80011c8:	fb0c f707 	mul.w	r7, ip, r7
 80011cc:	fb00 7b02 	mla	fp, r0, r2, r7
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80011d0:	fb88 710e 	smull	r7, r1, r8, lr
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80011d4:	fb0c f801 	mul.w	r8, ip, r1
 80011d8:	fb07 8802 	mla	r8, r7, r2, r8
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80011dc:	9a04      	ldr	r2, [sp, #16]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80011de:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80011e2:	fb0e f101 	mul.w	r1, lr, r1
 80011e6:	fb07 1802 	mla	r8, r7, r2, r1
 80011ea:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80011ee:	fba9 180e 	umull	r1, r8, r9, lr
 80011f2:	1869      	adds	r1, r5, r1
 80011f4:	910a      	str	r1, [sp, #40]	; 0x28
 80011f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80011f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80011fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80011fc:	4488      	add	r8, r1
 80011fe:	eb48 0806 	adc.w	r8, r8, r6
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001202:	9911      	ldr	r1, [sp, #68]	; 0x44
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001204:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001208:	fba9 8904 	umull	r8, r9, r9, r4
 800120c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8001210:	eb01 0809 	add.w	r8, r1, r9
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001214:	fbae 1602 	umull	r1, r6, lr, r2
 8001218:	442e      	add	r6, r5
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 800121a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 800121c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001220:	fba2 8204 	umull	r8, r2, r2, r4
 8001224:	eb05 0902 	add.w	r9, r5, r2
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001228:	9a00      	ldr	r2, [sp, #0]
 800122a:	fba2 2503 	umull	r2, r5, r2, r3
 800122e:	1889      	adds	r1, r1, r2
 8001230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001232:	4415      	add	r5, r2
 8001234:	eb46 0505 	adc.w	r5, r6, r5
 8001238:	fba3 6304 	umull	r6, r3, r3, r4
 800123c:	961d      	str	r6, [sp, #116]	; 0x74
 800123e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8001240:	441e      	add	r6, r3
 8001242:	9618      	str	r6, [sp, #96]	; 0x60
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 8001244:	fba0 6404 	umull	r6, r4, r0, r4
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001248:	fbac 0300 	umull	r0, r3, ip, r0
 800124c:	1809      	adds	r1, r1, r0
  s64_sumP = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[8];
 800124e:	44a2      	add	sl, r4
 8001250:	9619      	str	r6, [sp, #100]	; 0x64
 8001252:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001256:	911e      	str	r1, [sp, #120]	; 0x78
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 8001258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 800125a:	eb0b 0003 	add.w	r0, fp, r3
 800125e:	eb40 0605 	adc.w	r6, r0, r5
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001262:	9801      	ldr	r0, [sp, #4]
 8001264:	9b00      	ldr	r3, [sp, #0]
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001266:	961f      	str	r6, [sp, #124]	; 0x7c
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 8001268:	ebb4 0a01 	subs.w	sl, r4, r1
 800126c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800126e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8001272:	eb64 0a06 	sbc.w	sl, r4, r6
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001276:	fb8c 4500 	smull	r4, r5, ip, r0
 800127a:	9e04      	ldr	r6, [sp, #16]
 800127c:	9903      	ldr	r1, [sp, #12]
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 800127e:	f8cd a020 	str.w	sl, [sp, #32]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001282:	fb80 b20e 	smull	fp, r2, r0, lr
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001286:	fb03 fa05 	mul.w	sl, r3, r5
 800128a:	fb0e f505 	mul.w	r5, lr, r5
 800128e:	fb04 5506 	mla	r5, r4, r6, r5
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001292:	9802      	ldr	r0, [sp, #8]
 8001294:	fb03 f602 	mul.w	r6, r3, r2
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001298:	fb04 aa01 	mla	sl, r4, r1, sl
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 800129c:	fb0b 6601 	mla	r6, fp, r1, r6
 80012a0:	fb0c f202 	mul.w	r2, ip, r2
 80012a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80012a6:	fb0b 2000 	mla	r0, fp, r0, r2
 80012aa:	fbac 2307 	umull	r2, r3, ip, r7
 80012ae:	440b      	add	r3, r1
 80012b0:	900d      	str	r0, [sp, #52]	; 0x34
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80012b2:	fbae 0107 	umull	r0, r1, lr, r7
 80012b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80012b8:	4439      	add	r1, r7
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80012ba:	9f00      	ldr	r7, [sp, #0]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 80012bc:	eb18 0202 	adds.w	r2, r8, r2
 80012c0:	eb49 0903 	adc.w	r9, r9, r3
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80012c4:	fba7 8304 	umull	r8, r3, r7, r4
 80012c8:	eb12 0808 	adds.w	r8, r2, r8
 80012cc:	4453      	add	r3, sl
 80012ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80012d2:	eb43 0809 	adc.w	r8, r3, r9
 80012d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80012da:	fbae 8404 	umull	r8, r4, lr, r4
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80012de:	9b06      	ldr	r3, [sp, #24]
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80012e0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80012e4:	192c      	adds	r4, r5, r4
 80012e6:	940e      	str	r4, [sp, #56]	; 0x38
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80012e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80012ea:	fba7 9503 	umull	r9, r5, r7, r3
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80012ee:	eb19 0904 	adds.w	r9, r9, r4
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80012f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80012f4:	4425      	add	r5, r4
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80012f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80012f8:	eb45 0504 	adc.w	r5, r5, r4
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 80012fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80012fe:	fbae 3203 	umull	r3, r2, lr, r3
 8001302:	4414      	add	r4, r2
 8001304:	9310      	str	r3, [sp, #64]	; 0x40
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001306:	9b07      	ldr	r3, [sp, #28]
  s64_sumN = (int64_t) s32p_mtrx[0] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[7];
 8001308:	9406      	str	r4, [sp, #24]
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 800130a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800130c:	fbae 2a03 	umull	r2, sl, lr, r3
 8001310:	44a2      	add	sl, r4
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001312:	fbac 3403 	umull	r3, r4, ip, r3
 8001316:	eb19 0e03 	adds.w	lr, r9, r3
 800131a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800131c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001320:	441c      	add	r4, r3
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 8001322:	9b01      	ldr	r3, [sp, #4]
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001324:	eb44 0405 	adc.w	r4, r4, r5
 8001328:	9411      	str	r4, [sp, #68]	; 0x44
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 800132a:	ebb3 090e 	subs.w	r9, r3, lr
 800132e:	9b04      	ldr	r3, [sp, #16]
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001330:	9f00      	ldr	r7, [sp, #0]
 8001332:	9d19      	ldr	r5, [sp, #100]	; 0x64
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 8001334:	eb63 0804 	sbc.w	r8, r3, r4
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001338:	fba7 430b 	umull	r4, r3, r7, fp
 800133c:	192c      	adds	r4, r5, r4
 800133e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001340:	441e      	add	r6, r3
 8001342:	eb45 0606 	adc.w	r6, r5, r6
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001346:	18a4      	adds	r4, r4, r2
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001348:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 800134a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 800134c:	eb4a 0a06 	adc.w	sl, sl, r6
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 8001350:	1880      	adds	r0, r0, r2
 8001352:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001354:	eb41 0302 	adc.w	r3, r1, r2
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001358:	fbac b20b 	umull	fp, r2, ip, fp
 800135c:	442a      	add	r2, r5
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 800135e:	fb8c 510c 	smull	r5, r1, ip, ip
 8001362:	fb07 fe01 	mul.w	lr, r7, r1
 8001366:	463e      	mov	r6, r7
 8001368:	9f03      	ldr	r7, [sp, #12]
 800136a:	fb05 ee07 	mla	lr, r5, r7, lr
 800136e:	9f02      	ldr	r7, [sp, #8]
 8001370:	fb0c f101 	mul.w	r1, ip, r1
 8001374:	fb05 1107 	mla	r1, r5, r7, r1
 8001378:	460f      	mov	r7, r1
 800137a:	fba6 6105 	umull	r6, r1, r6, r5
 800137e:	1986      	adds	r6, r0, r6
 8001380:	448e      	add	lr, r1
 8001382:	eb4e 0e03 	adc.w	lr, lr, r3
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001386:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 8001388:	fbac 5105 	umull	r5, r1, ip, r5
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 800138c:	1ba0      	subs	r0, r4, r6
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 800138e:	4439      	add	r1, r7
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 8001390:	eb6a 0c0e 	sbc.w	ip, sl, lr
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 8001394:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  s64_sumP += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[5] * (int64_t) s32p_mtrx[6];
 8001396:	eb13 0b0b 	adds.w	fp, r3, fp
 800139a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800139c:	eb43 0302 	adc.w	r3, r3, r2
  s64_sumP += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[7];
 80013a0:	eb1b 0b07 	adds.w	fp, fp, r7
 80013a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80013a6:	eb47 0203 	adc.w	r2, r7, r3
 80013aa:	9200      	str	r2, [sp, #0]
  s64_sumN += (int64_t) s32p_mtrx[1] * (int64_t) s32p_mtrx[3] * (int64_t) s32p_mtrx[8];
 80013ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80013ae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80013b0:	189f      	adds	r7, r3, r2
 80013b2:	9b06      	ldr	r3, [sp, #24]
 80013b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80013b6:	eb43 0202 	adc.w	r2, r3, r2
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 80013ba:	197d      	adds	r5, r7, r5
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 80013bc:	9b00      	ldr	r3, [sp, #0]
  s64_sumN += (int64_t) s32p_mtrx[2] * (int64_t) s32p_mtrx[4] * (int64_t) s32p_mtrx[6];
 80013be:	eb41 0102 	adc.w	r1, r1, r2
  s64_retVal = (int64_t) (s64_sumP - s64_sumN);
 80013c2:	ebbb 0205 	subs.w	r2, fp, r5
 80013c6:	eb63 0301 	sbc.w	r3, r3, r1
  if (s64_detC0 < 0)
 80013ca:	f1bc 0f00 	cmp.w	ip, #0
 80013ce:	db6d      	blt.n	80014ac <vFunc_CurfitEstimation+0x4a0>
  if (s64_detC1 < 0)
 80013d0:	f1b8 0f00 	cmp.w	r8, #0
 80013d4:	db5e      	blt.n	8001494 <vFunc_CurfitEstimation+0x488>
  if (s64_detC2 < 0)
 80013d6:	9908      	ldr	r1, [sp, #32]
 80013d8:	2900      	cmp	r1, #0
 80013da:	da0b      	bge.n	80013f4 <vFunc_CurfitEstimation+0x3e8>
    s64_detC2 = s64_detC2 * -1;
 80013dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80013de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80013e0:	1b09      	subs	r1, r1, r4
 80013e2:	9109      	str	r1, [sp, #36]	; 0x24
 80013e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80013e6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80013e8:	eb61 0104 	sbc.w	r1, r1, r4
    p_curfitCoef->s8_signC2 = -1;
 80013ec:	9c05      	ldr	r4, [sp, #20]
    s64_detC2 = s64_detC2 * -1;
 80013ee:	9108      	str	r1, [sp, #32]
    p_curfitCoef->s8_signC2 = -1;
 80013f0:	21ff      	movs	r1, #255	; 0xff
 80013f2:	76a1      	strb	r1, [r4, #26]
    u8_minVal = (u8_minVal < *(u8p_src + i)) ? u8_minVal : *(u8p_src + i);
 80013f4:	fabc f48c 	clz	r4, ip
 80013f8:	9e08      	ldr	r6, [sp, #32]
 80013fa:	fab8 f188 	clz	r1, r8
 80013fe:	428c      	cmp	r4, r1
 8001400:	bf28      	it	cs
 8001402:	460c      	movcs	r4, r1
 8001404:	fab6 f186 	clz	r1, r6
 8001408:	428c      	cmp	r4, r1
 800140a:	bf28      	it	cs
 800140c:	460c      	movcs	r4, r1
  u8_bsCnt = vFunc_GetMinVal(u8_lzc, 3) - 1; //minus 1 to avoid overflow to sign bit
 800140e:	3c01      	subs	r4, #1
 8001410:	b2e4      	uxtb	r4, r4
  s64_detC0 = s64_detC0 << u8_bsCnt;
 8001412:	f1a4 0520 	sub.w	r5, r4, #32
 8001416:	fa0c f104 	lsl.w	r1, ip, r4
 800141a:	fa00 f505 	lsl.w	r5, r0, r5
 800141e:	4329      	orrs	r1, r5
 8001420:	f1c4 0520 	rsb	r5, r4, #32
 8001424:	fa20 f505 	lsr.w	r5, r0, r5
  p_curfitCoef->s64_c0 = s64_detC0 / s64_detA;
 8001428:	4329      	orrs	r1, r5
 800142a:	40a0      	lsls	r0, r4
 800142c:	e9cd 3200 	strd	r3, r2, [sp]
 8001430:	f7ff fc1a 	bl	8000c68 <__aeabi_ldivmod>
 8001434:	9d05      	ldr	r5, [sp, #20]
 8001436:	e9c5 0100 	strd	r0, r1, [r5]
  s64_detC1 = s64_detC1 << u8_bsCnt;
 800143a:	f1a4 0020 	sub.w	r0, r4, #32
 800143e:	fa09 f000 	lsl.w	r0, r9, r0
 8001442:	fa08 f104 	lsl.w	r1, r8, r4
 8001446:	4301      	orrs	r1, r0
 8001448:	f1c4 0020 	rsb	r0, r4, #32
 800144c:	fa29 f000 	lsr.w	r0, r9, r0
  p_curfitCoef->s64_c1 = s64_detC1 / s64_detA;
 8001450:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001454:	4301      	orrs	r1, r0
 8001456:	fa09 f004 	lsl.w	r0, r9, r4
 800145a:	f7ff fc05 	bl	8000c68 <__aeabi_ldivmod>
 800145e:	e9c5 0102 	strd	r0, r1, [r5, #8]
  s64_detC2 = s64_detC2 << u8_bsCnt;
 8001462:	fa06 f104 	lsl.w	r1, r6, r4
 8001466:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001468:	f1a4 0020 	sub.w	r0, r4, #32
 800146c:	fa06 f000 	lsl.w	r0, r6, r0
 8001470:	4301      	orrs	r1, r0
 8001472:	f1c4 0020 	rsb	r0, r4, #32
 8001476:	fa26 f000 	lsr.w	r0, r6, r0
  p_curfitCoef->s64_c2 = s64_detC2 / s64_detA;
 800147a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800147e:	4301      	orrs	r1, r0
 8001480:	fa06 f004 	lsl.w	r0, r6, r4
 8001484:	f7ff fbf0 	bl	8000c68 <__aeabi_ldivmod>
  p_curfitCoef->u8_scale = u8_bsCnt;
 8001488:	76ec      	strb	r4, [r5, #27]
  p_curfitCoef->s64_c2 = s64_detC2 / s64_detA;
 800148a:	e9c5 0104 	strd	r0, r1, [r5, #16]
    }
  }

  vFunc_GetCoefByCramersRule(s32_arrA, s32_arrB, p_curfitCoef);
}
 800148e:	b02d      	add	sp, #180	; 0xb4
 8001490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s64_detC1 = s64_detC1 * -1;
 8001494:	9907      	ldr	r1, [sp, #28]
 8001496:	9c01      	ldr	r4, [sp, #4]
 8001498:	ebb1 0904 	subs.w	r9, r1, r4
 800149c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800149e:	9c04      	ldr	r4, [sp, #16]
 80014a0:	eb61 0804 	sbc.w	r8, r1, r4
    p_curfitCoef->s8_signC1 = -1;
 80014a4:	9c05      	ldr	r4, [sp, #20]
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	7661      	strb	r1, [r4, #25]
 80014aa:	e794      	b.n	80013d6 <vFunc_CurfitEstimation+0x3ca>
    s64_detC0 = s64_detC0 * -1;
 80014ac:	1b30      	subs	r0, r6, r4
    p_curfitCoef->s8_signC0 = -1;
 80014ae:	9c05      	ldr	r4, [sp, #20]
    s64_detC0 = s64_detC0 * -1;
 80014b0:	eb6e 0c0a 	sbc.w	ip, lr, sl
    p_curfitCoef->s8_signC0 = -1;
 80014b4:	21ff      	movs	r1, #255	; 0xff
  if (s64_detC1 < 0)
 80014b6:	f1b8 0f00 	cmp.w	r8, #0
    p_curfitCoef->s8_signC0 = -1;
 80014ba:	7621      	strb	r1, [r4, #24]
  if (s64_detC1 < 0)
 80014bc:	da8b      	bge.n	80013d6 <vFunc_CurfitEstimation+0x3ca>
 80014be:	e7e9      	b.n	8001494 <vFunc_CurfitEstimation+0x488>
  p_curfitCoef->s8_signC0 = 1;
 80014c0:	9905      	ldr	r1, [sp, #20]
  p_curfitCoef->s8_signC2 = 1;
 80014c2:	9609      	str	r6, [sp, #36]	; 0x24
  p_curfitCoef->s8_signC0 = 1;
 80014c4:	f240 1201 	movw	r2, #257	; 0x101
  p_curfitCoef->s8_signC2 = 1;
 80014c8:	2301      	movs	r3, #1
  p_curfitCoef->s8_signC0 = 1;
 80014ca:	830a      	strh	r2, [r1, #24]
  p_curfitCoef->s8_signC2 = 1;
 80014cc:	768b      	strb	r3, [r1, #26]
 80014ce:	9608      	str	r6, [sp, #32]
 80014d0:	4633      	mov	r3, r6
 80014d2:	46b1      	mov	r9, r6
 80014d4:	46b4      	mov	ip, r6
 80014d6:	46b0      	mov	r8, r6
 80014d8:	4632      	mov	r2, r6
 80014da:	4630      	mov	r0, r6
 80014dc:	e78a      	b.n	80013f4 <vFunc_CurfitEstimation+0x3e8>
 80014de:	bf00      	nop

080014e0 <vFunc_GetCurveFitLine>:


void vFunc_GetCurveFitLine(int16_t *s16p_dest, curfitCoef_t *p_curfitCoef, uint8_t u8_len)
{
 80014e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e4:	b087      	sub	sp, #28
 80014e6:	9004      	str	r0, [sp, #16]
  int64_t s64_temp;

  for (int32_t u32_i = u8_len; u32_i--;)
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d076      	beq.n	80015da <vFunc_GetCurveFitLine+0xfa>
 80014ec:	f102 3eff 	add.w	lr, r2, #4294967295
#ifndef VER2_UPDATE
    s64_temp = p_curfitCoef->s64_c0 + (p_curfitCoef->s64_c1 * u32_i) + (p_curfitCoef->s64_c2 * u32_i * u32_i);
    s16p_dest[u32_i] = (int16_t) (s64_temp / p_curfitCoef->s64_scale);
#else
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
        + (p_curfitCoef->s8_signC1 * p_curfitCoef->s64_c1 * u32_i)
 80014f0:	68cb      	ldr	r3, [r1, #12]
 80014f2:	f991 2019 	ldrsb.w	r2, [r1, #25]
        + (p_curfitCoef->s8_signC2 * p_curfitCoef->s64_c2 * u32_i * u32_i);
 80014f6:	f991 c01a 	ldrsb.w	ip, [r1, #26]
 80014fa:	694f      	ldr	r7, [r1, #20]
 80014fc:	f8d1 8010 	ldr.w	r8, [r1, #16]

    s16p_dest[u32_i] = (int16_t) (s64_temp >> p_curfitCoef->u8_scale);
 8001500:	7ece      	ldrb	r6, [r1, #27]
 8001502:	4682      	mov	sl, r0
        + (p_curfitCoef->s8_signC1 * p_curfitCoef->s64_c1 * u32_i)
 8001504:	6888      	ldr	r0, [r1, #8]
 8001506:	17d4      	asrs	r4, r2, #31
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	fb04 3300 	mla	r3, r4, r0, r3
 8001510:	fba0 4902 	umull	r4, r9, r0, r2
 8001514:	9403      	str	r4, [sp, #12]
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 8001516:	f991 0018 	ldrsb.w	r0, [r1, #24]
 800151a:	684c      	ldr	r4, [r1, #4]
        + (p_curfitCoef->s8_signC1 * p_curfitCoef->s64_c1 * u32_i)
 800151c:	4499      	add	r9, r3
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 800151e:	680b      	ldr	r3, [r1, #0]
 8001520:	4672      	mov	r2, lr
 8001522:	fb00 f404 	mul.w	r4, r0, r4
 8001526:	ea4f 75ee 	mov.w	r5, lr, asr #31
 800152a:	ea4f 7ee0 	mov.w	lr, r0, asr #31
        + (p_curfitCoef->s8_signC2 * p_curfitCoef->s64_c2 * u32_i * u32_i);
 800152e:	ea4f 71ec 	mov.w	r1, ip, asr #31
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 8001532:	fb0e 4e03 	mla	lr, lr, r3, r4
        + (p_curfitCoef->s8_signC2 * p_curfitCoef->s64_c2 * u32_i * u32_i);
 8001536:	fb0c f707 	mul.w	r7, ip, r7
 800153a:	9c03      	ldr	r4, [sp, #12]
 800153c:	fb01 7708 	mla	r7, r1, r8, r7
 8001540:	fba8 180c 	umull	r1, r8, r8, ip
 8001544:	9102      	str	r1, [sp, #8]
 8001546:	fb04 f105 	mul.w	r1, r4, r5
 800154a:	44b8      	add	r8, r7
 800154c:	fb02 1709 	mla	r7, r2, r9, r1
 8001550:	9902      	ldr	r1, [sp, #8]
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 8001552:	fba3 0300 	umull	r0, r3, r3, r0
 8001556:	449e      	add	lr, r3
 8001558:	fb01 f305 	mul.w	r3, r1, r5
 800155c:	fba4 4102 	umull	r4, r1, r4, r2
 8001560:	4439      	add	r1, r7
 8001562:	1900      	adds	r0, r0, r4
 8001564:	eb4e 0e01 	adc.w	lr, lr, r1
 8001568:	9902      	ldr	r1, [sp, #8]
 800156a:	fb02 3308 	mla	r3, r2, r8, r3
 800156e:	eb0a 0c42 	add.w	ip, sl, r2, lsl #1
 8001572:	fba1 1402 	umull	r1, r4, r1, r2
 8001576:	f1c6 0a20 	rsb	sl, r6, #32
 800157a:	f8cd a014 	str.w	sl, [sp, #20]
 800157e:	441c      	add	r4, r3
        + (p_curfitCoef->s8_signC2 * p_curfitCoef->s64_c2 * u32_i * u32_i);
 8001580:	fb02 fa04 	mul.w	sl, r2, r4
 8001584:	fb01 ab05 	mla	fp, r1, r5, sl
 8001588:	fba2 3a01 	umull	r3, sl, r2, r1
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 800158c:	181b      	adds	r3, r3, r0
    s16p_dest[u32_i] = (int16_t) (s64_temp >> p_curfitCoef->u8_scale);
 800158e:	9f05      	ldr	r7, [sp, #20]
 8001590:	f8cd c004 	str.w	ip, [sp, #4]
        + (p_curfitCoef->s8_signC2 * p_curfitCoef->s64_c2 * u32_i * u32_i);
 8001594:	44da      	add	sl, fp
    s64_temp = (p_curfitCoef->s8_signC0 * p_curfitCoef->s64_c0)
 8001596:	eb4a 0a0e 	adc.w	sl, sl, lr
    s16p_dest[u32_i] = (int16_t) (s64_temp >> p_curfitCoef->u8_scale);
 800159a:	f1b6 0b20 	subs.w	fp, r6, #32
 800159e:	fa4a fb0b 	asr.w	fp, sl, fp
 80015a2:	fa23 f306 	lsr.w	r3, r3, r6
 80015a6:	fa0a fa07 	lsl.w	sl, sl, r7
 80015aa:	ea43 030a 	orr.w	r3, r3, sl
 80015ae:	bf58      	it	pl
 80015b0:	ea43 030b 	orrpl.w	r3, r3, fp
 80015b4:	f8ac 3000 	strh.w	r3, [ip]
 80015b8:	9b02      	ldr	r3, [sp, #8]
  for (int32_t u32_i = u8_len; u32_i--;)
 80015ba:	9f01      	ldr	r7, [sp, #4]
 80015bc:	3a01      	subs	r2, #1
 80015be:	f165 0500 	sbc.w	r5, r5, #0
 80015c2:	1ac9      	subs	r1, r1, r3
 80015c4:	9b03      	ldr	r3, [sp, #12]
 80015c6:	eb64 0408 	sbc.w	r4, r4, r8
 80015ca:	1ac0      	subs	r0, r0, r3
 80015cc:	9b04      	ldr	r3, [sp, #16]
 80015ce:	eb6e 0e09 	sbc.w	lr, lr, r9
 80015d2:	429f      	cmp	r7, r3
 80015d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80015d8:	d1d2      	bne.n	8001580 <vFunc_GetCurveFitLine+0xa0>
#endif
  }
}
 80015da:	b007      	add	sp, #28
 80015dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015e0 <u64Func_GetBitmap>:
uint64_t u64Func_GetBitmap(const uint8_t *u8p_curfitComp, uint8_t u8_len)
{
  uint64_t u64_bitmap = 0xFFFFFFFFFFFFFFFF;
  uint8_t u8_deny;

  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 80015e0:	b1e1      	cbz	r1, 800161c <u64Func_GetBitmap+0x3c>
{
 80015e2:	b510      	push	{r4, lr}
 80015e4:	3901      	subs	r1, #1
 80015e6:	f100 0e01 	add.w	lr, r0, #1
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 80015ea:	4602      	mov	r2, r0
  uint64_t u64_bitmap = 0xFFFFFFFFFFFFFFFF;
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	fa5e fe81 	uxtab	lr, lr, r1
 80015f4:	43d4      	mvns	r4, r2
 80015f6:	4601      	mov	r1, r0
  {
    u8_deny = u8p_curfitComp[u8_i] == 0;
 80015f8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80015fc:	fab3 f383 	clz	r3, r3
    u64_bitmap &= ~(u8_deny << u8_i);
 8001600:	eb04 0c02 	add.w	ip, r4, r2
    u8_deny = u8p_curfitComp[u8_i] == 0;
 8001604:	095b      	lsrs	r3, r3, #5
    u64_bitmap &= ~(u8_deny << u8_i);
 8001606:	fa03 f30c 	lsl.w	r3, r3, ip
 800160a:	ea6f 0c03 	mvn.w	ip, r3
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 800160e:	4596      	cmp	lr, r2
    u64_bitmap &= ~(u8_deny << u8_i);
 8001610:	ea20 0003 	bic.w	r0, r0, r3
 8001614:	ea01 71ec 	and.w	r1, r1, ip, asr #31
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 8001618:	d1ee      	bne.n	80015f8 <u64Func_GetBitmap+0x18>
  }

  return (u64_bitmap);
}
 800161a:	bd10      	pop	{r4, pc}
  uint64_t u64_bitmap = 0xFFFFFFFFFFFFFFFF;
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	4601      	mov	r1, r0
}
 8001622:	4770      	bx	lr

08001624 <vFunc_ConvertS16toFloat>:

void vFunc_ConvertS16toFloat(const int16_t *s16p_src, float *f32p_dst, uint8_t u8_len)
{
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 8001624:	b172      	cbz	r2, 8001644 <vFunc_ConvertS16toFloat+0x20>
 8001626:	3a01      	subs	r2, #1
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	1e83      	subs	r3, r0, #2
 800162c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    f32p_dst[u8_i] = (float) s16p_src[u8_i];
 8001630:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8001634:	ee07 2a90 	vmov	s15, r2
 8001638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 800163c:	4298      	cmp	r0, r3
    f32p_dst[u8_i] = (float) s16p_src[u8_i];
 800163e:	ece1 7a01 	vstmia	r1!, {s15}
  for (uint8_t u8_i = 0; u8_i < u8_len; u8_i++)
 8001642:	d1f5      	bne.n	8001630 <vFunc_ConvertS16toFloat+0xc>
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <__io_putchar>:
	/******************************************************************
	  * @name   PUTCHAR_PROTOTYPE
	  * @brief  Retargets the C library printf function to the USART.
	  *****************************************************************/
	PUTCHAR_PROTOTYPE
	{
 8001648:	b500      	push	{lr}
 800164a:	b083      	sub	sp, #12
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 800164c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	{
 8001650:	9001      	str	r0, [sp, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 8001652:	2201      	movs	r2, #1
 8001654:	a901      	add	r1, sp, #4
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <__io_putchar+0x1c>)
 8001658:	f001 f8c0 	bl	80027dc <HAL_UART_Transmit>
		return ch;
	}
 800165c:	9801      	ldr	r0, [sp, #4]
 800165e:	b003      	add	sp, #12
 8001660:	f85d fb04 	ldr.w	pc, [sp], #4
 8001664:	20000270 	.word	0x20000270

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	2300      	movs	r3, #0
{
 800166c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001672:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001676:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800167a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4926      	ldr	r1, [pc, #152]	; (8001718 <SystemClock_Config+0xb0>)
 8001680:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001682:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800168c:	6408      	str	r0, [r1, #64]	; 0x40
 800168e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001690:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001694:	9100      	str	r1, [sp, #0]
 8001696:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	6813      	ldr	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a4:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8001708 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ac:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 68;
 80016ba:	2244      	movs	r2, #68	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c0:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c2:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c6:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ca:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016cc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f000 fd0f 	bl	80020f0 <HAL_RCC_OscConfig>
 80016d2:	b108      	cbz	r0, 80016d8 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001710 <SystemClock_Config+0xa8>
 80016dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e0:	2200      	movs	r2, #0
 80016e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ec:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f4:	f000 ff14 	bl	8002520 <HAL_RCC_ClockConfig>
 80016f8:	b108      	cbz	r0, 80016fe <SystemClock_Config+0x96>
 80016fa:	b672      	cpsid	i
  while (1)
 80016fc:	e7fe      	b.n	80016fc <SystemClock_Config+0x94>
}
 80016fe:	b014      	add	sp, #80	; 0x50
 8001700:	bd10      	pop	{r4, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	00000001 	.word	0x00000001
 800170c:	00050000 	.word	0x00050000
 8001710:	0000000f 	.word	0x0000000f
 8001714:	00000002 	.word	0x00000002
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <main>:
{
 8001720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001724:	ed2d 8b04 	vpush	{d8-d9}
 8001728:	b093      	sub	sp, #76	; 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	2400      	movs	r4, #0
  volatile float f32_duration = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	9302      	str	r3, [sp, #8]
  volatile float f32_accuracyFrame = 0;
 8001730:	9303      	str	r3, [sp, #12]
  HAL_Init();
 8001732:	f000 fb07 	bl	8001d44 <HAL_Init>
  SystemClock_Config();
 8001736:	f7ff ff97 	bl	8001668 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800173e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b95      	ldr	r3, [pc, #596]	; (8001998 <main+0x278>)
 8001744:	9404      	str	r4, [sp, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800174a:	4894      	ldr	r0, [pc, #592]	; (800199c <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	f042 0204 	orr.w	r2, r2, #4
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001754:	f002 0204 	and.w	r2, r2, #4
 8001758:	9204      	str	r2, [sp, #16]
 800175a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175c:	9405      	str	r4, [sp, #20]
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
 8001766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001768:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800176c:	9205      	str	r2, [sp, #20]
 800176e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	9406      	str	r4, [sp, #24]
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
 800177a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177c:	f002 0201 	and.w	r2, r2, #1
 8001780:	9206      	str	r2, [sp, #24]
 8001782:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	9407      	str	r4, [sp, #28]
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	f042 0202 	orr.w	r2, r2, #2
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	f002 0202 	and.w	r2, r2, #2
 8001794:	9207      	str	r2, [sp, #28]
 8001796:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	9408      	str	r4, [sp, #32]
 800179a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179c:	f042 0208 	orr.w	r2, r2, #8
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	f002 0208 	and.w	r2, r2, #8
 80017a8:	9208      	str	r2, [sp, #32]
 80017aa:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ac:	9409      	str	r4, [sp, #36]	; 0x24
 80017ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017bc:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017c2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017c6:	f000 fc8f 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017ca:	4875      	ldr	r0, [pc, #468]	; (80019a0 <main+0x280>)
 80017cc:	4622      	mov	r2, r4
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	f000 fc8a 	bl	80020e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017dc:	4871      	ldr	r0, [pc, #452]	; (80019a4 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017e0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017e6:	2600      	movs	r6, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f000 fb42 	bl	8001e70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017ec:	2700      	movs	r7, #0
 80017ee:	f244 0281 	movw	r2, #16513	; 0x4081
 80017f2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	4869      	ldr	r0, [pc, #420]	; (800199c <main+0x27c>)
 80017f6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80017fc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f000 fb36 	bl	8001e70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001804:	2240      	movs	r2, #64	; 0x40
 8001806:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001808:	4865      	ldr	r0, [pc, #404]	; (80019a0 <main+0x280>)
 800180a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800180c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001810:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001814:	f000 fb2c 	bl	8001e70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800181c:	4860      	ldr	r0, [pc, #384]	; (80019a0 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001820:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001822:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001826:	f000 fb23 	bl	8001e70 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800182a:	485f      	ldr	r0, [pc, #380]	; (80019a8 <main+0x288>)
  huart3.Init.BaudRate = 115200;
 800182c:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <main+0x28c>)
 800182e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001832:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001836:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001838:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800183c:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001844:	f000 ff30 	bl	80026a8 <HAL_UART_Init>
 8001848:	b108      	cbz	r0, 800184e <main+0x12e>
 800184a:	b672      	cpsid	i
  while (1)
 800184c:	e7fe      	b.n	800184c <main+0x12c>
  SystemCoreClockUpdate();
 800184e:	4605      	mov	r5, r0
 8001850:	f000 f9a2 	bl	8001b98 <SystemCoreClockUpdate>
  printf("\r\nINIT GCC OK @ %ld MHz\r\n",SystemCoreClock/1000000);
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <main+0x290>)
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <main+0x294>)
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	4857      	ldr	r0, [pc, #348]	; (80019b8 <main+0x298>)
 800185c:	fbb1 f1f3 	udiv	r1, r1, r3
 8001860:	f001 fd06 	bl	8003270 <iprintf>
  for (uint8_t u8_i = 0; u8_i < TX_LEN; u8_i++)
 8001864:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80019ec <main+0x2cc>
 8001868:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80019f0 <main+0x2d0>
 800186c:	4f53      	ldr	r7, [pc, #332]	; (80019bc <main+0x29c>)
	  f32_duration += DWT_GetTime_us();
 800186e:	ed9f 9a54 	vldr	s18, [pc, #336]	; 80019c0 <main+0x2a0>
	  f32_accuracy = 100.0f - (100.0f / f32_snr);
 8001872:	eddf 8a54 	vldr	s17, [pc, #336]	; 80019c4 <main+0x2a4>
#include "stm32f4xx_hal.h"

/* Public function declarations & definitions */
__STATIC_INLINE void DWT_Start(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001876:	4e54      	ldr	r6, [pc, #336]	; (80019c8 <main+0x2a8>)
	  vFunc_GetCurveFitLine(s16_curfitLine, &curfitCoef, RX_LEN);
 8001878:	eddf 9a54 	vldr	s19, [pc, #336]	; 80019cc <main+0x2ac>
	  vFunc_ConvertS16toFloat(s16_curfitLine, f32_curfitLine, RX_LEN);
 800187c:	f8df a174 	ldr.w	sl, [pc, #372]	; 80019f4 <main+0x2d4>
  DWT->CYCCNT = 0;
 8001880:	4c53      	ldr	r4, [pc, #332]	; (80019d0 <main+0x2b0>)
	  u64_bitmap = u64Func_GetBitmap(u8_curfitComp, RX_LEN);
 8001882:	4648      	mov	r0, r9
 8001884:	211e      	movs	r1, #30
 8001886:	f7ff feab 	bl	80015e0 <u64Func_GetBitmap>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800188a:	f8d6 20fc 	ldr.w	r2, [r6, #252]	; 0xfc
  DWT->CYCCNT = 0;
 800188e:	2300      	movs	r3, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001890:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001894:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
  DWT->CYCCNT = 0;
 8001898:	6063      	str	r3, [r4, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	468c      	mov	ip, r1
 800189e:	4683      	mov	fp, r0
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	6022      	str	r2, [r4, #0]
	  vFunc_CurfitEstimation(s16_src, &curfitCoef, RX_LEN, u64_bitmap);
 80018a6:	4640      	mov	r0, r8
 80018a8:	e9cd bc00 	strd	fp, ip, [sp]
 80018ac:	221e      	movs	r2, #30
 80018ae:	a90a      	add	r1, sp, #40	; 0x28
 80018b0:	f7ff fbac 	bl	800100c <vFunc_CurfitEstimation>
	  vFunc_GetCurveFitLine(s16_curfitLine, &curfitCoef, RX_LEN);
 80018b4:	221e      	movs	r2, #30
 80018b6:	a90a      	add	r1, sp, #40	; 0x28
 80018b8:	ee19 0a90 	vmov	r0, s19
 80018bc:	f7ff fe10 	bl	80014e0 <vFunc_GetCurveFitLine>
  return (DWT->CYCCNT);
}

__STATIC_INLINE float DWT_GetTime(void)
{
  return ((float) DWT->CYCCNT / HAL_RCC_GetHCLKFreq());
 80018c0:	ed94 8a01 	vldr	s16, [r4, #4]
 80018c4:	f000 feca 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80018c8:	ee07 0a90 	vmov	s15, r0
 80018cc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80018d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	  f32_duration += DWT_GetTime_us();
 80018d4:	eddd 7a02 	vldr	s15, [sp, #8]
 80018d8:	eec8 6a07 	vdiv.f32	s13, s16, s14
  DWT->CYCCNT = 0;
 80018dc:	2300      	movs	r3, #0
	  vFunc_ConvertS16toFloat(s16_curfitLine, f32_curfitLine, RX_LEN);
 80018de:	221e      	movs	r2, #30
 80018e0:	4651      	mov	r1, sl
  for (uint8_t u8_i = 0; u8_i < TX_LEN; u8_i++)
 80018e2:	f109 091e 	add.w	r9, r9, #30
 80018e6:	f108 083c 	add.w	r8, r8, #60	; 0x3c
	  vFunc_ConvertS16toFloat(s16_curfitLine, f32_curfitLine, RX_LEN);
 80018ea:	ee19 0a90 	vmov	r0, s19
	  f32_duration += DWT_GetTime_us();
 80018ee:	eee6 7a89 	vfma.f32	s15, s13, s18
 80018f2:	edcd 7a02 	vstr	s15, [sp, #8]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80018f6:	f8d4 c000 	ldr.w	ip, [r4]
 80018fa:	f02c 0c01 	bic.w	ip, ip, #1
 80018fe:	f8c4 c000 	str.w	ip, [r4]
  DWT->CYCCNT = 0;
 8001902:	6063      	str	r3, [r4, #4]
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001904:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
	  vFunc_ConvertS16toFloat(s16_curfitLine, f32_curfitLine, RX_LEN);
 8001910:	f7ff fe88 	bl	8001624 <vFunc_ConvertS16toFloat>
	  f32_snr = arm_snr_f32(f32_curfitLineRef, f32_curfitLine, RX_LEN);
 8001914:	4638      	mov	r0, r7
 8001916:	221e      	movs	r2, #30
 8001918:	4651      	mov	r1, sl
 800191a:	f000 f9a1 	bl	8001c60 <arm_snr_f32>
	  f32_accuracy = 100.0f - (100.0f / f32_snr);
 800191e:	eec8 7a80 	vdiv.f32	s15, s17, s0
  for (uint8_t u8_i = 0; u8_i < TX_LEN; u8_i++)
 8001922:	3778      	adds	r7, #120	; 0x78
	  f32_accuracyFrame += f32_accuracy;
 8001924:	ed9d 7a03 	vldr	s14, [sp, #12]
	  f32_accuracy = 100.0f - (100.0f / f32_snr);
 8001928:	ee78 7ae7 	vsub.f32	s15, s17, s15
	  f32_accuracyFrame += f32_accuracy;
 800192c:	ee37 7a27 	vadd.f32	s14, s14, s15
	  printf("Accuracy TX[%d]: %.2f %%\r\n", u8_i, f32_accuracy);
 8001930:	ee17 0a90 	vmov	r0, s15
	  f32_accuracyFrame += f32_accuracy;
 8001934:	ed8d 7a03 	vstr	s14, [sp, #12]
	  printf("Accuracy TX[%d]: %.2f %%\r\n", u8_i, f32_accuracy);
 8001938:	f7fe fe16 	bl	8000568 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4824      	ldr	r0, [pc, #144]	; (80019d4 <main+0x2b4>)
 8001942:	4629      	mov	r1, r5
  for (uint8_t u8_i = 0; u8_i < TX_LEN; u8_i++)
 8001944:	3501      	adds	r5, #1
	  printf("Accuracy TX[%d]: %.2f %%\r\n", u8_i, f32_accuracy);
 8001946:	f001 fc93 	bl	8003270 <iprintf>
  for (uint8_t u8_i = 0; u8_i < TX_LEN; u8_i++)
 800194a:	2d10      	cmp	r5, #16
 800194c:	d198      	bne.n	8001880 <main+0x160>
  f32_accuracyFrame /= TX_LEN;
 800194e:	eddd 7a03 	vldr	s15, [sp, #12]
 8001952:	eddf 6a21 	vldr	s13, [pc, #132]	; 80019d8 <main+0x2b8>
  f32_duration /= 1000;
 8001956:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019dc <main+0x2bc>
  printf("\r\n");
 800195a:	4821      	ldr	r0, [pc, #132]	; (80019e0 <main+0x2c0>)
  f32_accuracyFrame /= TX_LEN;
 800195c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001960:	edcd 7a03 	vstr	s15, [sp, #12]
  f32_duration /= 1000;
 8001964:	eddd 7a02 	vldr	s15, [sp, #8]
 8001968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196c:	edcd 7a02 	vstr	s15, [sp, #8]
  printf("\r\n");
 8001970:	f001 fd04 	bl	800337c <puts>
  printf("Frame Accuracy: %.2f %%\r\n", f32_accuracyFrame);
 8001974:	9803      	ldr	r0, [sp, #12]
 8001976:	f7fe fdf7 	bl	8000568 <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <main+0x2c4>)
 8001980:	f001 fc76 	bl	8003270 <iprintf>
  printf("Frame Duration: %.2f ms\r\n", f32_duration);
 8001984:	9802      	ldr	r0, [sp, #8]
 8001986:	f7fe fdef 	bl	8000568 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4816      	ldr	r0, [pc, #88]	; (80019e8 <main+0x2c8>)
 8001990:	f001 fc6e 	bl	8003270 <iprintf>
  while (1)
 8001994:	e7fe      	b.n	8001994 <main+0x274>
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	20000270 	.word	0x20000270
 80019ac:	40004800 	.word	0x40004800
 80019b0:	20000000 	.word	0x20000000
 80019b4:	000f4240 	.word	0x000f4240
 80019b8:	08006740 	.word	0x08006740
 80019bc:	08005a20 	.word	0x08005a20
 80019c0:	49742400 	.word	0x49742400
 80019c4:	42c80000 	.word	0x42c80000
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	200002b4 	.word	0x200002b4
 80019d0:	e0001000 	.word	0xe0001000
 80019d4:	0800675c 	.word	0x0800675c
 80019d8:	3d800000 	.word	0x3d800000
 80019dc:	3a83126f 	.word	0x3a83126f
 80019e0:	08006778 	.word	0x08006778
 80019e4:	0800677c 	.word	0x0800677c
 80019e8:	08006798 	.word	0x08006798
 80019ec:	08006560 	.word	0x08006560
 80019f0:	080061a0 	.word	0x080061a0
 80019f4:	200001f8 	.word	0x200001f8

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_MspInit+0x34>)
 80019fc:	2100      	movs	r1, #0
 80019fe:	9100      	str	r1, [sp, #0]
 8001a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
 8001a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	9101      	str	r1, [sp, #4]
 8001a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	b002      	add	sp, #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_UART_MspInit+0x70>)
 8001a34:	6801      	ldr	r1, [r0, #0]
{
 8001a36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	2300      	movs	r3, #0
  if(huart->Instance==USART3)
 8001a3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001a44:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART3)
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a48:	b008      	add	sp, #32
 8001a4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001a54:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8001a58:	6410      	str	r0, [r2, #64]	; 0x40
 8001a5a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001a5c:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8001a60:	9000      	str	r0, [sp, #0]
 8001a62:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a70:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a72:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001a98 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a7e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a82:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8c:	f000 f9f0 	bl	8001e70 <HAL_GPIO_Init>
}
 8001a90:	b008      	add	sp, #32
 8001a92:	bd10      	pop	{r4, pc}
 8001a94:	f3af 8000 	nop.w
 8001a98:	00000300 	.word	0x00000300
 8001a9c:	00000002 	.word	0x00000002
 8001aa0:	40004800 	.word	0x40004800
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler>
 8001aaa:	bf00      	nop

08001aac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <HardFault_Handler>
 8001aae:	bf00      	nop

08001ab0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler>
 8001ab2:	bf00      	nop

08001ab4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <BusFault_Handler>
 8001ab6:	bf00      	nop

08001ab8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler>
 8001aba:	bf00      	nop

08001abc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <DebugMon_Handler>:
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <PendSV_Handler>:
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 b956 	b.w	8001d78 <HAL_IncTick>

08001acc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001acc:	2001      	movs	r0, #1
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ad2:	f000 ff31 	bl	8002938 <__errno>
 8001ad6:	2316      	movs	r3, #22
 8001ad8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295
 8001ade:	bd08      	pop	{r3, pc}

08001ae0 <_exit>:

void _exit (int status)
{
 8001ae0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ae2:	f000 ff29 	bl	8002938 <__errno>
 8001ae6:	2316      	movs	r3, #22
 8001ae8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001aea:	e7fe      	b.n	8001aea <_exit+0xa>

08001aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	1e16      	subs	r6, r2, #0
 8001af0:	dd07      	ble.n	8001b02 <_read+0x16>
 8001af2:	460c      	mov	r4, r1
 8001af4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	42a5      	cmp	r5, r4
 8001b00:	d1f9      	bne.n	8001af6 <_read+0xa>
	}

return len;
}
 8001b02:	4630      	mov	r0, r6
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
 8001b06:	bf00      	nop

08001b08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b08:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	1e16      	subs	r6, r2, #0
 8001b0c:	dd07      	ble.n	8001b1e <_write+0x16>
 8001b0e:	460c      	mov	r4, r1
 8001b10:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001b12:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b16:	f7ff fd97 	bl	8001648 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	42ac      	cmp	r4, r5
 8001b1c:	d1f9      	bne.n	8001b12 <_write+0xa>
	}
	return len;
}
 8001b1e:	4630      	mov	r0, r6
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	bf00      	nop

08001b24 <_close>:

int _close(int file)
{
	return -1;
}
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b30:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001b32:	2000      	movs	r0, #0
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b38:	2001      	movs	r0, #1
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	4770      	bx	lr

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b42:	4c0c      	ldr	r4, [pc, #48]	; (8001b74 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <_sbrk+0x38>)
 8001b46:	490d      	ldr	r1, [pc, #52]	; (8001b7c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001b48:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001b4c:	b12a      	cbz	r2, 8001b5a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4410      	add	r0, r2
 8001b50:	4288      	cmp	r0, r1
 8001b52:	d807      	bhi.n	8001b64 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b54:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001b56:	4610      	mov	r0, r2
 8001b58:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <_sbrk+0x40>)
 8001b5c:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4410      	add	r0, r2
 8001b60:	4288      	cmp	r0, r1
 8001b62:	d9f7      	bls.n	8001b54 <_sbrk+0x14>
    errno = ENOMEM;
 8001b64:	f000 fee8 	bl	8002938 <__errno>
 8001b68:	230c      	movs	r3, #12
    return (void *)-1;
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001b6e:	6003      	str	r3, [r0, #0]
}
 8001b70:	4610      	mov	r0, r2
 8001b72:	bd10      	pop	{r4, pc}
 8001b74:	200002f0 	.word	0x200002f0
 8001b78:	20030000 	.word	0x20030000
 8001b7c:	00000800 	.word	0x00000800
 8001b80:	20000308 	.word	0x20000308

08001b84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <SystemInit+0x10>)
 8001b86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b98:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <SystemCoreClockUpdate+0x5c>)
 8001b9a:	6893      	ldr	r3, [r2, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d00c      	beq.n	8001bbe <SystemCoreClockUpdate+0x26>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00c      	beq.n	8001bc2 <SystemCoreClockUpdate+0x2a>
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <SystemCoreClockUpdate+0x5c>)
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <SystemCoreClockUpdate+0x64>)
 8001bae:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001bb0:	4913      	ldr	r1, [pc, #76]	; (8001c00 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001bb2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001bb6:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8001bb8:	40d3      	lsrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
}
 8001bbc:	4770      	bx	lr
  switch (tmp)
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <SystemCoreClockUpdate+0x6c>)
 8001bc0:	e7f3      	b.n	8001baa <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001bc2:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 8001bc6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001bce:	6853      	ldr	r3, [r2, #4]
 8001bd0:	bf14      	ite	ne
 8001bd2:	4a0c      	ldrne	r2, [pc, #48]	; (8001c04 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001bd4:	4a08      	ldreq	r2, [pc, #32]	; (8001bf8 <SystemCoreClockUpdate+0x60>)
 8001bd6:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bda:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <SystemCoreClockUpdate+0x5c>)
 8001bdc:	6852      	ldr	r2, [r2, #4]
 8001bde:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001be2:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001be6:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bec:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001bee:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001bf2:	e7da      	b.n	8001baa <SystemCoreClockUpdate+0x12>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	080067b4 	.word	0x080067b4
 8001c00:	20000000 	.word	0x20000000
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c32:	f7ff ffa7 	bl	8001b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f000 fe85 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff fd71 	bl	8001720 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c4c:	08006bb4 	.word	0x08006bb4
  ldr r2, =_sbss
 8001c50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c54:	20000308 	.word	0x20000308

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
 8001c5a:	0000      	movs	r0, r0
 8001c5c:	0000      	movs	r0, r0
	...

08001c60 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8001c60:	b510      	push	{r4, lr}
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 8001c62:	b3da      	cbz	r2, 8001cdc <arm_snr_f32+0x7c>
  float EnergySignal = 0.0, EnergyError = 0.0;
 8001c64:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001cf0 <arm_snr_f32+0x90>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
      temp =  *test;

	  if (temp == 0x7FC00000)
 8001c68:	4c22      	ldr	r4, [pc, #136]	; (8001cf4 <arm_snr_f32+0x94>)
  float EnergySignal = 0.0, EnergyError = 0.0;
 8001c6a:	eef0 6a47 	vmov.f32	s13, s14
 8001c6e:	3804      	subs	r0, #4
 8001c70:	f1a1 0c04 	sub.w	ip, r1, #4
  for (i = 0; i < buffSize; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	e00b      	b.n	8001c90 <arm_snr_f32+0x30>
	  		return(0);
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
      temp =  *test;
 8001c78:	f85c 1f04 	ldr.w	r1, [ip, #4]!
	  if (temp == 0x7FC00000)
	  {
	  		return(0);
	  }
      EnergySignal += pRef[i] * pRef[i];
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8001c7c:	ee06 1a10 	vmov	s12, r1
 8001c80:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  if (temp == 0x7FC00000)
 8001c84:	42a1      	cmp	r1, r4
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8001c86:	eea7 7aa7 	vfma.f32	s14, s15, s15
	  if (temp == 0x7FC00000)
 8001c8a:	d00b      	beq.n	8001ca4 <arm_snr_f32+0x44>
  for (i = 0; i < buffSize; i++)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d00c      	beq.n	8001caa <arm_snr_f32+0x4a>
      temp =  *test;
 8001c90:	f850 1f04 	ldr.w	r1, [r0, #4]!
      temp =  *test;
 8001c94:	ee07 1a90 	vmov	s15, r1
	  if (temp == 0x7FC00000)
 8001c98:	42a1      	cmp	r1, r4
      EnergySignal += pRef[i] * pRef[i];
 8001c9a:	eee7 6aa7 	vfma.f32	s13, s15, s15
  for (i = 0; i < buffSize; i++)
 8001c9e:	f103 0301 	add.w	r3, r3, #1
	  if (temp == 0x7FC00000)
 8001ca2:	d1e9      	bne.n	8001c78 <arm_snr_f32+0x18>
	  		return(0);
 8001ca4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001cf0 <arm_snr_f32+0x90>

  SNR = 10 * log10 (EnergySignal / EnergyError);

  return (SNR);

}
 8001ca8:	bd10      	pop	{r4, pc}
    if (temp == 0x7FC00000)
 8001caa:	ee17 3a10 	vmov	r3, s14
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	d0f8      	beq.n	8001ca4 <arm_snr_f32+0x44>
  SNR = 10 * log10 (EnergySignal / EnergyError);
 8001cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb6:	ee17 0a90 	vmov	r0, s15
 8001cba:	f7fe fc55 	bl	8000568 <__aeabi_f2d>
 8001cbe:	ec41 0b10 	vmov	d0, r0, r1
 8001cc2:	f003 fc11 	bl	80054e8 <log10>
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <arm_snr_f32+0x98>)
 8001cc8:	ec51 0b10 	vmov	r0, r1, d0
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f7fe fca3 	bl	8000618 <__aeabi_dmul>
 8001cd2:	f7fe ff79 	bl	8000bc8 <__aeabi_d2f>
 8001cd6:	ee00 0a10 	vmov	s0, r0
}
 8001cda:	bd10      	pop	{r4, pc}
  for (i = 0; i < buffSize; i++)
 8001cdc:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8001ce8 <arm_snr_f32+0x88>
 8001ce0:	e7ef      	b.n	8001cc2 <arm_snr_f32+0x62>
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	7ff80000 	.word	0x7ff80000
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	7fc00000 	.word	0x7fc00000
 8001cf8:	40240000 	.word	0x40240000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_InitTick+0x3c>)
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_InitTick+0x40>)
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
{
 8001d06:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d10:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d14:	f000 f892 	bl	8001e3c <HAL_SYSTICK_Config>
 8001d18:	b908      	cbnz	r0, 8001d1e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	2d0f      	cmp	r5, #15
 8001d1c:	d901      	bls.n	8001d22 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001d1e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d20:	bd38      	pop	{r3, r4, r5, pc}
 8001d22:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	4602      	mov	r2, r0
 8001d26:	4629      	mov	r1, r5
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 f848 	bl	8001dc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_InitTick+0x44>)
 8001d32:	4620      	mov	r0, r4
 8001d34:	601d      	str	r5, [r3, #0]
}
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_Init>:
{
 8001d44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_Init+0x30>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f81b 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff ffc8 	bl	8001cfc <HAL_InitTick>
  HAL_MspInit();
 8001d6c:	f7ff fe44 	bl	80019f8 <HAL_MspInit>
}
 8001d70:	2000      	movs	r0, #0
 8001d72:	bd08      	pop	{r3, pc}
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x10>)
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_IncTick+0x14>)
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	440b      	add	r3, r1
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200002f4 	.word	0x200002f4
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d90:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <HAL_GetTick+0x8>)
 8001d92:	6818      	ldr	r0, [r3, #0]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200002f4 	.word	0x200002f4

08001d9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d9e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001db6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_NVIC_SetPriority+0x74>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dca:	f1c3 0e07 	rsb	lr, r3, #7
 8001dce:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd6:	bf28      	it	cs
 8001dd8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ddc:	f1bc 0f06 	cmp.w	ip, #6
 8001de0:	d91b      	bls.n	8001e1a <HAL_NVIC_SetPriority+0x5a>
 8001de2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 3cff 	mov.w	ip, #4294967295
 8001de8:	fa0c fc03 	lsl.w	ip, ip, r3
 8001dec:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 3cff 	mov.w	ip, #4294967295
 8001df4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001df8:	ea21 010c 	bic.w	r1, r1, ip
 8001dfc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e04:	db0c      	blt.n	8001e20 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e0a:	0109      	lsls	r1, r1, #4
 8001e0c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e10:	b2c9      	uxtb	r1, r1
 8001e12:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	e7e7      	b.n	8001df0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_NVIC_SetPriority+0x78>)
 8001e22:	f000 000f 	and.w	r0, r0, #15
 8001e26:	0109      	lsls	r1, r1, #4
 8001e28:	4403      	add	r3, r0
 8001e2a:	b2c9      	uxtb	r1, r1
 8001e2c:	7619      	strb	r1, [r3, #24]
 8001e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	e000ecfc 	.word	0xe000ecfc

08001e3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	3801      	subs	r0, #1
 8001e3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e42:	d210      	bcs.n	8001e66 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e44:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	4c08      	ldr	r4, [pc, #32]	; (8001e6c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001e52:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e56:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e58:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	6119      	str	r1, [r3, #16]
 8001e64:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2001      	movs	r0, #1
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e74:	2200      	movs	r2, #0
 8001e76:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80020d8 <HAL_GPIO_Init+0x268>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7c:	4e8f      	ldr	r6, [pc, #572]	; (80020bc <HAL_GPIO_Init+0x24c>)
{
 8001e7e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e80:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e82:	4689      	mov	r9, r1
 8001e84:	e005      	b.n	8001e92 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	3301      	adds	r3, #1
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	f102 0202 	add.w	r2, r2, #2
 8001e8e:	f000 8094 	beq.w	8001fba <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 8001e92:	2101      	movs	r1, #1
 8001e94:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001e9a:	43a1      	bics	r1, r4
 8001e9c:	d1f3      	bne.n	8001e86 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001ea2:	f00c 0103 	and.w	r1, ip, #3
 8001ea6:	1e4d      	subs	r5, r1, #1
 8001ea8:	2d01      	cmp	r5, #1
 8001eaa:	f240 8089 	bls.w	8001fc0 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	2903      	cmp	r1, #3
 8001eb0:	f040 80c8 	bne.w	8002044 <HAL_GPIO_Init+0x1d4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	4091      	lsls	r1, r2
 8001eb6:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001eb8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eba:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebe:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001ec2:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	d0df      	beq.n	8001e86 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	9103      	str	r1, [sp, #12]
 8001eca:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001ece:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001ed2:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001ed6:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001eda:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001ede:	9103      	str	r1, [sp, #12]
 8001ee0:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee2:	f023 0103 	bic.w	r1, r3, #3
 8001ee6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001eea:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eee:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef6:	00bf      	lsls	r7, r7, #2
 8001ef8:	250f      	movs	r5, #15
 8001efa:	40bd      	lsls	r5, r7
 8001efc:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f00:	4d6f      	ldr	r5, [pc, #444]	; (80020c0 <HAL_GPIO_Init+0x250>)
 8001f02:	42a8      	cmp	r0, r5
 8001f04:	d02e      	beq.n	8001f64 <HAL_GPIO_Init+0xf4>
 8001f06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f0a:	42a8      	cmp	r0, r5
 8001f0c:	f000 809e 	beq.w	800204c <HAL_GPIO_Init+0x1dc>
 8001f10:	4d6c      	ldr	r5, [pc, #432]	; (80020c4 <HAL_GPIO_Init+0x254>)
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	f000 80a1 	beq.w	800205a <HAL_GPIO_Init+0x1ea>
 8001f18:	4d6b      	ldr	r5, [pc, #428]	; (80020c8 <HAL_GPIO_Init+0x258>)
 8001f1a:	42a8      	cmp	r0, r5
 8001f1c:	f000 80a4 	beq.w	8002068 <HAL_GPIO_Init+0x1f8>
 8001f20:	4d6a      	ldr	r5, [pc, #424]	; (80020cc <HAL_GPIO_Init+0x25c>)
 8001f22:	42a8      	cmp	r0, r5
 8001f24:	f000 80a7 	beq.w	8002076 <HAL_GPIO_Init+0x206>
 8001f28:	4d69      	ldr	r5, [pc, #420]	; (80020d0 <HAL_GPIO_Init+0x260>)
 8001f2a:	42a8      	cmp	r0, r5
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x222>
 8001f30:	4d68      	ldr	r5, [pc, #416]	; (80020d4 <HAL_GPIO_Init+0x264>)
 8001f32:	42a8      	cmp	r0, r5
 8001f34:	f000 80b4 	beq.w	80020a0 <HAL_GPIO_Init+0x230>
 8001f38:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 80020dc <HAL_GPIO_Init+0x26c>
 8001f3c:	4570      	cmp	r0, lr
 8001f3e:	f000 80a1 	beq.w	8002084 <HAL_GPIO_Init+0x214>
 8001f42:	f8df e19c 	ldr.w	lr, [pc, #412]	; 80020e0 <HAL_GPIO_Init+0x270>
 8001f46:	4570      	cmp	r0, lr
 8001f48:	f000 80b1 	beq.w	80020ae <HAL_GPIO_Init+0x23e>
 8001f4c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80020e4 <HAL_GPIO_Init+0x274>
 8001f50:	4570      	cmp	r0, lr
 8001f52:	bf0c      	ite	eq
 8001f54:	f04f 0e09 	moveq.w	lr, #9
 8001f58:	f04f 0e0a 	movne.w	lr, #10
 8001f5c:	fa0e f707 	lsl.w	r7, lr, r7
 8001f60:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f64:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->IMR;
 8001f68:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f6e:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001f72:	bf0c      	ite	eq
 8001f74:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001f76:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->IMR = temp;
 8001f7a:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8001f7c:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7e:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001f82:	bf0c      	ite	eq
 8001f84:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001f86:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001f8a:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8c:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001f92:	bf0c      	ite	eq
 8001f94:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001f96:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->RTSR = temp;
 8001f9a:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR;
 8001f9c:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	bf0c      	ite	eq
 8001fa8:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001faa:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001fb0:	60f1      	str	r1, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	f102 0202 	add.w	r2, r2, #2
 8001fb6:	f47f af6c 	bne.w	8001e92 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001fba:	b005      	add	sp, #20
 8001fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc0:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001fc4:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc6:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fca:	2503      	movs	r5, #3
 8001fcc:	fa05 fe02 	lsl.w	lr, r5, r2
 8001fd0:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd4:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001fd8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001fda:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe0:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe4:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001fe8:	409f      	lsls	r7, r3
 8001fea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001fee:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001ff0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001ffa:	4097      	lsls	r7, r2
 8001ffc:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002000:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8002002:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	fa01 f102 	lsl.w	r1, r1, r2
 8002008:	f47f af56 	bne.w	8001eb8 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 800200c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002010:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002014:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002018:	f8de 7020 	ldr.w	r7, [lr, #32]
 800201c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800201e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002026:	fa07 f708 	lsl.w	r7, r7, r8
 800202a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202c:	270f      	movs	r7, #15
 800202e:	fa07 f808 	lsl.w	r8, r7, r8
 8002032:	9f00      	ldr	r7, [sp, #0]
 8002034:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	9f01      	ldr	r7, [sp, #4]
 800203a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	f8ce 7020 	str.w	r7, [lr, #32]
 8002042:	e739      	b.n	8001eb8 <HAL_GPIO_Init+0x48>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	2503      	movs	r5, #3
 8002046:	4095      	lsls	r5, r2
 8002048:	43ed      	mvns	r5, r5
 800204a:	e7d1      	b.n	8001ff0 <HAL_GPIO_Init+0x180>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204c:	f04f 0e01 	mov.w	lr, #1
 8002050:	fa0e f707 	lsl.w	r7, lr, r7
 8002054:	ea48 0807 	orr.w	r8, r8, r7
 8002058:	e784      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 800205a:	f04f 0e02 	mov.w	lr, #2
 800205e:	fa0e f707 	lsl.w	r7, lr, r7
 8002062:	ea48 0807 	orr.w	r8, r8, r7
 8002066:	e77d      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 8002068:	f04f 0e03 	mov.w	lr, #3
 800206c:	fa0e f707 	lsl.w	r7, lr, r7
 8002070:	ea48 0807 	orr.w	r8, r8, r7
 8002074:	e776      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 8002076:	f04f 0e04 	mov.w	lr, #4
 800207a:	fa0e f707 	lsl.w	r7, lr, r7
 800207e:	ea48 0807 	orr.w	r8, r8, r7
 8002082:	e76f      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 8002084:	f04f 0e07 	mov.w	lr, #7
 8002088:	fa0e f707 	lsl.w	r7, lr, r7
 800208c:	ea48 0807 	orr.w	r8, r8, r7
 8002090:	e768      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 8002092:	f04f 0e05 	mov.w	lr, #5
 8002096:	fa0e f707 	lsl.w	r7, lr, r7
 800209a:	ea48 0807 	orr.w	r8, r8, r7
 800209e:	e761      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 80020a0:	f04f 0e06 	mov.w	lr, #6
 80020a4:	fa0e f707 	lsl.w	r7, lr, r7
 80020a8:	ea48 0807 	orr.w	r8, r8, r7
 80020ac:	e75a      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 80020ae:	f04f 0e08 	mov.w	lr, #8
 80020b2:	fa0e f707 	lsl.w	r7, lr, r7
 80020b6:	ea48 0807 	orr.w	r8, r8, r7
 80020ba:	e753      	b.n	8001f64 <HAL_GPIO_Init+0xf4>
 80020bc:	40013c00 	.word	0x40013c00
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40021400 	.word	0x40021400
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40021c00 	.word	0x40021c00
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40022400 	.word	0x40022400

080020e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	b902      	cbnz	r2, 80020ec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	0409      	lsls	r1, r1, #16
 80020ec:	6181      	str	r1, [r0, #24]
  }
}
 80020ee:	4770      	bx	lr

080020f0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	2800      	cmp	r0, #0
 80020f2:	f000 81a2 	beq.w	800243a <HAL_RCC_OscConfig+0x34a>
{
 80020f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	07dd      	lsls	r5, r3, #31
{
 80020fe:	b082      	sub	sp, #8
 8002100:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	d52f      	bpl.n	8002164 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002104:	499e      	ldr	r1, [pc, #632]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002106:	688a      	ldr	r2, [r1, #8]
 8002108:	f002 020c 	and.w	r2, r2, #12
 800210c:	2a04      	cmp	r2, #4
 800210e:	f000 80ed 	beq.w	80022ec <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	688a      	ldr	r2, [r1, #8]
 8002114:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002118:	2a08      	cmp	r2, #8
 800211a:	f000 80e3 	beq.w	80022e4 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	6863      	ldr	r3, [r4, #4]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	f000 80ec 	beq.w	8002300 <HAL_RCC_OscConfig+0x210>
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	f000 8175 	beq.w	800241a <HAL_RCC_OscConfig+0x32a>
 8002130:	4d93      	ldr	r5, [pc, #588]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002132:	682a      	ldr	r2, [r5, #0]
 8002134:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002138:	602a      	str	r2, [r5, #0]
 800213a:	682a      	ldr	r2, [r5, #0]
 800213c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002140:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 80e1 	bne.w	800230a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fe22 	bl	8001d90 <HAL_GetTick>
 800214c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e005      	b.n	800215c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fe1e 	bl	8001d90 <HAL_GetTick>
 8002154:	1b80      	subs	r0, r0, r6
 8002156:	2864      	cmp	r0, #100	; 0x64
 8002158:	f200 8101 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	d4f6      	bmi.n	8002150 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	079f      	lsls	r7, r3, #30
 8002166:	d528      	bpl.n	80021ba <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002168:	4a85      	ldr	r2, [pc, #532]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 800216a:	6891      	ldr	r1, [r2, #8]
 800216c:	f011 0f0c 	tst.w	r1, #12
 8002170:	f000 8090 	beq.w	8002294 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002174:	6891      	ldr	r1, [r2, #8]
 8002176:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	2908      	cmp	r1, #8
 800217c:	f000 8086 	beq.w	800228c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002180:	68e3      	ldr	r3, [r4, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 810e 	beq.w	80023a4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4e7d      	ldr	r6, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002190:	f7ff fdfe 	bl	8001d90 <HAL_GetTick>
 8002194:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	e005      	b.n	80021a4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002198:	f7ff fdfa 	bl	8001d90 <HAL_GetTick>
 800219c:	1b40      	subs	r0, r0, r5
 800219e:	2802      	cmp	r0, #2
 80021a0:	f200 80dd 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	6833      	ldr	r3, [r6, #0]
 80021a6:	0798      	lsls	r0, r3, #30
 80021a8:	d5f6      	bpl.n	8002198 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	6833      	ldr	r3, [r6, #0]
 80021ac:	6922      	ldr	r2, [r4, #16]
 80021ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021b6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	071a      	lsls	r2, r3, #28
 80021bc:	d451      	bmi.n	8002262 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021be:	0758      	lsls	r0, r3, #29
 80021c0:	d52f      	bpl.n	8002222 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 80021c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021c6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80021ca:	d07f      	beq.n	80022cc <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80021cc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4e6e      	ldr	r6, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021d0:	6833      	ldr	r3, [r6, #0]
 80021d2:	05d9      	lsls	r1, r3, #23
 80021d4:	f140 80b3 	bpl.w	800233e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	68a3      	ldr	r3, [r4, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	f000 80c3 	beq.w	8002366 <HAL_RCC_OscConfig+0x276>
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	f000 812c 	beq.w	800243e <HAL_RCC_OscConfig+0x34e>
 80021e6:	4e66      	ldr	r6, [pc, #408]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 80021e8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	6732      	str	r2, [r6, #112]	; 0x70
 80021f0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 80b9 	bne.w	8002370 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fdc7 	bl	8001d90 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002206:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e005      	b.n	8002216 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fdc1 	bl	8001d90 <HAL_GetTick>
 800220e:	1bc0      	subs	r0, r0, r7
 8002210:	4540      	cmp	r0, r8
 8002212:	f200 80a4 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002218:	0798      	lsls	r0, r3, #30
 800221a:	d4f6      	bmi.n	800220a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221c:	2d00      	cmp	r5, #0
 800221e:	f040 8106 	bne.w	800242e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	69a0      	ldr	r0, [r4, #24]
 8002224:	b1c8      	cbz	r0, 800225a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4d56      	ldr	r5, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002228:	68ab      	ldr	r3, [r5, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	f000 80c9 	beq.w	80023c6 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_OscConfig+0x294>)
 8002236:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800223a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223c:	f000 8109 	beq.w	8002452 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fda6 	bl	8001d90 <HAL_GetTick>
 8002244:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e005      	b.n	8002254 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fda2 	bl	8001d90 <HAL_GetTick>
 800224c:	1b00      	subs	r0, r0, r4
 800224e:	2802      	cmp	r0, #2
 8002250:	f200 8085 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	d4f6      	bmi.n	8002248 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800225a:	2000      	movs	r0, #0
}
 800225c:	b002      	add	sp, #8
 800225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002262:	6963      	ldr	r3, [r4, #20]
 8002264:	b30b      	cbz	r3, 80022aa <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002268:	4e45      	ldr	r6, [pc, #276]	; (8002380 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800226a:	2201      	movs	r2, #1
 800226c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002270:	f7ff fd8e 	bl	8001d90 <HAL_GetTick>
 8002274:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e004      	b.n	8002282 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff fd8a 	bl	8001d90 <HAL_GetTick>
 800227c:	1b40      	subs	r0, r0, r5
 800227e:	2802      	cmp	r0, #2
 8002280:	d86d      	bhi.n	800235e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002284:	079b      	lsls	r3, r3, #30
 8002286:	d5f7      	bpl.n	8002278 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	e798      	b.n	80021be <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228c:	6852      	ldr	r2, [r2, #4]
 800228e:	0256      	lsls	r6, r2, #9
 8002290:	f53f af76 	bmi.w	8002180 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002294:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	0795      	lsls	r5, r2, #30
 800229a:	d544      	bpl.n	8002326 <HAL_RCC_OscConfig+0x236>
 800229c:	68e2      	ldr	r2, [r4, #12]
 800229e:	2a01      	cmp	r2, #1
 80022a0:	d041      	beq.n	8002326 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
}
 80022a4:	b002      	add	sp, #8
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80022aa:	4a36      	ldr	r2, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	4e34      	ldr	r6, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80022ae:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022b2:	f7ff fd6d 	bl	8001d90 <HAL_GetTick>
 80022b6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e004      	b.n	80022c4 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7ff fd69 	bl	8001d90 <HAL_GetTick>
 80022be:	1b40      	subs	r0, r0, r5
 80022c0:	2802      	cmp	r0, #2
 80022c2:	d84c      	bhi.n	800235e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022c6:	079f      	lsls	r7, r3, #30
 80022c8:	d4f7      	bmi.n	80022ba <HAL_RCC_OscConfig+0x1ca>
 80022ca:	e7dd      	b.n	8002288 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022e0:	2501      	movs	r5, #1
 80022e2:	e774      	b.n	80021ce <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e4:	684a      	ldr	r2, [r1, #4]
 80022e6:	0250      	lsls	r0, r2, #9
 80022e8:	f57f af19 	bpl.w	800211e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	0391      	lsls	r1, r2, #14
 80022f2:	f57f af37 	bpl.w	8002164 <HAL_RCC_OscConfig+0x74>
 80022f6:	6862      	ldr	r2, [r4, #4]
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	f47f af33 	bne.w	8002164 <HAL_RCC_OscConfig+0x74>
 80022fe:	e7d0      	b.n	80022a2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002302:	6813      	ldr	r3, [r2, #0]
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800230a:	f7ff fd41 	bl	8001d90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4e1c      	ldr	r6, [pc, #112]	; (8002380 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002310:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e004      	b.n	800231e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fd3c 	bl	8001d90 <HAL_GetTick>
 8002318:	1b40      	subs	r0, r0, r5
 800231a:	2864      	cmp	r0, #100	; 0x64
 800231c:	d81f      	bhi.n	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	6833      	ldr	r3, [r6, #0]
 8002320:	039a      	lsls	r2, r3, #14
 8002322:	d5f7      	bpl.n	8002314 <HAL_RCC_OscConfig+0x224>
 8002324:	e71d      	b.n	8002162 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002328:	6920      	ldr	r0, [r4, #16]
 800232a:	680a      	ldr	r2, [r1, #0]
 800232c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002330:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002334:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	071a      	lsls	r2, r3, #28
 8002338:	f57f af41 	bpl.w	80021be <HAL_RCC_OscConfig+0xce>
 800233c:	e791      	b.n	8002262 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	6833      	ldr	r3, [r6, #0]
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002346:	f7ff fd23 	bl	8001d90 <HAL_GetTick>
 800234a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	6833      	ldr	r3, [r6, #0]
 800234e:	05da      	lsls	r2, r3, #23
 8002350:	f53f af42 	bmi.w	80021d8 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7ff fd1c 	bl	8001d90 <HAL_GetTick>
 8002358:	1bc0      	subs	r0, r0, r7
 800235a:	2802      	cmp	r0, #2
 800235c:	d9f6      	bls.n	800234c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800235e:	2003      	movs	r0, #3
}
 8002360:	b002      	add	sp, #8
 8002362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_RCC_OscConfig+0x290>)
 8002368:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002370:	f7ff fd0e 	bl	8001d90 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4f02      	ldr	r7, [pc, #8]	; (8002380 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002376:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x2a6>
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	42470000 	.word	0x42470000
 8002388:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7ff fd00 	bl	8001d90 <HAL_GetTick>
 8002390:	1b80      	subs	r0, r0, r6
 8002392:	4540      	cmp	r0, r8
 8002394:	d8e3      	bhi.n	800235e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002398:	079b      	lsls	r3, r3, #30
 800239a:	d5f7      	bpl.n	800238c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 800239c:	2d00      	cmp	r5, #0
 800239e:	f43f af40 	beq.w	8002222 <HAL_RCC_OscConfig+0x132>
 80023a2:	e044      	b.n	800242e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4e43      	ldr	r6, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80023a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023aa:	f7ff fcf1 	bl	8001d90 <HAL_GetTick>
 80023ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b0:	e004      	b.n	80023bc <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fced 	bl	8001d90 <HAL_GetTick>
 80023b6:	1b40      	subs	r0, r0, r5
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d8d0      	bhi.n	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023bc:	6833      	ldr	r3, [r6, #0]
 80023be:	0799      	lsls	r1, r3, #30
 80023c0:	d4f7      	bmi.n	80023b2 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	e6f9      	b.n	80021ba <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c6:	2801      	cmp	r0, #1
 80023c8:	f43f af48 	beq.w	800225c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80023cc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ce:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d4:	4291      	cmp	r1, r2
 80023d6:	f47f af64 	bne.w	80022a2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023dc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	4291      	cmp	r1, r2
 80023e2:	f47f af5e 	bne.w	80022a2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023e8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80023ec:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80023f2:	f47f af56 	bne.w	80022a2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80023fe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002400:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002404:	f47f af4d 	bne.w	80022a2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800240a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002412:	bf14      	ite	ne
 8002414:	2001      	movne	r0, #1
 8002416:	2000      	moveq	r0, #0
 8002418:	e720      	b.n	800225c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x3c4>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800242a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800242c:	e76d      	b.n	800230a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x3c4>)
 8002430:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	e6f3      	b.n	8002222 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
}
 800243c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x3c4>)
 8002440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002442:	f042 0204 	orr.w	r2, r2, #4
 8002446:	671a      	str	r2, [r3, #112]	; 0x70
 8002448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002450:	e78e      	b.n	8002370 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002452:	f7ff fc9d 	bl	8001d90 <HAL_GetTick>
 8002456:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	e005      	b.n	8002466 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fc99 	bl	8001d90 <HAL_GetTick>
 800245e:	1b80      	subs	r0, r0, r6
 8002460:	2802      	cmp	r0, #2
 8002462:	f63f af7c 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	682b      	ldr	r3, [r5, #0]
 8002468:	0199      	lsls	r1, r3, #6
 800246a:	d4f6      	bmi.n	800245a <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800246c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002472:	430b      	orrs	r3, r1
 8002474:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002478:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800247c:	0852      	lsrs	r2, r2, #1
 800247e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002482:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002484:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800248a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800248e:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002490:	f7ff fc7e 	bl	8001d90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4d07      	ldr	r5, [pc, #28]	; (80024b4 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002496:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	e005      	b.n	80024a6 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fc79 	bl	8001d90 <HAL_GetTick>
 800249e:	1b00      	subs	r0, r0, r4
 80024a0:	2802      	cmp	r0, #2
 80024a2:	f63f af5c 	bhi.w	800235e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	019a      	lsls	r2, r3, #6
 80024aa:	d5f6      	bpl.n	800249a <HAL_RCC_OscConfig+0x3aa>
 80024ac:	e6d5      	b.n	800225a <HAL_RCC_OscConfig+0x16a>
 80024ae:	bf00      	nop
 80024b0:	42470000 	.word	0x42470000
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80024ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024bc:	688b      	ldr	r3, [r1, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d01b      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x46>
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d117      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024cc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d8:	d113      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <HAL_RCC_GetSysClockFreq+0x60>)
 80024dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024e0:	fba1 0100 	umull	r0, r1, r1, r0
 80024e4:	f7fe fc10 	bl	8000d08 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_GetSysClockFreq+0x5c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024f0:	3301      	adds	r3, #1
 80024f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80024f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80024fc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002500:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <HAL_RCC_GetSysClockFreq+0x64>)
 8002504:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002508:	2300      	movs	r3, #0
 800250a:	fba1 0100 	umull	r0, r1, r1, r0
 800250e:	f7fe fbfb 	bl	8000d08 <__aeabi_uldivmod>
 8002512:	e7e9      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x30>
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002520:	2800      	cmp	r0, #0
 8002522:	f000 8087 	beq.w	8002634 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002526:	4a48      	ldr	r2, [pc, #288]	; (8002648 <HAL_RCC_ClockConfig+0x128>)
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	428b      	cmp	r3, r1
{
 8002530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002534:	460d      	mov	r5, r1
 8002536:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	d209      	bcs.n	800254e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	b2cb      	uxtb	r3, r1
 800253c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	428b      	cmp	r3, r1
 8002546:	d002      	beq.n	800254e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	0798      	lsls	r0, r3, #30
 8002552:	d514      	bpl.n	800257e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	0759      	lsls	r1, r3, #29
 8002556:	d504      	bpl.n	8002562 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	493c      	ldr	r1, [pc, #240]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 800255a:	688a      	ldr	r2, [r1, #8]
 800255c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002560:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	071a      	lsls	r2, r3, #28
 8002564:	d504      	bpl.n	8002570 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002566:	4939      	ldr	r1, [pc, #228]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 8002568:	688a      	ldr	r2, [r1, #8]
 800256a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800256e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4936      	ldr	r1, [pc, #216]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 8002572:	68a0      	ldr	r0, [r4, #8]
 8002574:	688a      	ldr	r2, [r1, #8]
 8002576:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800257a:	4302      	orrs	r2, r0
 800257c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	07df      	lsls	r7, r3, #31
 8002580:	d521      	bpl.n	80025c6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	6862      	ldr	r2, [r4, #4]
 8002584:	2a01      	cmp	r2, #1
 8002586:	d057      	beq.n	8002638 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002588:	1e93      	subs	r3, r2, #2
 800258a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 800258e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002590:	d94d      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	0799      	lsls	r1, r3, #30
 8002594:	d5d8      	bpl.n	8002548 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4e2d      	ldr	r6, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 8002598:	68b3      	ldr	r3, [r6, #8]
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	4313      	orrs	r3, r2
 80025a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80025a2:	f7ff fbf5 	bl	8001d90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80025aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	e004      	b.n	80025b8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7ff fbef 	bl	8001d90 <HAL_GetTick>
 80025b2:	1bc0      	subs	r0, r0, r7
 80025b4:	4540      	cmp	r0, r8
 80025b6:	d844      	bhi.n	8002642 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b8:	68b3      	ldr	r3, [r6, #8]
 80025ba:	6862      	ldr	r2, [r4, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025c4:	d1f3      	bne.n	80025ae <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x128>)
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	42ab      	cmp	r3, r5
 80025d0:	d906      	bls.n	80025e0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	b2eb      	uxtb	r3, r5
 80025d4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	42ab      	cmp	r3, r5
 80025de:	d1b3      	bne.n	8002548 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	075a      	lsls	r2, r3, #29
 80025e4:	d506      	bpl.n	80025f4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e6:	4919      	ldr	r1, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 80025e8:	68e0      	ldr	r0, [r4, #12]
 80025ea:	688a      	ldr	r2, [r1, #8]
 80025ec:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80025f0:	4302      	orrs	r2, r0
 80025f2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	071b      	lsls	r3, r3, #28
 80025f6:	d507      	bpl.n	8002608 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 80025fa:	6921      	ldr	r1, [r4, #16]
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002602:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002606:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002608:	f7ff ff56 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 800260e:	4c10      	ldr	r4, [pc, #64]	; (8002650 <HAL_RCC_ClockConfig+0x130>)
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	4910      	ldr	r1, [pc, #64]	; (8002654 <HAL_RCC_ClockConfig+0x134>)
 8002614:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002618:	4603      	mov	r3, r0
 800261a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800261c:	480e      	ldr	r0, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800261e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002620:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002624:	f7ff fb6a 	bl	8001cfc <HAL_InitTick>
  return HAL_OK;
 8002628:	2000      	movs	r0, #0
}
 800262a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	0198      	lsls	r0, r3, #6
 8002630:	d4b1      	bmi.n	8002596 <HAL_RCC_ClockConfig+0x76>
 8002632:	e789      	b.n	8002548 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
}
 8002636:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_ClockConfig+0x12c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	039e      	lsls	r6, r3, #14
 800263e:	d4aa      	bmi.n	8002596 <HAL_RCC_ClockConfig+0x76>
 8002640:	e782      	b.n	8002548 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
 8002644:	e781      	b.n	800254a <HAL_RCC_ClockConfig+0x2a>
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	080067b4 	.word	0x080067b4
 8002654:	20000000 	.word	0x20000000
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800265c:	4b01      	ldr	r3, [pc, #4]	; (8002664 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800266a:	4905      	ldr	r1, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002670:	6808      	ldr	r0, [r1, #0]
 8002672:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002676:	5cd3      	ldrb	r3, [r2, r3]
}
 8002678:	40d8      	lsrs	r0, r3
 800267a:	4770      	bx	lr
 800267c:	40023800 	.word	0x40023800
 8002680:	20000000 	.word	0x20000000
 8002684:	080067c4 	.word	0x080067c4

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800268a:	4905      	ldr	r1, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002690:	6808      	ldr	r0, [r1, #0]
 8002692:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002696:	5cd3      	ldrb	r3, [r2, r3]
}
 8002698:	40d8      	lsrs	r0, r3
 800269a:	4770      	bx	lr
 800269c:	40023800 	.word	0x40023800
 80026a0:	20000000 	.word	0x20000000
 80026a4:	080067c4 	.word	0x080067c4

080026a8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	2800      	cmp	r0, #0
 80026aa:	f000 808f 	beq.w	80027cc <HAL_UART_Init+0x124>
{
 80026ae:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026b4:	4604      	mov	r4, r0
 80026b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8081 	beq.w	80027c2 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	2224      	movs	r2, #36	; 0x24
 80026c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80026da:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026de:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e0:	4302      	orrs	r2, r0
 80026e2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026e4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e6:	4302      	orrs	r2, r0
 80026e8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80026ea:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80026ee:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026fc:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002702:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002704:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002706:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002708:	d035      	beq.n	8002776 <HAL_UART_Init+0xce>
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_UART_Init+0x12c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d032      	beq.n	8002776 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff ffaa 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002714:	69e3      	ldr	r3, [r4, #28]
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271a:	d032      	beq.n	8002782 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	2119      	movs	r1, #25
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	fba0 0101 	umull	r0, r1, r0, r1
 8002726:	0f9b      	lsrs	r3, r3, #30
 8002728:	f7fe faee 	bl	8000d08 <__aeabi_uldivmod>
 800272c:	492a      	ldr	r1, [pc, #168]	; (80027d8 <HAL_UART_Init+0x130>)
 800272e:	fba1 3200 	umull	r3, r2, r1, r0
 8002732:	0952      	lsrs	r2, r2, #5
 8002734:	2564      	movs	r5, #100	; 0x64
 8002736:	fb05 0012 	mls	r0, r5, r2, r0
 800273a:	0100      	lsls	r0, r0, #4
 800273c:	3032      	adds	r0, #50	; 0x32
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	fba1 1000 	umull	r1, r0, r1, r0
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800274a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002752:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800275a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800275c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002760:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002766:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800276a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800276e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002772:	4628      	mov	r0, r5
}
 8002774:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002776:	f7ff ff87 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	69e3      	ldr	r3, [r4, #28]
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	d1cc      	bne.n	800271c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002782:	6862      	ldr	r2, [r4, #4]
 8002784:	2119      	movs	r1, #25
 8002786:	1892      	adds	r2, r2, r2
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	415b      	adcs	r3, r3
 800278e:	fba0 0101 	umull	r0, r1, r0, r1
 8002792:	f7fe fab9 	bl	8000d08 <__aeabi_uldivmod>
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_UART_Init+0x130>)
 8002798:	fba3 2100 	umull	r2, r1, r3, r0
 800279c:	094d      	lsrs	r5, r1, #5
 800279e:	2264      	movs	r2, #100	; 0x64
 80027a0:	fb02 0215 	mls	r2, r2, r5, r0
 80027a4:	00d2      	lsls	r2, r2, #3
 80027a6:	3232      	adds	r2, #50	; 0x32
 80027a8:	fba3 3202 	umull	r3, r2, r3, r2
 80027ac:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80027b0:	0912      	lsrs	r2, r2, #4
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80027b8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80027bc:	440a      	add	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e7c4      	b.n	800274c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80027c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80027c6:	f7ff f933 	bl	8001a30 <HAL_UART_MspInit>
 80027ca:	e779      	b.n	80026c0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	4770      	bx	lr
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40011400 	.word	0x40011400
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <HAL_UART_Transmit>:
{
 80027dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027e0:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80027e2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80027e6:	2820      	cmp	r0, #32
 80027e8:	d177      	bne.n	80028da <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 80027ea:	4689      	mov	r9, r1
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d040      	beq.n	8002872 <HAL_UART_Transmit+0x96>
 80027f0:	4614      	mov	r4, r2
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d03d      	beq.n	8002872 <HAL_UART_Transmit+0x96>
 80027f6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80027f8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d06c      	beq.n	80028da <HAL_UART_Transmit+0xfe>
 8002800:	2301      	movs	r3, #1
 8002802:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002810:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002814:	f7ff fabc 	bl	8001d90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002818:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 800281a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002820:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8002822:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	d05c      	beq.n	80028e0 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8002826:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002828:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800282a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800282c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002830:	2b00      	cmp	r3, #0
 8002832:	d07e      	beq.n	8002932 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002834:	682c      	ldr	r4, [r5, #0]
 8002836:	1c72      	adds	r2, r6, #1
 8002838:	d11e      	bne.n	8002878 <HAL_UART_Transmit+0x9c>
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	0613      	lsls	r3, r2, #24
 800283e:	d5fc      	bpl.n	800283a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8002840:	f1b9 0f00 	cmp.w	r9, #0
 8002844:	d044      	beq.n	80028d0 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	f819 3b01 	ldrb.w	r3, [r9], #1
 800284a:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 800284c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002854:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ec      	bne.n	8002836 <HAL_UART_Transmit+0x5a>
 800285c:	1c71      	adds	r1, r6, #1
 800285e:	d145      	bne.n	80028ec <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	065a      	lsls	r2, r3, #25
 8002864:	d5fc      	bpl.n	8002860 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002866:	2320      	movs	r3, #32
 8002868:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 800286c:	2000      	movs	r0, #0
}
 800286e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002872:	2001      	movs	r0, #1
}
 8002874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	0618      	lsls	r0, r3, #24
 800287c:	d4e0      	bmi.n	8002840 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800287e:	b12e      	cbz	r6, 800288c <HAL_UART_Transmit+0xb0>
 8002880:	f7ff fa86 	bl	8001d90 <HAL_GetTick>
 8002884:	1bc0      	subs	r0, r0, r7
 8002886:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002888:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800288a:	d2d4      	bcs.n	8002836 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	f104 030c 	add.w	r3, r4, #12
 8002890:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	f104 010c 	add.w	r1, r4, #12
 800289c:	e841 3200 	strex	r2, r3, [r1]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d1f3      	bne.n	800288c <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	f104 0314 	add.w	r3, r4, #20
 80028a8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	f104 0114 	add.w	r1, r4, #20
 80028b4:	e841 3200 	strex	r2, r3, [r1]
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1f3      	bne.n	80028a4 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 80028bc:	2320      	movs	r3, #32
 80028be:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80028c2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80028c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 80028ca:	2003      	movs	r0, #3
}
 80028cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80028d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d8:	e7b7      	b.n	800284a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80028da:	2002      	movs	r0, #2
}
 80028dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	692b      	ldr	r3, [r5, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d19f      	bne.n	8002826 <HAL_UART_Transmit+0x4a>
 80028e6:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80028e8:	4699      	mov	r9, r3
 80028ea:	e79c      	b.n	8002826 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	065b      	lsls	r3, r3, #25
 80028f0:	d4b9      	bmi.n	8002866 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028f2:	b12e      	cbz	r6, 8002900 <HAL_UART_Transmit+0x124>
 80028f4:	f7ff fa4c 	bl	8001d90 <HAL_GetTick>
 80028f8:	1bc0      	subs	r0, r0, r7
 80028fa:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028fc:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028fe:	d2ad      	bcs.n	800285c <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	f104 030c 	add.w	r3, r4, #12
 8002904:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	f104 010c 	add.w	r1, r4, #12
 8002910:	e841 3200 	strex	r2, r3, [r1]
 8002914:	2a00      	cmp	r2, #0
 8002916:	d1f3      	bne.n	8002900 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002918:	f104 0314 	add.w	r3, r4, #20
 800291c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	f104 0114 	add.w	r1, r4, #20
 8002928:	e841 3200 	strex	r2, r3, [r1]
 800292c:	2a00      	cmp	r2, #0
 800292e:	d1f3      	bne.n	8002918 <HAL_UART_Transmit+0x13c>
 8002930:	e7c4      	b.n	80028bc <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002932:	682c      	ldr	r4, [r5, #0]
 8002934:	e792      	b.n	800285c <HAL_UART_Transmit+0x80>
 8002936:	bf00      	nop

08002938 <__errno>:
 8002938:	4b01      	ldr	r3, [pc, #4]	; (8002940 <__errno+0x8>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	2000000c 	.word	0x2000000c

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	4d0d      	ldr	r5, [pc, #52]	; (800297c <__libc_init_array+0x38>)
 8002948:	4c0d      	ldr	r4, [pc, #52]	; (8002980 <__libc_init_array+0x3c>)
 800294a:	1b64      	subs	r4, r4, r5
 800294c:	10a4      	asrs	r4, r4, #2
 800294e:	2600      	movs	r6, #0
 8002950:	42a6      	cmp	r6, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	4d0b      	ldr	r5, [pc, #44]	; (8002984 <__libc_init_array+0x40>)
 8002956:	4c0c      	ldr	r4, [pc, #48]	; (8002988 <__libc_init_array+0x44>)
 8002958:	f003 f854 	bl	8005a04 <_init>
 800295c:	1b64      	subs	r4, r4, r5
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	2600      	movs	r6, #0
 8002962:	42a6      	cmp	r6, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	f855 3b04 	ldr.w	r3, [r5], #4
 800296c:	4798      	blx	r3
 800296e:	3601      	adds	r6, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	f855 3b04 	ldr.w	r3, [r5], #4
 8002976:	4798      	blx	r3
 8002978:	3601      	adds	r6, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	08006bac 	.word	0x08006bac
 8002980:	08006bac 	.word	0x08006bac
 8002984:	08006bac 	.word	0x08006bac
 8002988:	08006bb0 	.word	0x08006bb0

0800298c <memset>:
 800298c:	4402      	add	r2, r0
 800298e:	4603      	mov	r3, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <__cvt>:
 800299c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029a0:	ec55 4b10 	vmov	r4, r5, d0
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	460e      	mov	r6, r1
 80029a8:	4619      	mov	r1, r3
 80029aa:	462b      	mov	r3, r5
 80029ac:	bfbb      	ittet	lt
 80029ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80029b2:	461d      	movlt	r5, r3
 80029b4:	2300      	movge	r3, #0
 80029b6:	232d      	movlt	r3, #45	; 0x2d
 80029b8:	700b      	strb	r3, [r1, #0]
 80029ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80029c0:	4691      	mov	r9, r2
 80029c2:	f023 0820 	bic.w	r8, r3, #32
 80029c6:	bfbc      	itt	lt
 80029c8:	4622      	movlt	r2, r4
 80029ca:	4614      	movlt	r4, r2
 80029cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80029d0:	d005      	beq.n	80029de <__cvt+0x42>
 80029d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80029d6:	d100      	bne.n	80029da <__cvt+0x3e>
 80029d8:	3601      	adds	r6, #1
 80029da:	2102      	movs	r1, #2
 80029dc:	e000      	b.n	80029e0 <__cvt+0x44>
 80029de:	2103      	movs	r1, #3
 80029e0:	ab03      	add	r3, sp, #12
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	ab02      	add	r3, sp, #8
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	ec45 4b10 	vmov	d0, r4, r5
 80029ec:	4653      	mov	r3, sl
 80029ee:	4632      	mov	r2, r6
 80029f0:	f000 fe1a 	bl	8003628 <_dtoa_r>
 80029f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80029f8:	4607      	mov	r7, r0
 80029fa:	d102      	bne.n	8002a02 <__cvt+0x66>
 80029fc:	f019 0f01 	tst.w	r9, #1
 8002a00:	d022      	beq.n	8002a48 <__cvt+0xac>
 8002a02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a06:	eb07 0906 	add.w	r9, r7, r6
 8002a0a:	d110      	bne.n	8002a2e <__cvt+0x92>
 8002a0c:	783b      	ldrb	r3, [r7, #0]
 8002a0e:	2b30      	cmp	r3, #48	; 0x30
 8002a10:	d10a      	bne.n	8002a28 <__cvt+0x8c>
 8002a12:	2200      	movs	r2, #0
 8002a14:	2300      	movs	r3, #0
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f7fe f865 	bl	8000ae8 <__aeabi_dcmpeq>
 8002a1e:	b918      	cbnz	r0, 8002a28 <__cvt+0x8c>
 8002a20:	f1c6 0601 	rsb	r6, r6, #1
 8002a24:	f8ca 6000 	str.w	r6, [sl]
 8002a28:	f8da 3000 	ldr.w	r3, [sl]
 8002a2c:	4499      	add	r9, r3
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2300      	movs	r3, #0
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fe f857 	bl	8000ae8 <__aeabi_dcmpeq>
 8002a3a:	b108      	cbz	r0, 8002a40 <__cvt+0xa4>
 8002a3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002a40:	2230      	movs	r2, #48	; 0x30
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	454b      	cmp	r3, r9
 8002a46:	d307      	bcc.n	8002a58 <__cvt+0xbc>
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a4c:	1bdb      	subs	r3, r3, r7
 8002a4e:	4638      	mov	r0, r7
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	b004      	add	sp, #16
 8002a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	9103      	str	r1, [sp, #12]
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e7f0      	b.n	8002a42 <__cvt+0xa6>

08002a60 <__exponent>:
 8002a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a62:	4603      	mov	r3, r0
 8002a64:	2900      	cmp	r1, #0
 8002a66:	bfb8      	it	lt
 8002a68:	4249      	neglt	r1, r1
 8002a6a:	f803 2b02 	strb.w	r2, [r3], #2
 8002a6e:	bfb4      	ite	lt
 8002a70:	222d      	movlt	r2, #45	; 0x2d
 8002a72:	222b      	movge	r2, #43	; 0x2b
 8002a74:	2909      	cmp	r1, #9
 8002a76:	7042      	strb	r2, [r0, #1]
 8002a78:	dd2a      	ble.n	8002ad0 <__exponent+0x70>
 8002a7a:	f10d 0407 	add.w	r4, sp, #7
 8002a7e:	46a4      	mov	ip, r4
 8002a80:	270a      	movs	r7, #10
 8002a82:	46a6      	mov	lr, r4
 8002a84:	460a      	mov	r2, r1
 8002a86:	fb91 f6f7 	sdiv	r6, r1, r7
 8002a8a:	fb07 1516 	mls	r5, r7, r6, r1
 8002a8e:	3530      	adds	r5, #48	; 0x30
 8002a90:	2a63      	cmp	r2, #99	; 0x63
 8002a92:	f104 34ff 	add.w	r4, r4, #4294967295
 8002a96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	dcf1      	bgt.n	8002a82 <__exponent+0x22>
 8002a9e:	3130      	adds	r1, #48	; 0x30
 8002aa0:	f1ae 0502 	sub.w	r5, lr, #2
 8002aa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002aa8:	1c44      	adds	r4, r0, #1
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4561      	cmp	r1, ip
 8002aae:	d30a      	bcc.n	8002ac6 <__exponent+0x66>
 8002ab0:	f10d 0209 	add.w	r2, sp, #9
 8002ab4:	eba2 020e 	sub.w	r2, r2, lr
 8002ab8:	4565      	cmp	r5, ip
 8002aba:	bf88      	it	hi
 8002abc:	2200      	movhi	r2, #0
 8002abe:	4413      	add	r3, r2
 8002ac0:	1a18      	subs	r0, r3, r0
 8002ac2:	b003      	add	sp, #12
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002aca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002ace:	e7ed      	b.n	8002aac <__exponent+0x4c>
 8002ad0:	2330      	movs	r3, #48	; 0x30
 8002ad2:	3130      	adds	r1, #48	; 0x30
 8002ad4:	7083      	strb	r3, [r0, #2]
 8002ad6:	70c1      	strb	r1, [r0, #3]
 8002ad8:	1d03      	adds	r3, r0, #4
 8002ada:	e7f1      	b.n	8002ac0 <__exponent+0x60>

08002adc <_printf_float>:
 8002adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae0:	ed2d 8b02 	vpush	{d8}
 8002ae4:	b08d      	sub	sp, #52	; 0x34
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002aec:	4616      	mov	r6, r2
 8002aee:	461f      	mov	r7, r3
 8002af0:	4605      	mov	r5, r0
 8002af2:	f001 fd3f 	bl	8004574 <_localeconv_r>
 8002af6:	f8d0 a000 	ldr.w	sl, [r0]
 8002afa:	4650      	mov	r0, sl
 8002afc:	f7fd fb78 	bl	80001f0 <strlen>
 8002b00:	2300      	movs	r3, #0
 8002b02:	930a      	str	r3, [sp, #40]	; 0x28
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	f8d8 3000 	ldr.w	r3, [r8]
 8002b0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002b10:	3307      	adds	r3, #7
 8002b12:	f023 0307 	bic.w	r3, r3, #7
 8002b16:	f103 0208 	add.w	r2, r3, #8
 8002b1a:	f8c8 2000 	str.w	r2, [r8]
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002b2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b2e:	9307      	str	r3, [sp, #28]
 8002b30:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b34:	ee08 0a10 	vmov	s16, r0
 8002b38:	4b9f      	ldr	r3, [pc, #636]	; (8002db8 <_printf_float+0x2dc>)
 8002b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b42:	f7fe f803 	bl	8000b4c <__aeabi_dcmpun>
 8002b46:	bb88      	cbnz	r0, 8002bac <_printf_float+0xd0>
 8002b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b4c:	4b9a      	ldr	r3, [pc, #616]	; (8002db8 <_printf_float+0x2dc>)
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	f7fd ffdd 	bl	8000b10 <__aeabi_dcmple>
 8002b56:	bb48      	cbnz	r0, 8002bac <_printf_float+0xd0>
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	4649      	mov	r1, r9
 8002b60:	f7fd ffcc 	bl	8000afc <__aeabi_dcmplt>
 8002b64:	b110      	cbz	r0, 8002b6c <_printf_float+0x90>
 8002b66:	232d      	movs	r3, #45	; 0x2d
 8002b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b6c:	4b93      	ldr	r3, [pc, #588]	; (8002dbc <_printf_float+0x2e0>)
 8002b6e:	4894      	ldr	r0, [pc, #592]	; (8002dc0 <_printf_float+0x2e4>)
 8002b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002b74:	bf94      	ite	ls
 8002b76:	4698      	movls	r8, r3
 8002b78:	4680      	movhi	r8, r0
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	6123      	str	r3, [r4, #16]
 8002b7e:	9b05      	ldr	r3, [sp, #20]
 8002b80:	f023 0204 	bic.w	r2, r3, #4
 8002b84:	6022      	str	r2, [r4, #0]
 8002b86:	f04f 0900 	mov.w	r9, #0
 8002b8a:	9700      	str	r7, [sp, #0]
 8002b8c:	4633      	mov	r3, r6
 8002b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002b90:	4621      	mov	r1, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 f9d8 	bl	8002f48 <_printf_common>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	f040 8090 	bne.w	8002cbe <_printf_float+0x1e2>
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	b00d      	add	sp, #52	; 0x34
 8002ba4:	ecbd 8b02 	vpop	{d8}
 8002ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	f7fd ffca 	bl	8000b4c <__aeabi_dcmpun>
 8002bb8:	b140      	cbz	r0, 8002bcc <_printf_float+0xf0>
 8002bba:	464b      	mov	r3, r9
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bfbc      	itt	lt
 8002bc0:	232d      	movlt	r3, #45	; 0x2d
 8002bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002bc6:	487f      	ldr	r0, [pc, #508]	; (8002dc4 <_printf_float+0x2e8>)
 8002bc8:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <_printf_float+0x2ec>)
 8002bca:	e7d1      	b.n	8002b70 <_printf_float+0x94>
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002bd2:	9206      	str	r2, [sp, #24]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	d13f      	bne.n	8002c58 <_printf_float+0x17c>
 8002bd8:	2306      	movs	r3, #6
 8002bda:	6063      	str	r3, [r4, #4]
 8002bdc:	9b05      	ldr	r3, [sp, #20]
 8002bde:	6861      	ldr	r1, [r4, #4]
 8002be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002be4:	2300      	movs	r3, #0
 8002be6:	9303      	str	r3, [sp, #12]
 8002be8:	ab0a      	add	r3, sp, #40	; 0x28
 8002bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002bee:	ab09      	add	r3, sp, #36	; 0x24
 8002bf0:	ec49 8b10 	vmov	d0, r8, r9
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	6022      	str	r2, [r4, #0]
 8002bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7ff fecd 	bl	800299c <__cvt>
 8002c02:	9b06      	ldr	r3, [sp, #24]
 8002c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c06:	2b47      	cmp	r3, #71	; 0x47
 8002c08:	4680      	mov	r8, r0
 8002c0a:	d108      	bne.n	8002c1e <_printf_float+0x142>
 8002c0c:	1cc8      	adds	r0, r1, #3
 8002c0e:	db02      	blt.n	8002c16 <_printf_float+0x13a>
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	4299      	cmp	r1, r3
 8002c14:	dd41      	ble.n	8002c9a <_printf_float+0x1be>
 8002c16:	f1ab 0b02 	sub.w	fp, fp, #2
 8002c1a:	fa5f fb8b 	uxtb.w	fp, fp
 8002c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c22:	d820      	bhi.n	8002c66 <_printf_float+0x18a>
 8002c24:	3901      	subs	r1, #1
 8002c26:	465a      	mov	r2, fp
 8002c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8002c2e:	f7ff ff17 	bl	8002a60 <__exponent>
 8002c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c34:	1813      	adds	r3, r2, r0
 8002c36:	2a01      	cmp	r2, #1
 8002c38:	4681      	mov	r9, r0
 8002c3a:	6123      	str	r3, [r4, #16]
 8002c3c:	dc02      	bgt.n	8002c44 <_printf_float+0x168>
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	07d2      	lsls	r2, r2, #31
 8002c42:	d501      	bpl.n	8002c48 <_printf_float+0x16c>
 8002c44:	3301      	adds	r3, #1
 8002c46:	6123      	str	r3, [r4, #16]
 8002c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d09c      	beq.n	8002b8a <_printf_float+0xae>
 8002c50:	232d      	movs	r3, #45	; 0x2d
 8002c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c56:	e798      	b.n	8002b8a <_printf_float+0xae>
 8002c58:	9a06      	ldr	r2, [sp, #24]
 8002c5a:	2a47      	cmp	r2, #71	; 0x47
 8002c5c:	d1be      	bne.n	8002bdc <_printf_float+0x100>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1bc      	bne.n	8002bdc <_printf_float+0x100>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e7b9      	b.n	8002bda <_printf_float+0xfe>
 8002c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002c6a:	d118      	bne.n	8002c9e <_printf_float+0x1c2>
 8002c6c:	2900      	cmp	r1, #0
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	dd0b      	ble.n	8002c8a <_printf_float+0x1ae>
 8002c72:	6121      	str	r1, [r4, #16]
 8002c74:	b913      	cbnz	r3, 8002c7c <_printf_float+0x1a0>
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	07d0      	lsls	r0, r2, #31
 8002c7a:	d502      	bpl.n	8002c82 <_printf_float+0x1a6>
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	440b      	add	r3, r1
 8002c80:	6123      	str	r3, [r4, #16]
 8002c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8002c84:	f04f 0900 	mov.w	r9, #0
 8002c88:	e7de      	b.n	8002c48 <_printf_float+0x16c>
 8002c8a:	b913      	cbnz	r3, 8002c92 <_printf_float+0x1b6>
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	07d2      	lsls	r2, r2, #31
 8002c90:	d501      	bpl.n	8002c96 <_printf_float+0x1ba>
 8002c92:	3302      	adds	r3, #2
 8002c94:	e7f4      	b.n	8002c80 <_printf_float+0x1a4>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e7f2      	b.n	8002c80 <_printf_float+0x1a4>
 8002c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	db05      	blt.n	8002cb0 <_printf_float+0x1d4>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	6121      	str	r1, [r4, #16]
 8002ca8:	07d8      	lsls	r0, r3, #31
 8002caa:	d5ea      	bpl.n	8002c82 <_printf_float+0x1a6>
 8002cac:	1c4b      	adds	r3, r1, #1
 8002cae:	e7e7      	b.n	8002c80 <_printf_float+0x1a4>
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	bfd4      	ite	le
 8002cb4:	f1c1 0202 	rsble	r2, r1, #2
 8002cb8:	2201      	movgt	r2, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	e7e0      	b.n	8002c80 <_printf_float+0x1a4>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	055a      	lsls	r2, r3, #21
 8002cc2:	d407      	bmi.n	8002cd4 <_printf_float+0x1f8>
 8002cc4:	6923      	ldr	r3, [r4, #16]
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	4631      	mov	r1, r6
 8002cca:	4628      	mov	r0, r5
 8002ccc:	47b8      	blx	r7
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d12c      	bne.n	8002d2c <_printf_float+0x250>
 8002cd2:	e764      	b.n	8002b9e <_printf_float+0xc2>
 8002cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002cd8:	f240 80e0 	bls.w	8002e9c <_printf_float+0x3c0>
 8002cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f7fd ff00 	bl	8000ae8 <__aeabi_dcmpeq>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d034      	beq.n	8002d56 <_printf_float+0x27a>
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <_printf_float+0x2f0>)
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4631      	mov	r1, r6
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	47b8      	blx	r7
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	f43f af51 	beq.w	8002b9e <_printf_float+0xc2>
 8002cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d00:	429a      	cmp	r2, r3
 8002d02:	db02      	blt.n	8002d0a <_printf_float+0x22e>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	07d8      	lsls	r0, r3, #31
 8002d08:	d510      	bpl.n	8002d2c <_printf_float+0x250>
 8002d0a:	ee18 3a10 	vmov	r3, s16
 8002d0e:	4652      	mov	r2, sl
 8002d10:	4631      	mov	r1, r6
 8002d12:	4628      	mov	r0, r5
 8002d14:	47b8      	blx	r7
 8002d16:	3001      	adds	r0, #1
 8002d18:	f43f af41 	beq.w	8002b9e <_printf_float+0xc2>
 8002d1c:	f04f 0800 	mov.w	r8, #0
 8002d20:	f104 091a 	add.w	r9, r4, #26
 8002d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	4543      	cmp	r3, r8
 8002d2a:	dc09      	bgt.n	8002d40 <_printf_float+0x264>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	079b      	lsls	r3, r3, #30
 8002d30:	f100 8105 	bmi.w	8002f3e <_printf_float+0x462>
 8002d34:	68e0      	ldr	r0, [r4, #12]
 8002d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d38:	4298      	cmp	r0, r3
 8002d3a:	bfb8      	it	lt
 8002d3c:	4618      	movlt	r0, r3
 8002d3e:	e730      	b.n	8002ba2 <_printf_float+0xc6>
 8002d40:	2301      	movs	r3, #1
 8002d42:	464a      	mov	r2, r9
 8002d44:	4631      	mov	r1, r6
 8002d46:	4628      	mov	r0, r5
 8002d48:	47b8      	blx	r7
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	f43f af27 	beq.w	8002b9e <_printf_float+0xc2>
 8002d50:	f108 0801 	add.w	r8, r8, #1
 8002d54:	e7e6      	b.n	8002d24 <_printf_float+0x248>
 8002d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dc39      	bgt.n	8002dd0 <_printf_float+0x2f4>
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <_printf_float+0x2f0>)
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4631      	mov	r1, r6
 8002d62:	4628      	mov	r0, r5
 8002d64:	47b8      	blx	r7
 8002d66:	3001      	adds	r0, #1
 8002d68:	f43f af19 	beq.w	8002b9e <_printf_float+0xc2>
 8002d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d102      	bne.n	8002d7a <_printf_float+0x29e>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	07d9      	lsls	r1, r3, #31
 8002d78:	d5d8      	bpl.n	8002d2c <_printf_float+0x250>
 8002d7a:	ee18 3a10 	vmov	r3, s16
 8002d7e:	4652      	mov	r2, sl
 8002d80:	4631      	mov	r1, r6
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b8      	blx	r7
 8002d86:	3001      	adds	r0, #1
 8002d88:	f43f af09 	beq.w	8002b9e <_printf_float+0xc2>
 8002d8c:	f04f 0900 	mov.w	r9, #0
 8002d90:	f104 0a1a 	add.w	sl, r4, #26
 8002d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d96:	425b      	negs	r3, r3
 8002d98:	454b      	cmp	r3, r9
 8002d9a:	dc01      	bgt.n	8002da0 <_printf_float+0x2c4>
 8002d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9e:	e792      	b.n	8002cc6 <_printf_float+0x1ea>
 8002da0:	2301      	movs	r3, #1
 8002da2:	4652      	mov	r2, sl
 8002da4:	4631      	mov	r1, r6
 8002da6:	4628      	mov	r0, r5
 8002da8:	47b8      	blx	r7
 8002daa:	3001      	adds	r0, #1
 8002dac:	f43f aef7 	beq.w	8002b9e <_printf_float+0xc2>
 8002db0:	f109 0901 	add.w	r9, r9, #1
 8002db4:	e7ee      	b.n	8002d94 <_printf_float+0x2b8>
 8002db6:	bf00      	nop
 8002db8:	7fefffff 	.word	0x7fefffff
 8002dbc:	080067d0 	.word	0x080067d0
 8002dc0:	080067d4 	.word	0x080067d4
 8002dc4:	080067dc 	.word	0x080067dc
 8002dc8:	080067d8 	.word	0x080067d8
 8002dcc:	080067e0 	.word	0x080067e0
 8002dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bfa8      	it	ge
 8002dd8:	461a      	movge	r2, r3
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	4691      	mov	r9, r2
 8002dde:	dc37      	bgt.n	8002e50 <_printf_float+0x374>
 8002de0:	f04f 0b00 	mov.w	fp, #0
 8002de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002de8:	f104 021a 	add.w	r2, r4, #26
 8002dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dee:	9305      	str	r3, [sp, #20]
 8002df0:	eba3 0309 	sub.w	r3, r3, r9
 8002df4:	455b      	cmp	r3, fp
 8002df6:	dc33      	bgt.n	8002e60 <_printf_float+0x384>
 8002df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	db3b      	blt.n	8002e78 <_printf_float+0x39c>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	07da      	lsls	r2, r3, #31
 8002e04:	d438      	bmi.n	8002e78 <_printf_float+0x39c>
 8002e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e08:	9a05      	ldr	r2, [sp, #20]
 8002e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e0c:	1a9a      	subs	r2, r3, r2
 8002e0e:	eba3 0901 	sub.w	r9, r3, r1
 8002e12:	4591      	cmp	r9, r2
 8002e14:	bfa8      	it	ge
 8002e16:	4691      	movge	r9, r2
 8002e18:	f1b9 0f00 	cmp.w	r9, #0
 8002e1c:	dc35      	bgt.n	8002e8a <_printf_float+0x3ae>
 8002e1e:	f04f 0800 	mov.w	r8, #0
 8002e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e26:	f104 0a1a 	add.w	sl, r4, #26
 8002e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	eba3 0309 	sub.w	r3, r3, r9
 8002e34:	4543      	cmp	r3, r8
 8002e36:	f77f af79 	ble.w	8002d2c <_printf_float+0x250>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4652      	mov	r2, sl
 8002e3e:	4631      	mov	r1, r6
 8002e40:	4628      	mov	r0, r5
 8002e42:	47b8      	blx	r7
 8002e44:	3001      	adds	r0, #1
 8002e46:	f43f aeaa 	beq.w	8002b9e <_printf_float+0xc2>
 8002e4a:	f108 0801 	add.w	r8, r8, #1
 8002e4e:	e7ec      	b.n	8002e2a <_printf_float+0x34e>
 8002e50:	4613      	mov	r3, r2
 8002e52:	4631      	mov	r1, r6
 8002e54:	4642      	mov	r2, r8
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b8      	blx	r7
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d1c0      	bne.n	8002de0 <_printf_float+0x304>
 8002e5e:	e69e      	b.n	8002b9e <_printf_float+0xc2>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4631      	mov	r1, r6
 8002e64:	4628      	mov	r0, r5
 8002e66:	9205      	str	r2, [sp, #20]
 8002e68:	47b8      	blx	r7
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	f43f ae97 	beq.w	8002b9e <_printf_float+0xc2>
 8002e70:	9a05      	ldr	r2, [sp, #20]
 8002e72:	f10b 0b01 	add.w	fp, fp, #1
 8002e76:	e7b9      	b.n	8002dec <_printf_float+0x310>
 8002e78:	ee18 3a10 	vmov	r3, s16
 8002e7c:	4652      	mov	r2, sl
 8002e7e:	4631      	mov	r1, r6
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b8      	blx	r7
 8002e84:	3001      	adds	r0, #1
 8002e86:	d1be      	bne.n	8002e06 <_printf_float+0x32a>
 8002e88:	e689      	b.n	8002b9e <_printf_float+0xc2>
 8002e8a:	9a05      	ldr	r2, [sp, #20]
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	4442      	add	r2, r8
 8002e90:	4631      	mov	r1, r6
 8002e92:	4628      	mov	r0, r5
 8002e94:	47b8      	blx	r7
 8002e96:	3001      	adds	r0, #1
 8002e98:	d1c1      	bne.n	8002e1e <_printf_float+0x342>
 8002e9a:	e680      	b.n	8002b9e <_printf_float+0xc2>
 8002e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e9e:	2a01      	cmp	r2, #1
 8002ea0:	dc01      	bgt.n	8002ea6 <_printf_float+0x3ca>
 8002ea2:	07db      	lsls	r3, r3, #31
 8002ea4:	d538      	bpl.n	8002f18 <_printf_float+0x43c>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4628      	mov	r0, r5
 8002eae:	47b8      	blx	r7
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	f43f ae74 	beq.w	8002b9e <_printf_float+0xc2>
 8002eb6:	ee18 3a10 	vmov	r3, s16
 8002eba:	4652      	mov	r2, sl
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	47b8      	blx	r7
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	f43f ae6b 	beq.w	8002b9e <_printf_float+0xc2>
 8002ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f7fd fe0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8002ed4:	b9d8      	cbnz	r0, 8002f0e <_printf_float+0x432>
 8002ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ed8:	f108 0201 	add.w	r2, r8, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4631      	mov	r1, r6
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	47b8      	blx	r7
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d10e      	bne.n	8002f06 <_printf_float+0x42a>
 8002ee8:	e659      	b.n	8002b9e <_printf_float+0xc2>
 8002eea:	2301      	movs	r3, #1
 8002eec:	4652      	mov	r2, sl
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	47b8      	blx	r7
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	f43f ae52 	beq.w	8002b9e <_printf_float+0xc2>
 8002efa:	f108 0801 	add.w	r8, r8, #1
 8002efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4543      	cmp	r3, r8
 8002f04:	dcf1      	bgt.n	8002eea <_printf_float+0x40e>
 8002f06:	464b      	mov	r3, r9
 8002f08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f0c:	e6dc      	b.n	8002cc8 <_printf_float+0x1ec>
 8002f0e:	f04f 0800 	mov.w	r8, #0
 8002f12:	f104 0a1a 	add.w	sl, r4, #26
 8002f16:	e7f2      	b.n	8002efe <_printf_float+0x422>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	e7df      	b.n	8002ede <_printf_float+0x402>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	464a      	mov	r2, r9
 8002f22:	4631      	mov	r1, r6
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b8      	blx	r7
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f43f ae38 	beq.w	8002b9e <_printf_float+0xc2>
 8002f2e:	f108 0801 	add.w	r8, r8, #1
 8002f32:	68e3      	ldr	r3, [r4, #12]
 8002f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f36:	1a5b      	subs	r3, r3, r1
 8002f38:	4543      	cmp	r3, r8
 8002f3a:	dcf0      	bgt.n	8002f1e <_printf_float+0x442>
 8002f3c:	e6fa      	b.n	8002d34 <_printf_float+0x258>
 8002f3e:	f04f 0800 	mov.w	r8, #0
 8002f42:	f104 0919 	add.w	r9, r4, #25
 8002f46:	e7f4      	b.n	8002f32 <_printf_float+0x456>

08002f48 <_printf_common>:
 8002f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	4699      	mov	r9, r3
 8002f50:	688a      	ldr	r2, [r1, #8]
 8002f52:	690b      	ldr	r3, [r1, #16]
 8002f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bfb8      	it	lt
 8002f5c:	4613      	movlt	r3, r2
 8002f5e:	6033      	str	r3, [r6, #0]
 8002f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f64:	4607      	mov	r7, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	b10a      	cbz	r2, 8002f6e <_printf_common+0x26>
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	6033      	str	r3, [r6, #0]
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	0699      	lsls	r1, r3, #26
 8002f72:	bf42      	ittt	mi
 8002f74:	6833      	ldrmi	r3, [r6, #0]
 8002f76:	3302      	addmi	r3, #2
 8002f78:	6033      	strmi	r3, [r6, #0]
 8002f7a:	6825      	ldr	r5, [r4, #0]
 8002f7c:	f015 0506 	ands.w	r5, r5, #6
 8002f80:	d106      	bne.n	8002f90 <_printf_common+0x48>
 8002f82:	f104 0a19 	add.w	sl, r4, #25
 8002f86:	68e3      	ldr	r3, [r4, #12]
 8002f88:	6832      	ldr	r2, [r6, #0]
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	42ab      	cmp	r3, r5
 8002f8e:	dc26      	bgt.n	8002fde <_printf_common+0x96>
 8002f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f94:	1e13      	subs	r3, r2, #0
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	bf18      	it	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	0692      	lsls	r2, r2, #26
 8002f9e:	d42b      	bmi.n	8002ff8 <_printf_common+0xb0>
 8002fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	47c0      	blx	r8
 8002faa:	3001      	adds	r0, #1
 8002fac:	d01e      	beq.n	8002fec <_printf_common+0xa4>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	68e5      	ldr	r5, [r4, #12]
 8002fb2:	6832      	ldr	r2, [r6, #0]
 8002fb4:	f003 0306 	and.w	r3, r3, #6
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	bf08      	it	eq
 8002fbc:	1aad      	subeq	r5, r5, r2
 8002fbe:	68a3      	ldr	r3, [r4, #8]
 8002fc0:	6922      	ldr	r2, [r4, #16]
 8002fc2:	bf0c      	ite	eq
 8002fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fc8:	2500      	movne	r5, #0
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bfc4      	itt	gt
 8002fce:	1a9b      	subgt	r3, r3, r2
 8002fd0:	18ed      	addgt	r5, r5, r3
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	341a      	adds	r4, #26
 8002fd6:	42b5      	cmp	r5, r6
 8002fd8:	d11a      	bne.n	8003010 <_printf_common+0xc8>
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e008      	b.n	8002ff0 <_printf_common+0xa8>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4652      	mov	r2, sl
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	47c0      	blx	r8
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d103      	bne.n	8002ff4 <_printf_common+0xac>
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	e7c6      	b.n	8002f86 <_printf_common+0x3e>
 8002ff8:	18e1      	adds	r1, r4, r3
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	2030      	movs	r0, #48	; 0x30
 8002ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003002:	4422      	add	r2, r4
 8003004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800300c:	3302      	adds	r3, #2
 800300e:	e7c7      	b.n	8002fa0 <_printf_common+0x58>
 8003010:	2301      	movs	r3, #1
 8003012:	4622      	mov	r2, r4
 8003014:	4649      	mov	r1, r9
 8003016:	4638      	mov	r0, r7
 8003018:	47c0      	blx	r8
 800301a:	3001      	adds	r0, #1
 800301c:	d0e6      	beq.n	8002fec <_printf_common+0xa4>
 800301e:	3601      	adds	r6, #1
 8003020:	e7d9      	b.n	8002fd6 <_printf_common+0x8e>
	...

08003024 <_printf_i>:
 8003024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	7e0f      	ldrb	r7, [r1, #24]
 800302a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800302c:	2f78      	cmp	r7, #120	; 0x78
 800302e:	4691      	mov	r9, r2
 8003030:	4680      	mov	r8, r0
 8003032:	460c      	mov	r4, r1
 8003034:	469a      	mov	sl, r3
 8003036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800303a:	d807      	bhi.n	800304c <_printf_i+0x28>
 800303c:	2f62      	cmp	r7, #98	; 0x62
 800303e:	d80a      	bhi.n	8003056 <_printf_i+0x32>
 8003040:	2f00      	cmp	r7, #0
 8003042:	f000 80d8 	beq.w	80031f6 <_printf_i+0x1d2>
 8003046:	2f58      	cmp	r7, #88	; 0x58
 8003048:	f000 80a3 	beq.w	8003192 <_printf_i+0x16e>
 800304c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003054:	e03a      	b.n	80030cc <_printf_i+0xa8>
 8003056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800305a:	2b15      	cmp	r3, #21
 800305c:	d8f6      	bhi.n	800304c <_printf_i+0x28>
 800305e:	a101      	add	r1, pc, #4	; (adr r1, 8003064 <_printf_i+0x40>)
 8003060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003064:	080030bd 	.word	0x080030bd
 8003068:	080030d1 	.word	0x080030d1
 800306c:	0800304d 	.word	0x0800304d
 8003070:	0800304d 	.word	0x0800304d
 8003074:	0800304d 	.word	0x0800304d
 8003078:	0800304d 	.word	0x0800304d
 800307c:	080030d1 	.word	0x080030d1
 8003080:	0800304d 	.word	0x0800304d
 8003084:	0800304d 	.word	0x0800304d
 8003088:	0800304d 	.word	0x0800304d
 800308c:	0800304d 	.word	0x0800304d
 8003090:	080031dd 	.word	0x080031dd
 8003094:	08003101 	.word	0x08003101
 8003098:	080031bf 	.word	0x080031bf
 800309c:	0800304d 	.word	0x0800304d
 80030a0:	0800304d 	.word	0x0800304d
 80030a4:	080031ff 	.word	0x080031ff
 80030a8:	0800304d 	.word	0x0800304d
 80030ac:	08003101 	.word	0x08003101
 80030b0:	0800304d 	.word	0x0800304d
 80030b4:	0800304d 	.word	0x0800304d
 80030b8:	080031c7 	.word	0x080031c7
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	602a      	str	r2, [r5, #0]
 80030c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0a3      	b.n	8003218 <_printf_i+0x1f4>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	6829      	ldr	r1, [r5, #0]
 80030d4:	0606      	lsls	r6, r0, #24
 80030d6:	f101 0304 	add.w	r3, r1, #4
 80030da:	d50a      	bpl.n	80030f2 <_printf_i+0xce>
 80030dc:	680e      	ldr	r6, [r1, #0]
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	2e00      	cmp	r6, #0
 80030e2:	da03      	bge.n	80030ec <_printf_i+0xc8>
 80030e4:	232d      	movs	r3, #45	; 0x2d
 80030e6:	4276      	negs	r6, r6
 80030e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030ec:	485e      	ldr	r0, [pc, #376]	; (8003268 <_printf_i+0x244>)
 80030ee:	230a      	movs	r3, #10
 80030f0:	e019      	b.n	8003126 <_printf_i+0x102>
 80030f2:	680e      	ldr	r6, [r1, #0]
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030fa:	bf18      	it	ne
 80030fc:	b236      	sxthne	r6, r6
 80030fe:	e7ef      	b.n	80030e0 <_printf_i+0xbc>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	1d19      	adds	r1, r3, #4
 8003106:	6029      	str	r1, [r5, #0]
 8003108:	0601      	lsls	r1, r0, #24
 800310a:	d501      	bpl.n	8003110 <_printf_i+0xec>
 800310c:	681e      	ldr	r6, [r3, #0]
 800310e:	e002      	b.n	8003116 <_printf_i+0xf2>
 8003110:	0646      	lsls	r6, r0, #25
 8003112:	d5fb      	bpl.n	800310c <_printf_i+0xe8>
 8003114:	881e      	ldrh	r6, [r3, #0]
 8003116:	4854      	ldr	r0, [pc, #336]	; (8003268 <_printf_i+0x244>)
 8003118:	2f6f      	cmp	r7, #111	; 0x6f
 800311a:	bf0c      	ite	eq
 800311c:	2308      	moveq	r3, #8
 800311e:	230a      	movne	r3, #10
 8003120:	2100      	movs	r1, #0
 8003122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003126:	6865      	ldr	r5, [r4, #4]
 8003128:	60a5      	str	r5, [r4, #8]
 800312a:	2d00      	cmp	r5, #0
 800312c:	bfa2      	ittt	ge
 800312e:	6821      	ldrge	r1, [r4, #0]
 8003130:	f021 0104 	bicge.w	r1, r1, #4
 8003134:	6021      	strge	r1, [r4, #0]
 8003136:	b90e      	cbnz	r6, 800313c <_printf_i+0x118>
 8003138:	2d00      	cmp	r5, #0
 800313a:	d04d      	beq.n	80031d8 <_printf_i+0x1b4>
 800313c:	4615      	mov	r5, r2
 800313e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003142:	fb03 6711 	mls	r7, r3, r1, r6
 8003146:	5dc7      	ldrb	r7, [r0, r7]
 8003148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800314c:	4637      	mov	r7, r6
 800314e:	42bb      	cmp	r3, r7
 8003150:	460e      	mov	r6, r1
 8003152:	d9f4      	bls.n	800313e <_printf_i+0x11a>
 8003154:	2b08      	cmp	r3, #8
 8003156:	d10b      	bne.n	8003170 <_printf_i+0x14c>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	07de      	lsls	r6, r3, #31
 800315c:	d508      	bpl.n	8003170 <_printf_i+0x14c>
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	6861      	ldr	r1, [r4, #4]
 8003162:	4299      	cmp	r1, r3
 8003164:	bfde      	ittt	le
 8003166:	2330      	movle	r3, #48	; 0x30
 8003168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800316c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003170:	1b52      	subs	r2, r2, r5
 8003172:	6122      	str	r2, [r4, #16]
 8003174:	f8cd a000 	str.w	sl, [sp]
 8003178:	464b      	mov	r3, r9
 800317a:	aa03      	add	r2, sp, #12
 800317c:	4621      	mov	r1, r4
 800317e:	4640      	mov	r0, r8
 8003180:	f7ff fee2 	bl	8002f48 <_printf_common>
 8003184:	3001      	adds	r0, #1
 8003186:	d14c      	bne.n	8003222 <_printf_i+0x1fe>
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	b004      	add	sp, #16
 800318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003192:	4835      	ldr	r0, [pc, #212]	; (8003268 <_printf_i+0x244>)
 8003194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003198:	6829      	ldr	r1, [r5, #0]
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f851 6b04 	ldr.w	r6, [r1], #4
 80031a0:	6029      	str	r1, [r5, #0]
 80031a2:	061d      	lsls	r5, r3, #24
 80031a4:	d514      	bpl.n	80031d0 <_printf_i+0x1ac>
 80031a6:	07df      	lsls	r7, r3, #31
 80031a8:	bf44      	itt	mi
 80031aa:	f043 0320 	orrmi.w	r3, r3, #32
 80031ae:	6023      	strmi	r3, [r4, #0]
 80031b0:	b91e      	cbnz	r6, 80031ba <_printf_i+0x196>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	f023 0320 	bic.w	r3, r3, #32
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	2310      	movs	r3, #16
 80031bc:	e7b0      	b.n	8003120 <_printf_i+0xfc>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f043 0320 	orr.w	r3, r3, #32
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	2378      	movs	r3, #120	; 0x78
 80031c8:	4828      	ldr	r0, [pc, #160]	; (800326c <_printf_i+0x248>)
 80031ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031ce:	e7e3      	b.n	8003198 <_printf_i+0x174>
 80031d0:	0659      	lsls	r1, r3, #25
 80031d2:	bf48      	it	mi
 80031d4:	b2b6      	uxthmi	r6, r6
 80031d6:	e7e6      	b.n	80031a6 <_printf_i+0x182>
 80031d8:	4615      	mov	r5, r2
 80031da:	e7bb      	b.n	8003154 <_printf_i+0x130>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	6826      	ldr	r6, [r4, #0]
 80031e0:	6961      	ldr	r1, [r4, #20]
 80031e2:	1d18      	adds	r0, r3, #4
 80031e4:	6028      	str	r0, [r5, #0]
 80031e6:	0635      	lsls	r5, r6, #24
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	d501      	bpl.n	80031f0 <_printf_i+0x1cc>
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <_printf_i+0x1d2>
 80031f0:	0670      	lsls	r0, r6, #25
 80031f2:	d5fb      	bpl.n	80031ec <_printf_i+0x1c8>
 80031f4:	8019      	strh	r1, [r3, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	4615      	mov	r5, r2
 80031fc:	e7ba      	b.n	8003174 <_printf_i+0x150>
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	602a      	str	r2, [r5, #0]
 8003204:	681d      	ldr	r5, [r3, #0]
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	2100      	movs	r1, #0
 800320a:	4628      	mov	r0, r5
 800320c:	f7fc fff8 	bl	8000200 <memchr>
 8003210:	b108      	cbz	r0, 8003216 <_printf_i+0x1f2>
 8003212:	1b40      	subs	r0, r0, r5
 8003214:	6060      	str	r0, [r4, #4]
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	6123      	str	r3, [r4, #16]
 800321a:	2300      	movs	r3, #0
 800321c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003220:	e7a8      	b.n	8003174 <_printf_i+0x150>
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	462a      	mov	r2, r5
 8003226:	4649      	mov	r1, r9
 8003228:	4640      	mov	r0, r8
 800322a:	47d0      	blx	sl
 800322c:	3001      	adds	r0, #1
 800322e:	d0ab      	beq.n	8003188 <_printf_i+0x164>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	079b      	lsls	r3, r3, #30
 8003234:	d413      	bmi.n	800325e <_printf_i+0x23a>
 8003236:	68e0      	ldr	r0, [r4, #12]
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	4298      	cmp	r0, r3
 800323c:	bfb8      	it	lt
 800323e:	4618      	movlt	r0, r3
 8003240:	e7a4      	b.n	800318c <_printf_i+0x168>
 8003242:	2301      	movs	r3, #1
 8003244:	4632      	mov	r2, r6
 8003246:	4649      	mov	r1, r9
 8003248:	4640      	mov	r0, r8
 800324a:	47d0      	blx	sl
 800324c:	3001      	adds	r0, #1
 800324e:	d09b      	beq.n	8003188 <_printf_i+0x164>
 8003250:	3501      	adds	r5, #1
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	9903      	ldr	r1, [sp, #12]
 8003256:	1a5b      	subs	r3, r3, r1
 8003258:	42ab      	cmp	r3, r5
 800325a:	dcf2      	bgt.n	8003242 <_printf_i+0x21e>
 800325c:	e7eb      	b.n	8003236 <_printf_i+0x212>
 800325e:	2500      	movs	r5, #0
 8003260:	f104 0619 	add.w	r6, r4, #25
 8003264:	e7f5      	b.n	8003252 <_printf_i+0x22e>
 8003266:	bf00      	nop
 8003268:	080067e2 	.word	0x080067e2
 800326c:	080067f3 	.word	0x080067f3

08003270 <iprintf>:
 8003270:	b40f      	push	{r0, r1, r2, r3}
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <iprintf+0x2c>)
 8003274:	b513      	push	{r0, r1, r4, lr}
 8003276:	681c      	ldr	r4, [r3, #0]
 8003278:	b124      	cbz	r4, 8003284 <iprintf+0x14>
 800327a:	69a3      	ldr	r3, [r4, #24]
 800327c:	b913      	cbnz	r3, 8003284 <iprintf+0x14>
 800327e:	4620      	mov	r0, r4
 8003280:	f001 f8da 	bl	8004438 <__sinit>
 8003284:	ab05      	add	r3, sp, #20
 8003286:	9a04      	ldr	r2, [sp, #16]
 8003288:	68a1      	ldr	r1, [r4, #8]
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	4620      	mov	r0, r4
 800328e:	f001 fe97 	bl	8004fc0 <_vfiprintf_r>
 8003292:	b002      	add	sp, #8
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003298:	b004      	add	sp, #16
 800329a:	4770      	bx	lr
 800329c:	2000000c 	.word	0x2000000c

080032a0 <_puts_r>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	460e      	mov	r6, r1
 80032a4:	4605      	mov	r5, r0
 80032a6:	b118      	cbz	r0, 80032b0 <_puts_r+0x10>
 80032a8:	6983      	ldr	r3, [r0, #24]
 80032aa:	b90b      	cbnz	r3, 80032b0 <_puts_r+0x10>
 80032ac:	f001 f8c4 	bl	8004438 <__sinit>
 80032b0:	69ab      	ldr	r3, [r5, #24]
 80032b2:	68ac      	ldr	r4, [r5, #8]
 80032b4:	b913      	cbnz	r3, 80032bc <_puts_r+0x1c>
 80032b6:	4628      	mov	r0, r5
 80032b8:	f001 f8be 	bl	8004438 <__sinit>
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <_puts_r+0xd0>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d120      	bne.n	8003304 <_puts_r+0x64>
 80032c2:	686c      	ldr	r4, [r5, #4]
 80032c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032c6:	07db      	lsls	r3, r3, #31
 80032c8:	d405      	bmi.n	80032d6 <_puts_r+0x36>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	0598      	lsls	r0, r3, #22
 80032ce:	d402      	bmi.n	80032d6 <_puts_r+0x36>
 80032d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032d2:	f001 f954 	bl	800457e <__retarget_lock_acquire_recursive>
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	0719      	lsls	r1, r3, #28
 80032da:	d51d      	bpl.n	8003318 <_puts_r+0x78>
 80032dc:	6923      	ldr	r3, [r4, #16]
 80032de:	b1db      	cbz	r3, 8003318 <_puts_r+0x78>
 80032e0:	3e01      	subs	r6, #1
 80032e2:	68a3      	ldr	r3, [r4, #8]
 80032e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60a3      	str	r3, [r4, #8]
 80032ec:	bb39      	cbnz	r1, 800333e <_puts_r+0x9e>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	da38      	bge.n	8003364 <_puts_r+0xc4>
 80032f2:	4622      	mov	r2, r4
 80032f4:	210a      	movs	r1, #10
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f848 	bl	800338c <__swbuf_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d011      	beq.n	8003324 <_puts_r+0x84>
 8003300:	250a      	movs	r5, #10
 8003302:	e011      	b.n	8003328 <_puts_r+0x88>
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <_puts_r+0xd4>)
 8003306:	429c      	cmp	r4, r3
 8003308:	d101      	bne.n	800330e <_puts_r+0x6e>
 800330a:	68ac      	ldr	r4, [r5, #8]
 800330c:	e7da      	b.n	80032c4 <_puts_r+0x24>
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <_puts_r+0xd8>)
 8003310:	429c      	cmp	r4, r3
 8003312:	bf08      	it	eq
 8003314:	68ec      	ldreq	r4, [r5, #12]
 8003316:	e7d5      	b.n	80032c4 <_puts_r+0x24>
 8003318:	4621      	mov	r1, r4
 800331a:	4628      	mov	r0, r5
 800331c:	f000 f888 	bl	8003430 <__swsetup_r>
 8003320:	2800      	cmp	r0, #0
 8003322:	d0dd      	beq.n	80032e0 <_puts_r+0x40>
 8003324:	f04f 35ff 	mov.w	r5, #4294967295
 8003328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800332a:	07da      	lsls	r2, r3, #31
 800332c:	d405      	bmi.n	800333a <_puts_r+0x9a>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	059b      	lsls	r3, r3, #22
 8003332:	d402      	bmi.n	800333a <_puts_r+0x9a>
 8003334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003336:	f001 f923 	bl	8004580 <__retarget_lock_release_recursive>
 800333a:	4628      	mov	r0, r5
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	2b00      	cmp	r3, #0
 8003340:	da04      	bge.n	800334c <_puts_r+0xac>
 8003342:	69a2      	ldr	r2, [r4, #24]
 8003344:	429a      	cmp	r2, r3
 8003346:	dc06      	bgt.n	8003356 <_puts_r+0xb6>
 8003348:	290a      	cmp	r1, #10
 800334a:	d004      	beq.n	8003356 <_puts_r+0xb6>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	6022      	str	r2, [r4, #0]
 8003352:	7019      	strb	r1, [r3, #0]
 8003354:	e7c5      	b.n	80032e2 <_puts_r+0x42>
 8003356:	4622      	mov	r2, r4
 8003358:	4628      	mov	r0, r5
 800335a:	f000 f817 	bl	800338c <__swbuf_r>
 800335e:	3001      	adds	r0, #1
 8003360:	d1bf      	bne.n	80032e2 <_puts_r+0x42>
 8003362:	e7df      	b.n	8003324 <_puts_r+0x84>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	250a      	movs	r5, #10
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	6022      	str	r2, [r4, #0]
 800336c:	701d      	strb	r5, [r3, #0]
 800336e:	e7db      	b.n	8003328 <_puts_r+0x88>
 8003370:	080068b4 	.word	0x080068b4
 8003374:	080068d4 	.word	0x080068d4
 8003378:	08006894 	.word	0x08006894

0800337c <puts>:
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <puts+0xc>)
 800337e:	4601      	mov	r1, r0
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	f7ff bf8d 	b.w	80032a0 <_puts_r>
 8003386:	bf00      	nop
 8003388:	2000000c 	.word	0x2000000c

0800338c <__swbuf_r>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	460e      	mov	r6, r1
 8003390:	4614      	mov	r4, r2
 8003392:	4605      	mov	r5, r0
 8003394:	b118      	cbz	r0, 800339e <__swbuf_r+0x12>
 8003396:	6983      	ldr	r3, [r0, #24]
 8003398:	b90b      	cbnz	r3, 800339e <__swbuf_r+0x12>
 800339a:	f001 f84d 	bl	8004438 <__sinit>
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <__swbuf_r+0x98>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	d12b      	bne.n	80033fc <__swbuf_r+0x70>
 80033a4:	686c      	ldr	r4, [r5, #4]
 80033a6:	69a3      	ldr	r3, [r4, #24]
 80033a8:	60a3      	str	r3, [r4, #8]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	071a      	lsls	r2, r3, #28
 80033ae:	d52f      	bpl.n	8003410 <__swbuf_r+0x84>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	b36b      	cbz	r3, 8003410 <__swbuf_r+0x84>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1ac0      	subs	r0, r0, r3
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	b2f6      	uxtb	r6, r6
 80033be:	4283      	cmp	r3, r0
 80033c0:	4637      	mov	r7, r6
 80033c2:	dc04      	bgt.n	80033ce <__swbuf_r+0x42>
 80033c4:	4621      	mov	r1, r4
 80033c6:	4628      	mov	r0, r5
 80033c8:	f000 ffa2 	bl	8004310 <_fflush_r>
 80033cc:	bb30      	cbnz	r0, 800341c <__swbuf_r+0x90>
 80033ce:	68a3      	ldr	r3, [r4, #8]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	60a3      	str	r3, [r4, #8]
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	701e      	strb	r6, [r3, #0]
 80033dc:	6963      	ldr	r3, [r4, #20]
 80033de:	3001      	adds	r0, #1
 80033e0:	4283      	cmp	r3, r0
 80033e2:	d004      	beq.n	80033ee <__swbuf_r+0x62>
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	07db      	lsls	r3, r3, #31
 80033e8:	d506      	bpl.n	80033f8 <__swbuf_r+0x6c>
 80033ea:	2e0a      	cmp	r6, #10
 80033ec:	d104      	bne.n	80033f8 <__swbuf_r+0x6c>
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 ff8d 	bl	8004310 <_fflush_r>
 80033f6:	b988      	cbnz	r0, 800341c <__swbuf_r+0x90>
 80033f8:	4638      	mov	r0, r7
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <__swbuf_r+0x9c>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d101      	bne.n	8003406 <__swbuf_r+0x7a>
 8003402:	68ac      	ldr	r4, [r5, #8]
 8003404:	e7cf      	b.n	80033a6 <__swbuf_r+0x1a>
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <__swbuf_r+0xa0>)
 8003408:	429c      	cmp	r4, r3
 800340a:	bf08      	it	eq
 800340c:	68ec      	ldreq	r4, [r5, #12]
 800340e:	e7ca      	b.n	80033a6 <__swbuf_r+0x1a>
 8003410:	4621      	mov	r1, r4
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f80c 	bl	8003430 <__swsetup_r>
 8003418:	2800      	cmp	r0, #0
 800341a:	d0cb      	beq.n	80033b4 <__swbuf_r+0x28>
 800341c:	f04f 37ff 	mov.w	r7, #4294967295
 8003420:	e7ea      	b.n	80033f8 <__swbuf_r+0x6c>
 8003422:	bf00      	nop
 8003424:	080068b4 	.word	0x080068b4
 8003428:	080068d4 	.word	0x080068d4
 800342c:	08006894 	.word	0x08006894

08003430 <__swsetup_r>:
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <__swsetup_r+0xcc>)
 8003432:	b570      	push	{r4, r5, r6, lr}
 8003434:	681d      	ldr	r5, [r3, #0]
 8003436:	4606      	mov	r6, r0
 8003438:	460c      	mov	r4, r1
 800343a:	b125      	cbz	r5, 8003446 <__swsetup_r+0x16>
 800343c:	69ab      	ldr	r3, [r5, #24]
 800343e:	b913      	cbnz	r3, 8003446 <__swsetup_r+0x16>
 8003440:	4628      	mov	r0, r5
 8003442:	f000 fff9 	bl	8004438 <__sinit>
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <__swsetup_r+0xd0>)
 8003448:	429c      	cmp	r4, r3
 800344a:	d10f      	bne.n	800346c <__swsetup_r+0x3c>
 800344c:	686c      	ldr	r4, [r5, #4]
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003454:	0719      	lsls	r1, r3, #28
 8003456:	d42c      	bmi.n	80034b2 <__swsetup_r+0x82>
 8003458:	06dd      	lsls	r5, r3, #27
 800345a:	d411      	bmi.n	8003480 <__swsetup_r+0x50>
 800345c:	2309      	movs	r3, #9
 800345e:	6033      	str	r3, [r6, #0]
 8003460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	f04f 30ff 	mov.w	r0, #4294967295
 800346a:	e03e      	b.n	80034ea <__swsetup_r+0xba>
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <__swsetup_r+0xd4>)
 800346e:	429c      	cmp	r4, r3
 8003470:	d101      	bne.n	8003476 <__swsetup_r+0x46>
 8003472:	68ac      	ldr	r4, [r5, #8]
 8003474:	e7eb      	b.n	800344e <__swsetup_r+0x1e>
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <__swsetup_r+0xd8>)
 8003478:	429c      	cmp	r4, r3
 800347a:	bf08      	it	eq
 800347c:	68ec      	ldreq	r4, [r5, #12]
 800347e:	e7e6      	b.n	800344e <__swsetup_r+0x1e>
 8003480:	0758      	lsls	r0, r3, #29
 8003482:	d512      	bpl.n	80034aa <__swsetup_r+0x7a>
 8003484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003486:	b141      	cbz	r1, 800349a <__swsetup_r+0x6a>
 8003488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800348c:	4299      	cmp	r1, r3
 800348e:	d002      	beq.n	8003496 <__swsetup_r+0x66>
 8003490:	4630      	mov	r0, r6
 8003492:	f001 fc8b 	bl	8004dac <_free_r>
 8003496:	2300      	movs	r3, #0
 8003498:	6363      	str	r3, [r4, #52]	; 0x34
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	b94b      	cbnz	r3, 80034ca <__swsetup_r+0x9a>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c0:	d003      	beq.n	80034ca <__swsetup_r+0x9a>
 80034c2:	4621      	mov	r1, r4
 80034c4:	4630      	mov	r0, r6
 80034c6:	f001 f881 	bl	80045cc <__smakebuf_r>
 80034ca:	89a0      	ldrh	r0, [r4, #12]
 80034cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034d0:	f010 0301 	ands.w	r3, r0, #1
 80034d4:	d00a      	beq.n	80034ec <__swsetup_r+0xbc>
 80034d6:	2300      	movs	r3, #0
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	6963      	ldr	r3, [r4, #20]
 80034dc:	425b      	negs	r3, r3
 80034de:	61a3      	str	r3, [r4, #24]
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	b943      	cbnz	r3, 80034f6 <__swsetup_r+0xc6>
 80034e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034e8:	d1ba      	bne.n	8003460 <__swsetup_r+0x30>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	0781      	lsls	r1, r0, #30
 80034ee:	bf58      	it	pl
 80034f0:	6963      	ldrpl	r3, [r4, #20]
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	e7f4      	b.n	80034e0 <__swsetup_r+0xb0>
 80034f6:	2000      	movs	r0, #0
 80034f8:	e7f7      	b.n	80034ea <__swsetup_r+0xba>
 80034fa:	bf00      	nop
 80034fc:	2000000c 	.word	0x2000000c
 8003500:	080068b4 	.word	0x080068b4
 8003504:	080068d4 	.word	0x080068d4
 8003508:	08006894 	.word	0x08006894

0800350c <quorem>:
 800350c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	6903      	ldr	r3, [r0, #16]
 8003512:	690c      	ldr	r4, [r1, #16]
 8003514:	42a3      	cmp	r3, r4
 8003516:	4607      	mov	r7, r0
 8003518:	f2c0 8081 	blt.w	800361e <quorem+0x112>
 800351c:	3c01      	subs	r4, #1
 800351e:	f101 0814 	add.w	r8, r1, #20
 8003522:	f100 0514 	add.w	r5, r0, #20
 8003526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003534:	3301      	adds	r3, #1
 8003536:	429a      	cmp	r2, r3
 8003538:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800353c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003540:	fbb2 f6f3 	udiv	r6, r2, r3
 8003544:	d331      	bcc.n	80035aa <quorem+0x9e>
 8003546:	f04f 0e00 	mov.w	lr, #0
 800354a:	4640      	mov	r0, r8
 800354c:	46ac      	mov	ip, r5
 800354e:	46f2      	mov	sl, lr
 8003550:	f850 2b04 	ldr.w	r2, [r0], #4
 8003554:	b293      	uxth	r3, r2
 8003556:	fb06 e303 	mla	r3, r6, r3, lr
 800355a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800355e:	b29b      	uxth	r3, r3
 8003560:	ebaa 0303 	sub.w	r3, sl, r3
 8003564:	f8dc a000 	ldr.w	sl, [ip]
 8003568:	0c12      	lsrs	r2, r2, #16
 800356a:	fa13 f38a 	uxtah	r3, r3, sl
 800356e:	fb06 e202 	mla	r2, r6, r2, lr
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	9b00      	ldr	r3, [sp, #0]
 8003576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800357a:	b292      	uxth	r2, r2
 800357c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003584:	f8bd 3000 	ldrh.w	r3, [sp]
 8003588:	4581      	cmp	r9, r0
 800358a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800358e:	f84c 3b04 	str.w	r3, [ip], #4
 8003592:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003596:	d2db      	bcs.n	8003550 <quorem+0x44>
 8003598:	f855 300b 	ldr.w	r3, [r5, fp]
 800359c:	b92b      	cbnz	r3, 80035aa <quorem+0x9e>
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	429d      	cmp	r5, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	d32e      	bcc.n	8003606 <quorem+0xfa>
 80035a8:	613c      	str	r4, [r7, #16]
 80035aa:	4638      	mov	r0, r7
 80035ac:	f001 fae6 	bl	8004b7c <__mcmp>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	db24      	blt.n	80035fe <quorem+0xf2>
 80035b4:	3601      	adds	r6, #1
 80035b6:	4628      	mov	r0, r5
 80035b8:	f04f 0c00 	mov.w	ip, #0
 80035bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80035c0:	f8d0 e000 	ldr.w	lr, [r0]
 80035c4:	b293      	uxth	r3, r2
 80035c6:	ebac 0303 	sub.w	r3, ip, r3
 80035ca:	0c12      	lsrs	r2, r2, #16
 80035cc:	fa13 f38e 	uxtah	r3, r3, lr
 80035d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80035d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035d8:	b29b      	uxth	r3, r3
 80035da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035de:	45c1      	cmp	r9, r8
 80035e0:	f840 3b04 	str.w	r3, [r0], #4
 80035e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80035e8:	d2e8      	bcs.n	80035bc <quorem+0xb0>
 80035ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035f2:	b922      	cbnz	r2, 80035fe <quorem+0xf2>
 80035f4:	3b04      	subs	r3, #4
 80035f6:	429d      	cmp	r5, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	d30a      	bcc.n	8003612 <quorem+0x106>
 80035fc:	613c      	str	r4, [r7, #16]
 80035fe:	4630      	mov	r0, r6
 8003600:	b003      	add	sp, #12
 8003602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	3b04      	subs	r3, #4
 800360a:	2a00      	cmp	r2, #0
 800360c:	d1cc      	bne.n	80035a8 <quorem+0x9c>
 800360e:	3c01      	subs	r4, #1
 8003610:	e7c7      	b.n	80035a2 <quorem+0x96>
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	3b04      	subs	r3, #4
 8003616:	2a00      	cmp	r2, #0
 8003618:	d1f0      	bne.n	80035fc <quorem+0xf0>
 800361a:	3c01      	subs	r4, #1
 800361c:	e7eb      	b.n	80035f6 <quorem+0xea>
 800361e:	2000      	movs	r0, #0
 8003620:	e7ee      	b.n	8003600 <quorem+0xf4>
 8003622:	0000      	movs	r0, r0
 8003624:	0000      	movs	r0, r0
	...

08003628 <_dtoa_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	ed2d 8b04 	vpush	{d8-d9}
 8003630:	ec57 6b10 	vmov	r6, r7, d0
 8003634:	b093      	sub	sp, #76	; 0x4c
 8003636:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003638:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800363c:	9106      	str	r1, [sp, #24]
 800363e:	ee10 aa10 	vmov	sl, s0
 8003642:	4604      	mov	r4, r0
 8003644:	9209      	str	r2, [sp, #36]	; 0x24
 8003646:	930c      	str	r3, [sp, #48]	; 0x30
 8003648:	46bb      	mov	fp, r7
 800364a:	b975      	cbnz	r5, 800366a <_dtoa_r+0x42>
 800364c:	2010      	movs	r0, #16
 800364e:	f000 fffd 	bl	800464c <malloc>
 8003652:	4602      	mov	r2, r0
 8003654:	6260      	str	r0, [r4, #36]	; 0x24
 8003656:	b920      	cbnz	r0, 8003662 <_dtoa_r+0x3a>
 8003658:	4ba7      	ldr	r3, [pc, #668]	; (80038f8 <_dtoa_r+0x2d0>)
 800365a:	21ea      	movs	r1, #234	; 0xea
 800365c:	48a7      	ldr	r0, [pc, #668]	; (80038fc <_dtoa_r+0x2d4>)
 800365e:	f001 fe45 	bl	80052ec <__assert_func>
 8003662:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003666:	6005      	str	r5, [r0, #0]
 8003668:	60c5      	str	r5, [r0, #12]
 800366a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	b151      	cbz	r1, 8003686 <_dtoa_r+0x5e>
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	604a      	str	r2, [r1, #4]
 8003674:	2301      	movs	r3, #1
 8003676:	4093      	lsls	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
 800367a:	4620      	mov	r0, r4
 800367c:	f001 f83c 	bl	80046f8 <_Bfree>
 8003680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	1e3b      	subs	r3, r7, #0
 8003688:	bfaa      	itet	ge
 800368a:	2300      	movge	r3, #0
 800368c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003690:	f8c8 3000 	strge.w	r3, [r8]
 8003694:	4b9a      	ldr	r3, [pc, #616]	; (8003900 <_dtoa_r+0x2d8>)
 8003696:	bfbc      	itt	lt
 8003698:	2201      	movlt	r2, #1
 800369a:	f8c8 2000 	strlt.w	r2, [r8]
 800369e:	ea33 030b 	bics.w	r3, r3, fp
 80036a2:	d11b      	bne.n	80036dc <_dtoa_r+0xb4>
 80036a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80036b0:	4333      	orrs	r3, r6
 80036b2:	f000 8592 	beq.w	80041da <_dtoa_r+0xbb2>
 80036b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036b8:	b963      	cbnz	r3, 80036d4 <_dtoa_r+0xac>
 80036ba:	4b92      	ldr	r3, [pc, #584]	; (8003904 <_dtoa_r+0x2dc>)
 80036bc:	e022      	b.n	8003704 <_dtoa_r+0xdc>
 80036be:	4b92      	ldr	r3, [pc, #584]	; (8003908 <_dtoa_r+0x2e0>)
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	3308      	adds	r3, #8
 80036c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	9801      	ldr	r0, [sp, #4]
 80036ca:	b013      	add	sp, #76	; 0x4c
 80036cc:	ecbd 8b04 	vpop	{d8-d9}
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d4:	4b8b      	ldr	r3, [pc, #556]	; (8003904 <_dtoa_r+0x2dc>)
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	3303      	adds	r3, #3
 80036da:	e7f3      	b.n	80036c4 <_dtoa_r+0x9c>
 80036dc:	2200      	movs	r2, #0
 80036de:	2300      	movs	r3, #0
 80036e0:	4650      	mov	r0, sl
 80036e2:	4659      	mov	r1, fp
 80036e4:	f7fd fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 80036e8:	ec4b ab19 	vmov	d9, sl, fp
 80036ec:	4680      	mov	r8, r0
 80036ee:	b158      	cbz	r0, 8003708 <_dtoa_r+0xe0>
 80036f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036f2:	2301      	movs	r3, #1
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 856b 	beq.w	80041d4 <_dtoa_r+0xbac>
 80036fe:	4883      	ldr	r0, [pc, #524]	; (800390c <_dtoa_r+0x2e4>)
 8003700:	6018      	str	r0, [r3, #0]
 8003702:	1e43      	subs	r3, r0, #1
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	e7df      	b.n	80036c8 <_dtoa_r+0xa0>
 8003708:	ec4b ab10 	vmov	d0, sl, fp
 800370c:	aa10      	add	r2, sp, #64	; 0x40
 800370e:	a911      	add	r1, sp, #68	; 0x44
 8003710:	4620      	mov	r0, r4
 8003712:	f001 fad9 	bl	8004cc8 <__d2b>
 8003716:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800371a:	ee08 0a10 	vmov	s16, r0
 800371e:	2d00      	cmp	r5, #0
 8003720:	f000 8084 	beq.w	800382c <_dtoa_r+0x204>
 8003724:	ee19 3a90 	vmov	r3, s19
 8003728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800372c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003730:	4656      	mov	r6, sl
 8003732:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800373a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800373e:	4b74      	ldr	r3, [pc, #464]	; (8003910 <_dtoa_r+0x2e8>)
 8003740:	2200      	movs	r2, #0
 8003742:	4630      	mov	r0, r6
 8003744:	4639      	mov	r1, r7
 8003746:	f7fc fdaf 	bl	80002a8 <__aeabi_dsub>
 800374a:	a365      	add	r3, pc, #404	; (adr r3, 80038e0 <_dtoa_r+0x2b8>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc ff62 	bl	8000618 <__aeabi_dmul>
 8003754:	a364      	add	r3, pc, #400	; (adr r3, 80038e8 <_dtoa_r+0x2c0>)
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f7fc fda7 	bl	80002ac <__adddf3>
 800375e:	4606      	mov	r6, r0
 8003760:	4628      	mov	r0, r5
 8003762:	460f      	mov	r7, r1
 8003764:	f7fc feee 	bl	8000544 <__aeabi_i2d>
 8003768:	a361      	add	r3, pc, #388	; (adr r3, 80038f0 <_dtoa_r+0x2c8>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f7fc ff53 	bl	8000618 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4630      	mov	r0, r6
 8003778:	4639      	mov	r1, r7
 800377a:	f7fc fd97 	bl	80002ac <__adddf3>
 800377e:	4606      	mov	r6, r0
 8003780:	460f      	mov	r7, r1
 8003782:	f7fd f9f9 	bl	8000b78 <__aeabi_d2iz>
 8003786:	2200      	movs	r2, #0
 8003788:	9000      	str	r0, [sp, #0]
 800378a:	2300      	movs	r3, #0
 800378c:	4630      	mov	r0, r6
 800378e:	4639      	mov	r1, r7
 8003790:	f7fd f9b4 	bl	8000afc <__aeabi_dcmplt>
 8003794:	b150      	cbz	r0, 80037ac <_dtoa_r+0x184>
 8003796:	9800      	ldr	r0, [sp, #0]
 8003798:	f7fc fed4 	bl	8000544 <__aeabi_i2d>
 800379c:	4632      	mov	r2, r6
 800379e:	463b      	mov	r3, r7
 80037a0:	f7fd f9a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80037a4:	b910      	cbnz	r0, 80037ac <_dtoa_r+0x184>
 80037a6:	9b00      	ldr	r3, [sp, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	9b00      	ldr	r3, [sp, #0]
 80037ae:	2b16      	cmp	r3, #22
 80037b0:	d85a      	bhi.n	8003868 <_dtoa_r+0x240>
 80037b2:	9a00      	ldr	r2, [sp, #0]
 80037b4:	4b57      	ldr	r3, [pc, #348]	; (8003914 <_dtoa_r+0x2ec>)
 80037b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	ec51 0b19 	vmov	r0, r1, d9
 80037c2:	f7fd f99b 	bl	8000afc <__aeabi_dcmplt>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d050      	beq.n	800386c <_dtoa_r+0x244>
 80037ca:	9b00      	ldr	r3, [sp, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80037d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037d6:	1b5d      	subs	r5, r3, r5
 80037d8:	1e6b      	subs	r3, r5, #1
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	bf45      	ittet	mi
 80037de:	f1c5 0301 	rsbmi	r3, r5, #1
 80037e2:	9304      	strmi	r3, [sp, #16]
 80037e4:	2300      	movpl	r3, #0
 80037e6:	2300      	movmi	r3, #0
 80037e8:	bf4c      	ite	mi
 80037ea:	9305      	strmi	r3, [sp, #20]
 80037ec:	9304      	strpl	r3, [sp, #16]
 80037ee:	9b00      	ldr	r3, [sp, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db3d      	blt.n	8003870 <_dtoa_r+0x248>
 80037f4:	9b05      	ldr	r3, [sp, #20]
 80037f6:	9a00      	ldr	r2, [sp, #0]
 80037f8:	920a      	str	r2, [sp, #40]	; 0x28
 80037fa:	4413      	add	r3, r2
 80037fc:	9305      	str	r3, [sp, #20]
 80037fe:	2300      	movs	r3, #0
 8003800:	9307      	str	r3, [sp, #28]
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	2b09      	cmp	r3, #9
 8003806:	f200 8089 	bhi.w	800391c <_dtoa_r+0x2f4>
 800380a:	2b05      	cmp	r3, #5
 800380c:	bfc4      	itt	gt
 800380e:	3b04      	subgt	r3, #4
 8003810:	9306      	strgt	r3, [sp, #24]
 8003812:	9b06      	ldr	r3, [sp, #24]
 8003814:	f1a3 0302 	sub.w	r3, r3, #2
 8003818:	bfcc      	ite	gt
 800381a:	2500      	movgt	r5, #0
 800381c:	2501      	movle	r5, #1
 800381e:	2b03      	cmp	r3, #3
 8003820:	f200 8087 	bhi.w	8003932 <_dtoa_r+0x30a>
 8003824:	e8df f003 	tbb	[pc, r3]
 8003828:	59383a2d 	.word	0x59383a2d
 800382c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003830:	441d      	add	r5, r3
 8003832:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003836:	2b20      	cmp	r3, #32
 8003838:	bfc1      	itttt	gt
 800383a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800383e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003842:	fa0b f303 	lslgt.w	r3, fp, r3
 8003846:	fa26 f000 	lsrgt.w	r0, r6, r0
 800384a:	bfda      	itte	le
 800384c:	f1c3 0320 	rsble	r3, r3, #32
 8003850:	fa06 f003 	lslle.w	r0, r6, r3
 8003854:	4318      	orrgt	r0, r3
 8003856:	f7fc fe65 	bl	8000524 <__aeabi_ui2d>
 800385a:	2301      	movs	r3, #1
 800385c:	4606      	mov	r6, r0
 800385e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003862:	3d01      	subs	r5, #1
 8003864:	930e      	str	r3, [sp, #56]	; 0x38
 8003866:	e76a      	b.n	800373e <_dtoa_r+0x116>
 8003868:	2301      	movs	r3, #1
 800386a:	e7b2      	b.n	80037d2 <_dtoa_r+0x1aa>
 800386c:	900b      	str	r0, [sp, #44]	; 0x2c
 800386e:	e7b1      	b.n	80037d4 <_dtoa_r+0x1ac>
 8003870:	9b04      	ldr	r3, [sp, #16]
 8003872:	9a00      	ldr	r2, [sp, #0]
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	4253      	negs	r3, r2
 800387a:	9307      	str	r3, [sp, #28]
 800387c:	2300      	movs	r3, #0
 800387e:	930a      	str	r3, [sp, #40]	; 0x28
 8003880:	e7bf      	b.n	8003802 <_dtoa_r+0x1da>
 8003882:	2300      	movs	r3, #0
 8003884:	9308      	str	r3, [sp, #32]
 8003886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	dc55      	bgt.n	8003938 <_dtoa_r+0x310>
 800388c:	2301      	movs	r3, #1
 800388e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003892:	461a      	mov	r2, r3
 8003894:	9209      	str	r2, [sp, #36]	; 0x24
 8003896:	e00c      	b.n	80038b2 <_dtoa_r+0x28a>
 8003898:	2301      	movs	r3, #1
 800389a:	e7f3      	b.n	8003884 <_dtoa_r+0x25c>
 800389c:	2300      	movs	r3, #0
 800389e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038a0:	9308      	str	r3, [sp, #32]
 80038a2:	9b00      	ldr	r3, [sp, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	9303      	str	r3, [sp, #12]
 80038ae:	bfb8      	it	lt
 80038b0:	2301      	movlt	r3, #1
 80038b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038b4:	2200      	movs	r2, #0
 80038b6:	6042      	str	r2, [r0, #4]
 80038b8:	2204      	movs	r2, #4
 80038ba:	f102 0614 	add.w	r6, r2, #20
 80038be:	429e      	cmp	r6, r3
 80038c0:	6841      	ldr	r1, [r0, #4]
 80038c2:	d93d      	bls.n	8003940 <_dtoa_r+0x318>
 80038c4:	4620      	mov	r0, r4
 80038c6:	f000 fed7 	bl	8004678 <_Balloc>
 80038ca:	9001      	str	r0, [sp, #4]
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d13b      	bne.n	8003948 <_dtoa_r+0x320>
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <_dtoa_r+0x2f0>)
 80038d2:	4602      	mov	r2, r0
 80038d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80038d8:	e6c0      	b.n	800365c <_dtoa_r+0x34>
 80038da:	2301      	movs	r3, #1
 80038dc:	e7df      	b.n	800389e <_dtoa_r+0x276>
 80038de:	bf00      	nop
 80038e0:	636f4361 	.word	0x636f4361
 80038e4:	3fd287a7 	.word	0x3fd287a7
 80038e8:	8b60c8b3 	.word	0x8b60c8b3
 80038ec:	3fc68a28 	.word	0x3fc68a28
 80038f0:	509f79fb 	.word	0x509f79fb
 80038f4:	3fd34413 	.word	0x3fd34413
 80038f8:	08006811 	.word	0x08006811
 80038fc:	08006828 	.word	0x08006828
 8003900:	7ff00000 	.word	0x7ff00000
 8003904:	0800680d 	.word	0x0800680d
 8003908:	08006804 	.word	0x08006804
 800390c:	080067e1 	.word	0x080067e1
 8003910:	3ff80000 	.word	0x3ff80000
 8003914:	08006978 	.word	0x08006978
 8003918:	08006883 	.word	0x08006883
 800391c:	2501      	movs	r5, #1
 800391e:	2300      	movs	r3, #0
 8003920:	9306      	str	r3, [sp, #24]
 8003922:	9508      	str	r5, [sp, #32]
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	2312      	movs	r3, #18
 8003930:	e7b0      	b.n	8003894 <_dtoa_r+0x26c>
 8003932:	2301      	movs	r3, #1
 8003934:	9308      	str	r3, [sp, #32]
 8003936:	e7f5      	b.n	8003924 <_dtoa_r+0x2fc>
 8003938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800393a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800393e:	e7b8      	b.n	80038b2 <_dtoa_r+0x28a>
 8003940:	3101      	adds	r1, #1
 8003942:	6041      	str	r1, [r0, #4]
 8003944:	0052      	lsls	r2, r2, #1
 8003946:	e7b8      	b.n	80038ba <_dtoa_r+0x292>
 8003948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800394a:	9a01      	ldr	r2, [sp, #4]
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	2b0e      	cmp	r3, #14
 8003952:	f200 809d 	bhi.w	8003a90 <_dtoa_r+0x468>
 8003956:	2d00      	cmp	r5, #0
 8003958:	f000 809a 	beq.w	8003a90 <_dtoa_r+0x468>
 800395c:	9b00      	ldr	r3, [sp, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	dd32      	ble.n	80039c8 <_dtoa_r+0x3a0>
 8003962:	4ab7      	ldr	r2, [pc, #732]	; (8003c40 <_dtoa_r+0x618>)
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800396c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003970:	9b00      	ldr	r3, [sp, #0]
 8003972:	05d8      	lsls	r0, r3, #23
 8003974:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003978:	d516      	bpl.n	80039a8 <_dtoa_r+0x380>
 800397a:	4bb2      	ldr	r3, [pc, #712]	; (8003c44 <_dtoa_r+0x61c>)
 800397c:	ec51 0b19 	vmov	r0, r1, d9
 8003980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003984:	f7fc ff72 	bl	800086c <__aeabi_ddiv>
 8003988:	f007 070f 	and.w	r7, r7, #15
 800398c:	4682      	mov	sl, r0
 800398e:	468b      	mov	fp, r1
 8003990:	2503      	movs	r5, #3
 8003992:	4eac      	ldr	r6, [pc, #688]	; (8003c44 <_dtoa_r+0x61c>)
 8003994:	b957      	cbnz	r7, 80039ac <_dtoa_r+0x384>
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	4650      	mov	r0, sl
 800399c:	4659      	mov	r1, fp
 800399e:	f7fc ff65 	bl	800086c <__aeabi_ddiv>
 80039a2:	4682      	mov	sl, r0
 80039a4:	468b      	mov	fp, r1
 80039a6:	e028      	b.n	80039fa <_dtoa_r+0x3d2>
 80039a8:	2502      	movs	r5, #2
 80039aa:	e7f2      	b.n	8003992 <_dtoa_r+0x36a>
 80039ac:	07f9      	lsls	r1, r7, #31
 80039ae:	d508      	bpl.n	80039c2 <_dtoa_r+0x39a>
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039b8:	f7fc fe2e 	bl	8000618 <__aeabi_dmul>
 80039bc:	3501      	adds	r5, #1
 80039be:	4680      	mov	r8, r0
 80039c0:	4689      	mov	r9, r1
 80039c2:	107f      	asrs	r7, r7, #1
 80039c4:	3608      	adds	r6, #8
 80039c6:	e7e5      	b.n	8003994 <_dtoa_r+0x36c>
 80039c8:	f000 809b 	beq.w	8003b02 <_dtoa_r+0x4da>
 80039cc:	9b00      	ldr	r3, [sp, #0]
 80039ce:	4f9d      	ldr	r7, [pc, #628]	; (8003c44 <_dtoa_r+0x61c>)
 80039d0:	425e      	negs	r6, r3
 80039d2:	4b9b      	ldr	r3, [pc, #620]	; (8003c40 <_dtoa_r+0x618>)
 80039d4:	f006 020f 	and.w	r2, r6, #15
 80039d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	ec51 0b19 	vmov	r0, r1, d9
 80039e4:	f7fc fe18 	bl	8000618 <__aeabi_dmul>
 80039e8:	1136      	asrs	r6, r6, #4
 80039ea:	4682      	mov	sl, r0
 80039ec:	468b      	mov	fp, r1
 80039ee:	2300      	movs	r3, #0
 80039f0:	2502      	movs	r5, #2
 80039f2:	2e00      	cmp	r6, #0
 80039f4:	d17a      	bne.n	8003aec <_dtoa_r+0x4c4>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1d3      	bne.n	80039a2 <_dtoa_r+0x37a>
 80039fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8082 	beq.w	8003b06 <_dtoa_r+0x4de>
 8003a02:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <_dtoa_r+0x620>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	4650      	mov	r0, sl
 8003a08:	4659      	mov	r1, fp
 8003a0a:	f7fd f877 	bl	8000afc <__aeabi_dcmplt>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d079      	beq.n	8003b06 <_dtoa_r+0x4de>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d076      	beq.n	8003b06 <_dtoa_r+0x4de>
 8003a18:	9b02      	ldr	r3, [sp, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dd36      	ble.n	8003a8c <_dtoa_r+0x464>
 8003a1e:	9b00      	ldr	r3, [sp, #0]
 8003a20:	4650      	mov	r0, sl
 8003a22:	4659      	mov	r1, fp
 8003a24:	1e5f      	subs	r7, r3, #1
 8003a26:	2200      	movs	r2, #0
 8003a28:	4b88      	ldr	r3, [pc, #544]	; (8003c4c <_dtoa_r+0x624>)
 8003a2a:	f7fc fdf5 	bl	8000618 <__aeabi_dmul>
 8003a2e:	9e02      	ldr	r6, [sp, #8]
 8003a30:	4682      	mov	sl, r0
 8003a32:	468b      	mov	fp, r1
 8003a34:	3501      	adds	r5, #1
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7fc fd84 	bl	8000544 <__aeabi_i2d>
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	465b      	mov	r3, fp
 8003a40:	f7fc fdea 	bl	8000618 <__aeabi_dmul>
 8003a44:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <_dtoa_r+0x628>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	f7fc fc30 	bl	80002ac <__adddf3>
 8003a4c:	46d0      	mov	r8, sl
 8003a4e:	46d9      	mov	r9, fp
 8003a50:	4682      	mov	sl, r0
 8003a52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	d158      	bne.n	8003b0c <_dtoa_r+0x4e4>
 8003a5a:	4b7e      	ldr	r3, [pc, #504]	; (8003c54 <_dtoa_r+0x62c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4640      	mov	r0, r8
 8003a60:	4649      	mov	r1, r9
 8003a62:	f7fc fc21 	bl	80002a8 <__aeabi_dsub>
 8003a66:	4652      	mov	r2, sl
 8003a68:	465b      	mov	r3, fp
 8003a6a:	4680      	mov	r8, r0
 8003a6c:	4689      	mov	r9, r1
 8003a6e:	f7fd f863 	bl	8000b38 <__aeabi_dcmpgt>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	f040 8295 	bne.w	8003fa2 <_dtoa_r+0x97a>
 8003a78:	4652      	mov	r2, sl
 8003a7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4649      	mov	r1, r9
 8003a82:	f7fd f83b 	bl	8000afc <__aeabi_dcmplt>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	f040 8289 	bne.w	8003f9e <_dtoa_r+0x976>
 8003a8c:	ec5b ab19 	vmov	sl, fp, d9
 8003a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f2c0 8148 	blt.w	8003d28 <_dtoa_r+0x700>
 8003a98:	9a00      	ldr	r2, [sp, #0]
 8003a9a:	2a0e      	cmp	r2, #14
 8003a9c:	f300 8144 	bgt.w	8003d28 <_dtoa_r+0x700>
 8003aa0:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <_dtoa_r+0x618>)
 8003aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003aa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f280 80d5 	bge.w	8003c5c <_dtoa_r+0x634>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f300 80d1 	bgt.w	8003c5c <_dtoa_r+0x634>
 8003aba:	f040 826f 	bne.w	8003f9c <_dtoa_r+0x974>
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <_dtoa_r+0x62c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	f7fc fda7 	bl	8000618 <__aeabi_dmul>
 8003aca:	4652      	mov	r2, sl
 8003acc:	465b      	mov	r3, fp
 8003ace:	f7fd f829 	bl	8000b24 <__aeabi_dcmpge>
 8003ad2:	9e03      	ldr	r6, [sp, #12]
 8003ad4:	4637      	mov	r7, r6
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	f040 8245 	bne.w	8003f66 <_dtoa_r+0x93e>
 8003adc:	9d01      	ldr	r5, [sp, #4]
 8003ade:	2331      	movs	r3, #49	; 0x31
 8003ae0:	f805 3b01 	strb.w	r3, [r5], #1
 8003ae4:	9b00      	ldr	r3, [sp, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	e240      	b.n	8003f6e <_dtoa_r+0x946>
 8003aec:	07f2      	lsls	r2, r6, #31
 8003aee:	d505      	bpl.n	8003afc <_dtoa_r+0x4d4>
 8003af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af4:	f7fc fd90 	bl	8000618 <__aeabi_dmul>
 8003af8:	3501      	adds	r5, #1
 8003afa:	2301      	movs	r3, #1
 8003afc:	1076      	asrs	r6, r6, #1
 8003afe:	3708      	adds	r7, #8
 8003b00:	e777      	b.n	80039f2 <_dtoa_r+0x3ca>
 8003b02:	2502      	movs	r5, #2
 8003b04:	e779      	b.n	80039fa <_dtoa_r+0x3d2>
 8003b06:	9f00      	ldr	r7, [sp, #0]
 8003b08:	9e03      	ldr	r6, [sp, #12]
 8003b0a:	e794      	b.n	8003a36 <_dtoa_r+0x40e>
 8003b0c:	9901      	ldr	r1, [sp, #4]
 8003b0e:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <_dtoa_r+0x618>)
 8003b10:	4431      	add	r1, r6
 8003b12:	910d      	str	r1, [sp, #52]	; 0x34
 8003b14:	9908      	ldr	r1, [sp, #32]
 8003b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d043      	beq.n	8003baa <_dtoa_r+0x582>
 8003b22:	494d      	ldr	r1, [pc, #308]	; (8003c58 <_dtoa_r+0x630>)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7fc fea1 	bl	800086c <__aeabi_ddiv>
 8003b2a:	4652      	mov	r2, sl
 8003b2c:	465b      	mov	r3, fp
 8003b2e:	f7fc fbbb 	bl	80002a8 <__aeabi_dsub>
 8003b32:	9d01      	ldr	r5, [sp, #4]
 8003b34:	4682      	mov	sl, r0
 8003b36:	468b      	mov	fp, r1
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f7fd f81c 	bl	8000b78 <__aeabi_d2iz>
 8003b40:	4606      	mov	r6, r0
 8003b42:	f7fc fcff 	bl	8000544 <__aeabi_i2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f7fc fbab 	bl	80002a8 <__aeabi_dsub>
 8003b52:	3630      	adds	r6, #48	; 0x30
 8003b54:	f805 6b01 	strb.w	r6, [r5], #1
 8003b58:	4652      	mov	r2, sl
 8003b5a:	465b      	mov	r3, fp
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4689      	mov	r9, r1
 8003b60:	f7fc ffcc 	bl	8000afc <__aeabi_dcmplt>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d163      	bne.n	8003c30 <_dtoa_r+0x608>
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	4936      	ldr	r1, [pc, #216]	; (8003c48 <_dtoa_r+0x620>)
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fc fb9a 	bl	80002a8 <__aeabi_dsub>
 8003b74:	4652      	mov	r2, sl
 8003b76:	465b      	mov	r3, fp
 8003b78:	f7fc ffc0 	bl	8000afc <__aeabi_dcmplt>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f040 80b5 	bne.w	8003cec <_dtoa_r+0x6c4>
 8003b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b84:	429d      	cmp	r5, r3
 8003b86:	d081      	beq.n	8003a8c <_dtoa_r+0x464>
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <_dtoa_r+0x624>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	4659      	mov	r1, fp
 8003b90:	f7fc fd42 	bl	8000618 <__aeabi_dmul>
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <_dtoa_r+0x624>)
 8003b96:	4682      	mov	sl, r0
 8003b98:	468b      	mov	fp, r1
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f7fc fd3a 	bl	8000618 <__aeabi_dmul>
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	e7c6      	b.n	8003b38 <_dtoa_r+0x510>
 8003baa:	4650      	mov	r0, sl
 8003bac:	4659      	mov	r1, fp
 8003bae:	f7fc fd33 	bl	8000618 <__aeabi_dmul>
 8003bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb4:	9d01      	ldr	r5, [sp, #4]
 8003bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003bb8:	4682      	mov	sl, r0
 8003bba:	468b      	mov	fp, r1
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f7fc ffda 	bl	8000b78 <__aeabi_d2iz>
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	f7fc fcbd 	bl	8000544 <__aeabi_i2d>
 8003bca:	3630      	adds	r6, #48	; 0x30
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	f7fc fb68 	bl	80002a8 <__aeabi_dsub>
 8003bd8:	f805 6b01 	strb.w	r6, [r5], #1
 8003bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bde:	429d      	cmp	r5, r3
 8003be0:	4680      	mov	r8, r0
 8003be2:	4689      	mov	r9, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	d124      	bne.n	8003c34 <_dtoa_r+0x60c>
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <_dtoa_r+0x630>)
 8003bec:	4650      	mov	r0, sl
 8003bee:	4659      	mov	r1, fp
 8003bf0:	f7fc fb5c 	bl	80002ac <__adddf3>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	f7fc ff9c 	bl	8000b38 <__aeabi_dcmpgt>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d173      	bne.n	8003cec <_dtoa_r+0x6c4>
 8003c04:	4652      	mov	r2, sl
 8003c06:	465b      	mov	r3, fp
 8003c08:	4913      	ldr	r1, [pc, #76]	; (8003c58 <_dtoa_r+0x630>)
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fc fb4c 	bl	80002a8 <__aeabi_dsub>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4640      	mov	r0, r8
 8003c16:	4649      	mov	r1, r9
 8003c18:	f7fc ff70 	bl	8000afc <__aeabi_dcmplt>
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	f43f af35 	beq.w	8003a8c <_dtoa_r+0x464>
 8003c22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003c24:	1e6b      	subs	r3, r5, #1
 8003c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d0f8      	beq.n	8003c22 <_dtoa_r+0x5fa>
 8003c30:	9700      	str	r7, [sp, #0]
 8003c32:	e049      	b.n	8003cc8 <_dtoa_r+0x6a0>
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <_dtoa_r+0x624>)
 8003c36:	f7fc fcef 	bl	8000618 <__aeabi_dmul>
 8003c3a:	4680      	mov	r8, r0
 8003c3c:	4689      	mov	r9, r1
 8003c3e:	e7bd      	b.n	8003bbc <_dtoa_r+0x594>
 8003c40:	08006978 	.word	0x08006978
 8003c44:	08006950 	.word	0x08006950
 8003c48:	3ff00000 	.word	0x3ff00000
 8003c4c:	40240000 	.word	0x40240000
 8003c50:	401c0000 	.word	0x401c0000
 8003c54:	40140000 	.word	0x40140000
 8003c58:	3fe00000 	.word	0x3fe00000
 8003c5c:	9d01      	ldr	r5, [sp, #4]
 8003c5e:	4656      	mov	r6, sl
 8003c60:	465f      	mov	r7, fp
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc fdff 	bl	800086c <__aeabi_ddiv>
 8003c6e:	f7fc ff83 	bl	8000b78 <__aeabi_d2iz>
 8003c72:	4682      	mov	sl, r0
 8003c74:	f7fc fc66 	bl	8000544 <__aeabi_i2d>
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	f7fc fccc 	bl	8000618 <__aeabi_dmul>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4630      	mov	r0, r6
 8003c86:	4639      	mov	r1, r7
 8003c88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003c8c:	f7fc fb0c 	bl	80002a8 <__aeabi_dsub>
 8003c90:	f805 6b01 	strb.w	r6, [r5], #1
 8003c94:	9e01      	ldr	r6, [sp, #4]
 8003c96:	9f03      	ldr	r7, [sp, #12]
 8003c98:	1bae      	subs	r6, r5, r6
 8003c9a:	42b7      	cmp	r7, r6
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	d135      	bne.n	8003d0e <_dtoa_r+0x6e6>
 8003ca2:	f7fc fb03 	bl	80002ac <__adddf3>
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	464b      	mov	r3, r9
 8003caa:	4606      	mov	r6, r0
 8003cac:	460f      	mov	r7, r1
 8003cae:	f7fc ff43 	bl	8000b38 <__aeabi_dcmpgt>
 8003cb2:	b9d0      	cbnz	r0, 8003cea <_dtoa_r+0x6c2>
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	4630      	mov	r0, r6
 8003cba:	4639      	mov	r1, r7
 8003cbc:	f7fc ff14 	bl	8000ae8 <__aeabi_dcmpeq>
 8003cc0:	b110      	cbz	r0, 8003cc8 <_dtoa_r+0x6a0>
 8003cc2:	f01a 0f01 	tst.w	sl, #1
 8003cc6:	d110      	bne.n	8003cea <_dtoa_r+0x6c2>
 8003cc8:	4620      	mov	r0, r4
 8003cca:	ee18 1a10 	vmov	r1, s16
 8003cce:	f000 fd13 	bl	80046f8 <_Bfree>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9800      	ldr	r0, [sp, #0]
 8003cd6:	702b      	strb	r3, [r5, #0]
 8003cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cda:	3001      	adds	r0, #1
 8003cdc:	6018      	str	r0, [r3, #0]
 8003cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f43f acf1 	beq.w	80036c8 <_dtoa_r+0xa0>
 8003ce6:	601d      	str	r5, [r3, #0]
 8003ce8:	e4ee      	b.n	80036c8 <_dtoa_r+0xa0>
 8003cea:	9f00      	ldr	r7, [sp, #0]
 8003cec:	462b      	mov	r3, r5
 8003cee:	461d      	mov	r5, r3
 8003cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cf4:	2a39      	cmp	r2, #57	; 0x39
 8003cf6:	d106      	bne.n	8003d06 <_dtoa_r+0x6de>
 8003cf8:	9a01      	ldr	r2, [sp, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d1f7      	bne.n	8003cee <_dtoa_r+0x6c6>
 8003cfe:	9901      	ldr	r1, [sp, #4]
 8003d00:	2230      	movs	r2, #48	; 0x30
 8003d02:	3701      	adds	r7, #1
 8003d04:	700a      	strb	r2, [r1, #0]
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	3201      	adds	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e790      	b.n	8003c30 <_dtoa_r+0x608>
 8003d0e:	4ba6      	ldr	r3, [pc, #664]	; (8003fa8 <_dtoa_r+0x980>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	f7fc fc81 	bl	8000618 <__aeabi_dmul>
 8003d16:	2200      	movs	r2, #0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460f      	mov	r7, r1
 8003d1e:	f7fc fee3 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d09d      	beq.n	8003c62 <_dtoa_r+0x63a>
 8003d26:	e7cf      	b.n	8003cc8 <_dtoa_r+0x6a0>
 8003d28:	9a08      	ldr	r2, [sp, #32]
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	f000 80d7 	beq.w	8003ede <_dtoa_r+0x8b6>
 8003d30:	9a06      	ldr	r2, [sp, #24]
 8003d32:	2a01      	cmp	r2, #1
 8003d34:	f300 80ba 	bgt.w	8003eac <_dtoa_r+0x884>
 8003d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d3a:	2a00      	cmp	r2, #0
 8003d3c:	f000 80b2 	beq.w	8003ea4 <_dtoa_r+0x87c>
 8003d40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d44:	9e07      	ldr	r6, [sp, #28]
 8003d46:	9d04      	ldr	r5, [sp, #16]
 8003d48:	9a04      	ldr	r2, [sp, #16]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	9204      	str	r2, [sp, #16]
 8003d4e:	9a05      	ldr	r2, [sp, #20]
 8003d50:	2101      	movs	r1, #1
 8003d52:	441a      	add	r2, r3
 8003d54:	4620      	mov	r0, r4
 8003d56:	9205      	str	r2, [sp, #20]
 8003d58:	f000 fd86 	bl	8004868 <__i2b>
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	dd0c      	ble.n	8003d7c <_dtoa_r+0x754>
 8003d62:	9b05      	ldr	r3, [sp, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	dd09      	ble.n	8003d7c <_dtoa_r+0x754>
 8003d68:	42ab      	cmp	r3, r5
 8003d6a:	9a04      	ldr	r2, [sp, #16]
 8003d6c:	bfa8      	it	ge
 8003d6e:	462b      	movge	r3, r5
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	9204      	str	r2, [sp, #16]
 8003d74:	9a05      	ldr	r2, [sp, #20]
 8003d76:	1aed      	subs	r5, r5, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	9b07      	ldr	r3, [sp, #28]
 8003d7e:	b31b      	cbz	r3, 8003dc8 <_dtoa_r+0x7a0>
 8003d80:	9b08      	ldr	r3, [sp, #32]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80af 	beq.w	8003ee6 <_dtoa_r+0x8be>
 8003d88:	2e00      	cmp	r6, #0
 8003d8a:	dd13      	ble.n	8003db4 <_dtoa_r+0x78c>
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 fe29 	bl	80049e8 <__pow5mult>
 8003d96:	ee18 2a10 	vmov	r2, s16
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 fd78 	bl	8004894 <__multiply>
 8003da4:	ee18 1a10 	vmov	r1, s16
 8003da8:	4680      	mov	r8, r0
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 fca4 	bl	80046f8 <_Bfree>
 8003db0:	ee08 8a10 	vmov	s16, r8
 8003db4:	9b07      	ldr	r3, [sp, #28]
 8003db6:	1b9a      	subs	r2, r3, r6
 8003db8:	d006      	beq.n	8003dc8 <_dtoa_r+0x7a0>
 8003dba:	ee18 1a10 	vmov	r1, s16
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f000 fe12 	bl	80049e8 <__pow5mult>
 8003dc4:	ee08 0a10 	vmov	s16, r0
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 fd4c 	bl	8004868 <__i2b>
 8003dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	f340 8088 	ble.w	8003eea <_dtoa_r+0x8c2>
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4620      	mov	r0, r4
 8003de0:	f000 fe02 	bl	80049e8 <__pow5mult>
 8003de4:	9b06      	ldr	r3, [sp, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	4606      	mov	r6, r0
 8003dea:	f340 8081 	ble.w	8003ef0 <_dtoa_r+0x8c8>
 8003dee:	f04f 0800 	mov.w	r8, #0
 8003df2:	6933      	ldr	r3, [r6, #16]
 8003df4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003df8:	6918      	ldr	r0, [r3, #16]
 8003dfa:	f000 fce5 	bl	80047c8 <__hi0bits>
 8003dfe:	f1c0 0020 	rsb	r0, r0, #32
 8003e02:	9b05      	ldr	r3, [sp, #20]
 8003e04:	4418      	add	r0, r3
 8003e06:	f010 001f 	ands.w	r0, r0, #31
 8003e0a:	f000 8092 	beq.w	8003f32 <_dtoa_r+0x90a>
 8003e0e:	f1c0 0320 	rsb	r3, r0, #32
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	f340 808a 	ble.w	8003f2c <_dtoa_r+0x904>
 8003e18:	f1c0 001c 	rsb	r0, r0, #28
 8003e1c:	9b04      	ldr	r3, [sp, #16]
 8003e1e:	4403      	add	r3, r0
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	9b05      	ldr	r3, [sp, #20]
 8003e24:	4403      	add	r3, r0
 8003e26:	4405      	add	r5, r0
 8003e28:	9305      	str	r3, [sp, #20]
 8003e2a:	9b04      	ldr	r3, [sp, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	dd07      	ble.n	8003e40 <_dtoa_r+0x818>
 8003e30:	ee18 1a10 	vmov	r1, s16
 8003e34:	461a      	mov	r2, r3
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 fe30 	bl	8004a9c <__lshift>
 8003e3c:	ee08 0a10 	vmov	s16, r0
 8003e40:	9b05      	ldr	r3, [sp, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dd05      	ble.n	8003e52 <_dtoa_r+0x82a>
 8003e46:	4631      	mov	r1, r6
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 fe26 	bl	8004a9c <__lshift>
 8003e50:	4606      	mov	r6, r0
 8003e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d06e      	beq.n	8003f36 <_dtoa_r+0x90e>
 8003e58:	ee18 0a10 	vmov	r0, s16
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	f000 fe8d 	bl	8004b7c <__mcmp>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	da67      	bge.n	8003f36 <_dtoa_r+0x90e>
 8003e66:	9b00      	ldr	r3, [sp, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	ee18 1a10 	vmov	r1, s16
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	220a      	movs	r2, #10
 8003e72:	2300      	movs	r3, #0
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 fc61 	bl	800473c <__multadd>
 8003e7a:	9b08      	ldr	r3, [sp, #32]
 8003e7c:	ee08 0a10 	vmov	s16, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 81b1 	beq.w	80041e8 <_dtoa_r+0xbc0>
 8003e86:	2300      	movs	r3, #0
 8003e88:	4639      	mov	r1, r7
 8003e8a:	220a      	movs	r2, #10
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 fc55 	bl	800473c <__multadd>
 8003e92:	9b02      	ldr	r3, [sp, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	4607      	mov	r7, r0
 8003e98:	f300 808e 	bgt.w	8003fb8 <_dtoa_r+0x990>
 8003e9c:	9b06      	ldr	r3, [sp, #24]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	dc51      	bgt.n	8003f46 <_dtoa_r+0x91e>
 8003ea2:	e089      	b.n	8003fb8 <_dtoa_r+0x990>
 8003ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003eaa:	e74b      	b.n	8003d44 <_dtoa_r+0x71c>
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	1e5e      	subs	r6, r3, #1
 8003eb0:	9b07      	ldr	r3, [sp, #28]
 8003eb2:	42b3      	cmp	r3, r6
 8003eb4:	bfbf      	itttt	lt
 8003eb6:	9b07      	ldrlt	r3, [sp, #28]
 8003eb8:	9607      	strlt	r6, [sp, #28]
 8003eba:	1af2      	sublt	r2, r6, r3
 8003ebc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003ebe:	bfb6      	itet	lt
 8003ec0:	189b      	addlt	r3, r3, r2
 8003ec2:	1b9e      	subge	r6, r3, r6
 8003ec4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003ec6:	9b03      	ldr	r3, [sp, #12]
 8003ec8:	bfb8      	it	lt
 8003eca:	2600      	movlt	r6, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bfb7      	itett	lt
 8003ed0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003ed4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003ed8:	1a9d      	sublt	r5, r3, r2
 8003eda:	2300      	movlt	r3, #0
 8003edc:	e734      	b.n	8003d48 <_dtoa_r+0x720>
 8003ede:	9e07      	ldr	r6, [sp, #28]
 8003ee0:	9d04      	ldr	r5, [sp, #16]
 8003ee2:	9f08      	ldr	r7, [sp, #32]
 8003ee4:	e73b      	b.n	8003d5e <_dtoa_r+0x736>
 8003ee6:	9a07      	ldr	r2, [sp, #28]
 8003ee8:	e767      	b.n	8003dba <_dtoa_r+0x792>
 8003eea:	9b06      	ldr	r3, [sp, #24]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	dc18      	bgt.n	8003f22 <_dtoa_r+0x8fa>
 8003ef0:	f1ba 0f00 	cmp.w	sl, #0
 8003ef4:	d115      	bne.n	8003f22 <_dtoa_r+0x8fa>
 8003ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003efa:	b993      	cbnz	r3, 8003f22 <_dtoa_r+0x8fa>
 8003efc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003f00:	0d1b      	lsrs	r3, r3, #20
 8003f02:	051b      	lsls	r3, r3, #20
 8003f04:	b183      	cbz	r3, 8003f28 <_dtoa_r+0x900>
 8003f06:	9b04      	ldr	r3, [sp, #16]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9b05      	ldr	r3, [sp, #20]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	9305      	str	r3, [sp, #20]
 8003f12:	f04f 0801 	mov.w	r8, #1
 8003f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f af6a 	bne.w	8003df2 <_dtoa_r+0x7ca>
 8003f1e:	2001      	movs	r0, #1
 8003f20:	e76f      	b.n	8003e02 <_dtoa_r+0x7da>
 8003f22:	f04f 0800 	mov.w	r8, #0
 8003f26:	e7f6      	b.n	8003f16 <_dtoa_r+0x8ee>
 8003f28:	4698      	mov	r8, r3
 8003f2a:	e7f4      	b.n	8003f16 <_dtoa_r+0x8ee>
 8003f2c:	f43f af7d 	beq.w	8003e2a <_dtoa_r+0x802>
 8003f30:	4618      	mov	r0, r3
 8003f32:	301c      	adds	r0, #28
 8003f34:	e772      	b.n	8003e1c <_dtoa_r+0x7f4>
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dc37      	bgt.n	8003fac <_dtoa_r+0x984>
 8003f3c:	9b06      	ldr	r3, [sp, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	dd34      	ble.n	8003fac <_dtoa_r+0x984>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	9b02      	ldr	r3, [sp, #8]
 8003f48:	b96b      	cbnz	r3, 8003f66 <_dtoa_r+0x93e>
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	2205      	movs	r2, #5
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f000 fbf4 	bl	800473c <__multadd>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4606      	mov	r6, r0
 8003f58:	ee18 0a10 	vmov	r0, s16
 8003f5c:	f000 fe0e 	bl	8004b7c <__mcmp>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	f73f adbb 	bgt.w	8003adc <_dtoa_r+0x4b4>
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	9d01      	ldr	r5, [sp, #4]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	f04f 0800 	mov.w	r8, #0
 8003f72:	4631      	mov	r1, r6
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fbbf 	bl	80046f8 <_Bfree>
 8003f7a:	2f00      	cmp	r7, #0
 8003f7c:	f43f aea4 	beq.w	8003cc8 <_dtoa_r+0x6a0>
 8003f80:	f1b8 0f00 	cmp.w	r8, #0
 8003f84:	d005      	beq.n	8003f92 <_dtoa_r+0x96a>
 8003f86:	45b8      	cmp	r8, r7
 8003f88:	d003      	beq.n	8003f92 <_dtoa_r+0x96a>
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 fbb3 	bl	80046f8 <_Bfree>
 8003f92:	4639      	mov	r1, r7
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 fbaf 	bl	80046f8 <_Bfree>
 8003f9a:	e695      	b.n	8003cc8 <_dtoa_r+0x6a0>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	4637      	mov	r7, r6
 8003fa0:	e7e1      	b.n	8003f66 <_dtoa_r+0x93e>
 8003fa2:	9700      	str	r7, [sp, #0]
 8003fa4:	4637      	mov	r7, r6
 8003fa6:	e599      	b.n	8003adc <_dtoa_r+0x4b4>
 8003fa8:	40240000 	.word	0x40240000
 8003fac:	9b08      	ldr	r3, [sp, #32]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80ca 	beq.w	8004148 <_dtoa_r+0xb20>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	dd05      	ble.n	8003fc8 <_dtoa_r+0x9a0>
 8003fbc:	4639      	mov	r1, r7
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f000 fd6b 	bl	8004a9c <__lshift>
 8003fc6:	4607      	mov	r7, r0
 8003fc8:	f1b8 0f00 	cmp.w	r8, #0
 8003fcc:	d05b      	beq.n	8004086 <_dtoa_r+0xa5e>
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f000 fb51 	bl	8004678 <_Balloc>
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	b928      	cbnz	r0, 8003fe6 <_dtoa_r+0x9be>
 8003fda:	4b87      	ldr	r3, [pc, #540]	; (80041f8 <_dtoa_r+0xbd0>)
 8003fdc:	4602      	mov	r2, r0
 8003fde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003fe2:	f7ff bb3b 	b.w	800365c <_dtoa_r+0x34>
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	3202      	adds	r2, #2
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	f107 010c 	add.w	r1, r7, #12
 8003ff0:	300c      	adds	r0, #12
 8003ff2:	f000 fb33 	bl	800465c <memcpy>
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f000 fd4e 	bl	8004a9c <__lshift>
 8004000:	9b01      	ldr	r3, [sp, #4]
 8004002:	f103 0901 	add.w	r9, r3, #1
 8004006:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800400a:	4413      	add	r3, r2
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	f00a 0301 	and.w	r3, sl, #1
 8004012:	46b8      	mov	r8, r7
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	4607      	mov	r7, r0
 8004018:	4631      	mov	r1, r6
 800401a:	ee18 0a10 	vmov	r0, s16
 800401e:	f7ff fa75 	bl	800350c <quorem>
 8004022:	4641      	mov	r1, r8
 8004024:	9002      	str	r0, [sp, #8]
 8004026:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800402a:	ee18 0a10 	vmov	r0, s16
 800402e:	f000 fda5 	bl	8004b7c <__mcmp>
 8004032:	463a      	mov	r2, r7
 8004034:	9003      	str	r0, [sp, #12]
 8004036:	4631      	mov	r1, r6
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fdbb 	bl	8004bb4 <__mdiff>
 800403e:	68c2      	ldr	r2, [r0, #12]
 8004040:	f109 3bff 	add.w	fp, r9, #4294967295
 8004044:	4605      	mov	r5, r0
 8004046:	bb02      	cbnz	r2, 800408a <_dtoa_r+0xa62>
 8004048:	4601      	mov	r1, r0
 800404a:	ee18 0a10 	vmov	r0, s16
 800404e:	f000 fd95 	bl	8004b7c <__mcmp>
 8004052:	4602      	mov	r2, r0
 8004054:	4629      	mov	r1, r5
 8004056:	4620      	mov	r0, r4
 8004058:	9207      	str	r2, [sp, #28]
 800405a:	f000 fb4d 	bl	80046f8 <_Bfree>
 800405e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004062:	ea43 0102 	orr.w	r1, r3, r2
 8004066:	9b04      	ldr	r3, [sp, #16]
 8004068:	430b      	orrs	r3, r1
 800406a:	464d      	mov	r5, r9
 800406c:	d10f      	bne.n	800408e <_dtoa_r+0xa66>
 800406e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004072:	d02a      	beq.n	80040ca <_dtoa_r+0xaa2>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	dd02      	ble.n	8004080 <_dtoa_r+0xa58>
 800407a:	9b02      	ldr	r3, [sp, #8]
 800407c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004080:	f88b a000 	strb.w	sl, [fp]
 8004084:	e775      	b.n	8003f72 <_dtoa_r+0x94a>
 8004086:	4638      	mov	r0, r7
 8004088:	e7ba      	b.n	8004000 <_dtoa_r+0x9d8>
 800408a:	2201      	movs	r2, #1
 800408c:	e7e2      	b.n	8004054 <_dtoa_r+0xa2c>
 800408e:	9b03      	ldr	r3, [sp, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db04      	blt.n	800409e <_dtoa_r+0xa76>
 8004094:	9906      	ldr	r1, [sp, #24]
 8004096:	430b      	orrs	r3, r1
 8004098:	9904      	ldr	r1, [sp, #16]
 800409a:	430b      	orrs	r3, r1
 800409c:	d122      	bne.n	80040e4 <_dtoa_r+0xabc>
 800409e:	2a00      	cmp	r2, #0
 80040a0:	ddee      	ble.n	8004080 <_dtoa_r+0xa58>
 80040a2:	ee18 1a10 	vmov	r1, s16
 80040a6:	2201      	movs	r2, #1
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 fcf7 	bl	8004a9c <__lshift>
 80040ae:	4631      	mov	r1, r6
 80040b0:	ee08 0a10 	vmov	s16, r0
 80040b4:	f000 fd62 	bl	8004b7c <__mcmp>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	dc03      	bgt.n	80040c4 <_dtoa_r+0xa9c>
 80040bc:	d1e0      	bne.n	8004080 <_dtoa_r+0xa58>
 80040be:	f01a 0f01 	tst.w	sl, #1
 80040c2:	d0dd      	beq.n	8004080 <_dtoa_r+0xa58>
 80040c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80040c8:	d1d7      	bne.n	800407a <_dtoa_r+0xa52>
 80040ca:	2339      	movs	r3, #57	; 0x39
 80040cc:	f88b 3000 	strb.w	r3, [fp]
 80040d0:	462b      	mov	r3, r5
 80040d2:	461d      	mov	r5, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80040da:	2a39      	cmp	r2, #57	; 0x39
 80040dc:	d071      	beq.n	80041c2 <_dtoa_r+0xb9a>
 80040de:	3201      	adds	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e746      	b.n	8003f72 <_dtoa_r+0x94a>
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	dd07      	ble.n	80040f8 <_dtoa_r+0xad0>
 80040e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80040ec:	d0ed      	beq.n	80040ca <_dtoa_r+0xaa2>
 80040ee:	f10a 0301 	add.w	r3, sl, #1
 80040f2:	f88b 3000 	strb.w	r3, [fp]
 80040f6:	e73c      	b.n	8003f72 <_dtoa_r+0x94a>
 80040f8:	9b05      	ldr	r3, [sp, #20]
 80040fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80040fe:	4599      	cmp	r9, r3
 8004100:	d047      	beq.n	8004192 <_dtoa_r+0xb6a>
 8004102:	ee18 1a10 	vmov	r1, s16
 8004106:	2300      	movs	r3, #0
 8004108:	220a      	movs	r2, #10
 800410a:	4620      	mov	r0, r4
 800410c:	f000 fb16 	bl	800473c <__multadd>
 8004110:	45b8      	cmp	r8, r7
 8004112:	ee08 0a10 	vmov	s16, r0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	f04f 020a 	mov.w	r2, #10
 800411e:	4641      	mov	r1, r8
 8004120:	4620      	mov	r0, r4
 8004122:	d106      	bne.n	8004132 <_dtoa_r+0xb0a>
 8004124:	f000 fb0a 	bl	800473c <__multadd>
 8004128:	4680      	mov	r8, r0
 800412a:	4607      	mov	r7, r0
 800412c:	f109 0901 	add.w	r9, r9, #1
 8004130:	e772      	b.n	8004018 <_dtoa_r+0x9f0>
 8004132:	f000 fb03 	bl	800473c <__multadd>
 8004136:	4639      	mov	r1, r7
 8004138:	4680      	mov	r8, r0
 800413a:	2300      	movs	r3, #0
 800413c:	220a      	movs	r2, #10
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fafc 	bl	800473c <__multadd>
 8004144:	4607      	mov	r7, r0
 8004146:	e7f1      	b.n	800412c <_dtoa_r+0xb04>
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	9d01      	ldr	r5, [sp, #4]
 800414e:	ee18 0a10 	vmov	r0, s16
 8004152:	4631      	mov	r1, r6
 8004154:	f7ff f9da 	bl	800350c <quorem>
 8004158:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800415c:	9b01      	ldr	r3, [sp, #4]
 800415e:	f805 ab01 	strb.w	sl, [r5], #1
 8004162:	1aea      	subs	r2, r5, r3
 8004164:	9b02      	ldr	r3, [sp, #8]
 8004166:	4293      	cmp	r3, r2
 8004168:	dd09      	ble.n	800417e <_dtoa_r+0xb56>
 800416a:	ee18 1a10 	vmov	r1, s16
 800416e:	2300      	movs	r3, #0
 8004170:	220a      	movs	r2, #10
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fae2 	bl	800473c <__multadd>
 8004178:	ee08 0a10 	vmov	s16, r0
 800417c:	e7e7      	b.n	800414e <_dtoa_r+0xb26>
 800417e:	9b02      	ldr	r3, [sp, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	bfc8      	it	gt
 8004184:	461d      	movgt	r5, r3
 8004186:	9b01      	ldr	r3, [sp, #4]
 8004188:	bfd8      	it	le
 800418a:	2501      	movle	r5, #1
 800418c:	441d      	add	r5, r3
 800418e:	f04f 0800 	mov.w	r8, #0
 8004192:	ee18 1a10 	vmov	r1, s16
 8004196:	2201      	movs	r2, #1
 8004198:	4620      	mov	r0, r4
 800419a:	f000 fc7f 	bl	8004a9c <__lshift>
 800419e:	4631      	mov	r1, r6
 80041a0:	ee08 0a10 	vmov	s16, r0
 80041a4:	f000 fcea 	bl	8004b7c <__mcmp>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	dc91      	bgt.n	80040d0 <_dtoa_r+0xaa8>
 80041ac:	d102      	bne.n	80041b4 <_dtoa_r+0xb8c>
 80041ae:	f01a 0f01 	tst.w	sl, #1
 80041b2:	d18d      	bne.n	80040d0 <_dtoa_r+0xaa8>
 80041b4:	462b      	mov	r3, r5
 80041b6:	461d      	mov	r5, r3
 80041b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041bc:	2a30      	cmp	r2, #48	; 0x30
 80041be:	d0fa      	beq.n	80041b6 <_dtoa_r+0xb8e>
 80041c0:	e6d7      	b.n	8003f72 <_dtoa_r+0x94a>
 80041c2:	9a01      	ldr	r2, [sp, #4]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d184      	bne.n	80040d2 <_dtoa_r+0xaaa>
 80041c8:	9b00      	ldr	r3, [sp, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2331      	movs	r3, #49	; 0x31
 80041d0:	7013      	strb	r3, [r2, #0]
 80041d2:	e6ce      	b.n	8003f72 <_dtoa_r+0x94a>
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <_dtoa_r+0xbd4>)
 80041d6:	f7ff ba95 	b.w	8003704 <_dtoa_r+0xdc>
 80041da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f47f aa6e 	bne.w	80036be <_dtoa_r+0x96>
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <_dtoa_r+0xbd8>)
 80041e4:	f7ff ba8e 	b.w	8003704 <_dtoa_r+0xdc>
 80041e8:	9b02      	ldr	r3, [sp, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dcae      	bgt.n	800414c <_dtoa_r+0xb24>
 80041ee:	9b06      	ldr	r3, [sp, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	f73f aea8 	bgt.w	8003f46 <_dtoa_r+0x91e>
 80041f6:	e7a9      	b.n	800414c <_dtoa_r+0xb24>
 80041f8:	08006883 	.word	0x08006883
 80041fc:	080067e0 	.word	0x080067e0
 8004200:	08006804 	.word	0x08006804

08004204 <__sflush_r>:
 8004204:	898a      	ldrh	r2, [r1, #12]
 8004206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420a:	4605      	mov	r5, r0
 800420c:	0710      	lsls	r0, r2, #28
 800420e:	460c      	mov	r4, r1
 8004210:	d458      	bmi.n	80042c4 <__sflush_r+0xc0>
 8004212:	684b      	ldr	r3, [r1, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dc05      	bgt.n	8004224 <__sflush_r+0x20>
 8004218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	dc02      	bgt.n	8004224 <__sflush_r+0x20>
 800421e:	2000      	movs	r0, #0
 8004220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004226:	2e00      	cmp	r6, #0
 8004228:	d0f9      	beq.n	800421e <__sflush_r+0x1a>
 800422a:	2300      	movs	r3, #0
 800422c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004230:	682f      	ldr	r7, [r5, #0]
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	d032      	beq.n	800429c <__sflush_r+0x98>
 8004236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	075a      	lsls	r2, r3, #29
 800423c:	d505      	bpl.n	800424a <__sflush_r+0x46>
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	1ac0      	subs	r0, r0, r3
 8004242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004244:	b10b      	cbz	r3, 800424a <__sflush_r+0x46>
 8004246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004248:	1ac0      	subs	r0, r0, r3
 800424a:	2300      	movs	r3, #0
 800424c:	4602      	mov	r2, r0
 800424e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004250:	6a21      	ldr	r1, [r4, #32]
 8004252:	4628      	mov	r0, r5
 8004254:	47b0      	blx	r6
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	d106      	bne.n	800426a <__sflush_r+0x66>
 800425c:	6829      	ldr	r1, [r5, #0]
 800425e:	291d      	cmp	r1, #29
 8004260:	d82c      	bhi.n	80042bc <__sflush_r+0xb8>
 8004262:	4a2a      	ldr	r2, [pc, #168]	; (800430c <__sflush_r+0x108>)
 8004264:	40ca      	lsrs	r2, r1
 8004266:	07d6      	lsls	r6, r2, #31
 8004268:	d528      	bpl.n	80042bc <__sflush_r+0xb8>
 800426a:	2200      	movs	r2, #0
 800426c:	6062      	str	r2, [r4, #4]
 800426e:	04d9      	lsls	r1, r3, #19
 8004270:	6922      	ldr	r2, [r4, #16]
 8004272:	6022      	str	r2, [r4, #0]
 8004274:	d504      	bpl.n	8004280 <__sflush_r+0x7c>
 8004276:	1c42      	adds	r2, r0, #1
 8004278:	d101      	bne.n	800427e <__sflush_r+0x7a>
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	b903      	cbnz	r3, 8004280 <__sflush_r+0x7c>
 800427e:	6560      	str	r0, [r4, #84]	; 0x54
 8004280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004282:	602f      	str	r7, [r5, #0]
 8004284:	2900      	cmp	r1, #0
 8004286:	d0ca      	beq.n	800421e <__sflush_r+0x1a>
 8004288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800428c:	4299      	cmp	r1, r3
 800428e:	d002      	beq.n	8004296 <__sflush_r+0x92>
 8004290:	4628      	mov	r0, r5
 8004292:	f000 fd8b 	bl	8004dac <_free_r>
 8004296:	2000      	movs	r0, #0
 8004298:	6360      	str	r0, [r4, #52]	; 0x34
 800429a:	e7c1      	b.n	8004220 <__sflush_r+0x1c>
 800429c:	6a21      	ldr	r1, [r4, #32]
 800429e:	2301      	movs	r3, #1
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b0      	blx	r6
 80042a4:	1c41      	adds	r1, r0, #1
 80042a6:	d1c7      	bne.n	8004238 <__sflush_r+0x34>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0c4      	beq.n	8004238 <__sflush_r+0x34>
 80042ae:	2b1d      	cmp	r3, #29
 80042b0:	d001      	beq.n	80042b6 <__sflush_r+0xb2>
 80042b2:	2b16      	cmp	r3, #22
 80042b4:	d101      	bne.n	80042ba <__sflush_r+0xb6>
 80042b6:	602f      	str	r7, [r5, #0]
 80042b8:	e7b1      	b.n	800421e <__sflush_r+0x1a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	e7ad      	b.n	8004220 <__sflush_r+0x1c>
 80042c4:	690f      	ldr	r7, [r1, #16]
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d0a9      	beq.n	800421e <__sflush_r+0x1a>
 80042ca:	0793      	lsls	r3, r2, #30
 80042cc:	680e      	ldr	r6, [r1, #0]
 80042ce:	bf08      	it	eq
 80042d0:	694b      	ldreq	r3, [r1, #20]
 80042d2:	600f      	str	r7, [r1, #0]
 80042d4:	bf18      	it	ne
 80042d6:	2300      	movne	r3, #0
 80042d8:	eba6 0807 	sub.w	r8, r6, r7
 80042dc:	608b      	str	r3, [r1, #8]
 80042de:	f1b8 0f00 	cmp.w	r8, #0
 80042e2:	dd9c      	ble.n	800421e <__sflush_r+0x1a>
 80042e4:	6a21      	ldr	r1, [r4, #32]
 80042e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042e8:	4643      	mov	r3, r8
 80042ea:	463a      	mov	r2, r7
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b0      	blx	r6
 80042f0:	2800      	cmp	r0, #0
 80042f2:	dc06      	bgt.n	8004302 <__sflush_r+0xfe>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e78e      	b.n	8004220 <__sflush_r+0x1c>
 8004302:	4407      	add	r7, r0
 8004304:	eba8 0800 	sub.w	r8, r8, r0
 8004308:	e7e9      	b.n	80042de <__sflush_r+0xda>
 800430a:	bf00      	nop
 800430c:	20400001 	.word	0x20400001

08004310 <_fflush_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	4605      	mov	r5, r0
 8004316:	460c      	mov	r4, r1
 8004318:	b913      	cbnz	r3, 8004320 <_fflush_r+0x10>
 800431a:	2500      	movs	r5, #0
 800431c:	4628      	mov	r0, r5
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	b118      	cbz	r0, 800432a <_fflush_r+0x1a>
 8004322:	6983      	ldr	r3, [r0, #24]
 8004324:	b90b      	cbnz	r3, 800432a <_fflush_r+0x1a>
 8004326:	f000 f887 	bl	8004438 <__sinit>
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <_fflush_r+0x6c>)
 800432c:	429c      	cmp	r4, r3
 800432e:	d11b      	bne.n	8004368 <_fflush_r+0x58>
 8004330:	686c      	ldr	r4, [r5, #4]
 8004332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ef      	beq.n	800431a <_fflush_r+0xa>
 800433a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800433c:	07d0      	lsls	r0, r2, #31
 800433e:	d404      	bmi.n	800434a <_fflush_r+0x3a>
 8004340:	0599      	lsls	r1, r3, #22
 8004342:	d402      	bmi.n	800434a <_fflush_r+0x3a>
 8004344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004346:	f000 f91a 	bl	800457e <__retarget_lock_acquire_recursive>
 800434a:	4628      	mov	r0, r5
 800434c:	4621      	mov	r1, r4
 800434e:	f7ff ff59 	bl	8004204 <__sflush_r>
 8004352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004354:	07da      	lsls	r2, r3, #31
 8004356:	4605      	mov	r5, r0
 8004358:	d4e0      	bmi.n	800431c <_fflush_r+0xc>
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	059b      	lsls	r3, r3, #22
 800435e:	d4dd      	bmi.n	800431c <_fflush_r+0xc>
 8004360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004362:	f000 f90d 	bl	8004580 <__retarget_lock_release_recursive>
 8004366:	e7d9      	b.n	800431c <_fflush_r+0xc>
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <_fflush_r+0x70>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d101      	bne.n	8004372 <_fflush_r+0x62>
 800436e:	68ac      	ldr	r4, [r5, #8]
 8004370:	e7df      	b.n	8004332 <_fflush_r+0x22>
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <_fflush_r+0x74>)
 8004374:	429c      	cmp	r4, r3
 8004376:	bf08      	it	eq
 8004378:	68ec      	ldreq	r4, [r5, #12]
 800437a:	e7da      	b.n	8004332 <_fflush_r+0x22>
 800437c:	080068b4 	.word	0x080068b4
 8004380:	080068d4 	.word	0x080068d4
 8004384:	08006894 	.word	0x08006894

08004388 <std>:
 8004388:	2300      	movs	r3, #0
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
 800438e:	e9c0 3300 	strd	r3, r3, [r0]
 8004392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004396:	6083      	str	r3, [r0, #8]
 8004398:	8181      	strh	r1, [r0, #12]
 800439a:	6643      	str	r3, [r0, #100]	; 0x64
 800439c:	81c2      	strh	r2, [r0, #14]
 800439e:	6183      	str	r3, [r0, #24]
 80043a0:	4619      	mov	r1, r3
 80043a2:	2208      	movs	r2, #8
 80043a4:	305c      	adds	r0, #92	; 0x5c
 80043a6:	f7fe faf1 	bl	800298c <memset>
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <std+0x38>)
 80043ac:	6263      	str	r3, [r4, #36]	; 0x24
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <std+0x3c>)
 80043b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <std+0x40>)
 80043b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <std+0x44>)
 80043b8:	6224      	str	r4, [r4, #32]
 80043ba:	6323      	str	r3, [r4, #48]	; 0x30
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	bf00      	nop
 80043c0:	08005241 	.word	0x08005241
 80043c4:	08005263 	.word	0x08005263
 80043c8:	0800529b 	.word	0x0800529b
 80043cc:	080052bf 	.word	0x080052bf

080043d0 <_cleanup_r>:
 80043d0:	4901      	ldr	r1, [pc, #4]	; (80043d8 <_cleanup_r+0x8>)
 80043d2:	f000 b8af 	b.w	8004534 <_fwalk_reent>
 80043d6:	bf00      	nop
 80043d8:	08004311 	.word	0x08004311

080043dc <__sfmoreglue>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	2268      	movs	r2, #104	; 0x68
 80043e0:	1e4d      	subs	r5, r1, #1
 80043e2:	4355      	muls	r5, r2
 80043e4:	460e      	mov	r6, r1
 80043e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043ea:	f000 fd4b 	bl	8004e84 <_malloc_r>
 80043ee:	4604      	mov	r4, r0
 80043f0:	b140      	cbz	r0, 8004404 <__sfmoreglue+0x28>
 80043f2:	2100      	movs	r1, #0
 80043f4:	e9c0 1600 	strd	r1, r6, [r0]
 80043f8:	300c      	adds	r0, #12
 80043fa:	60a0      	str	r0, [r4, #8]
 80043fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004400:	f7fe fac4 	bl	800298c <memset>
 8004404:	4620      	mov	r0, r4
 8004406:	bd70      	pop	{r4, r5, r6, pc}

08004408 <__sfp_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__sfp_lock_acquire+0x8>)
 800440a:	f000 b8b8 	b.w	800457e <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	200002f9 	.word	0x200002f9

08004414 <__sfp_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__sfp_lock_release+0x8>)
 8004416:	f000 b8b3 	b.w	8004580 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	200002f9 	.word	0x200002f9

08004420 <__sinit_lock_acquire>:
 8004420:	4801      	ldr	r0, [pc, #4]	; (8004428 <__sinit_lock_acquire+0x8>)
 8004422:	f000 b8ac 	b.w	800457e <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	200002fa 	.word	0x200002fa

0800442c <__sinit_lock_release>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__sinit_lock_release+0x8>)
 800442e:	f000 b8a7 	b.w	8004580 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	200002fa 	.word	0x200002fa

08004438 <__sinit>:
 8004438:	b510      	push	{r4, lr}
 800443a:	4604      	mov	r4, r0
 800443c:	f7ff fff0 	bl	8004420 <__sinit_lock_acquire>
 8004440:	69a3      	ldr	r3, [r4, #24]
 8004442:	b11b      	cbz	r3, 800444c <__sinit+0x14>
 8004444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004448:	f7ff bff0 	b.w	800442c <__sinit_lock_release>
 800444c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004450:	6523      	str	r3, [r4, #80]	; 0x50
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <__sinit+0x68>)
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <__sinit+0x6c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	62a2      	str	r2, [r4, #40]	; 0x28
 800445a:	42a3      	cmp	r3, r4
 800445c:	bf04      	itt	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	61a3      	streq	r3, [r4, #24]
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f820 	bl	80044a8 <__sfp>
 8004468:	6060      	str	r0, [r4, #4]
 800446a:	4620      	mov	r0, r4
 800446c:	f000 f81c 	bl	80044a8 <__sfp>
 8004470:	60a0      	str	r0, [r4, #8]
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f818 	bl	80044a8 <__sfp>
 8004478:	2200      	movs	r2, #0
 800447a:	60e0      	str	r0, [r4, #12]
 800447c:	2104      	movs	r1, #4
 800447e:	6860      	ldr	r0, [r4, #4]
 8004480:	f7ff ff82 	bl	8004388 <std>
 8004484:	68a0      	ldr	r0, [r4, #8]
 8004486:	2201      	movs	r2, #1
 8004488:	2109      	movs	r1, #9
 800448a:	f7ff ff7d 	bl	8004388 <std>
 800448e:	68e0      	ldr	r0, [r4, #12]
 8004490:	2202      	movs	r2, #2
 8004492:	2112      	movs	r1, #18
 8004494:	f7ff ff78 	bl	8004388 <std>
 8004498:	2301      	movs	r3, #1
 800449a:	61a3      	str	r3, [r4, #24]
 800449c:	e7d2      	b.n	8004444 <__sinit+0xc>
 800449e:	bf00      	nop
 80044a0:	080067cc 	.word	0x080067cc
 80044a4:	080043d1 	.word	0x080043d1

080044a8 <__sfp>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	4607      	mov	r7, r0
 80044ac:	f7ff ffac 	bl	8004408 <__sfp_lock_acquire>
 80044b0:	4b1e      	ldr	r3, [pc, #120]	; (800452c <__sfp+0x84>)
 80044b2:	681e      	ldr	r6, [r3, #0]
 80044b4:	69b3      	ldr	r3, [r6, #24]
 80044b6:	b913      	cbnz	r3, 80044be <__sfp+0x16>
 80044b8:	4630      	mov	r0, r6
 80044ba:	f7ff ffbd 	bl	8004438 <__sinit>
 80044be:	3648      	adds	r6, #72	; 0x48
 80044c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	d503      	bpl.n	80044d0 <__sfp+0x28>
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	b30b      	cbz	r3, 8004510 <__sfp+0x68>
 80044cc:	6836      	ldr	r6, [r6, #0]
 80044ce:	e7f7      	b.n	80044c0 <__sfp+0x18>
 80044d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044d4:	b9d5      	cbnz	r5, 800450c <__sfp+0x64>
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <__sfp+0x88>)
 80044d8:	60e3      	str	r3, [r4, #12]
 80044da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044de:	6665      	str	r5, [r4, #100]	; 0x64
 80044e0:	f000 f84c 	bl	800457c <__retarget_lock_init_recursive>
 80044e4:	f7ff ff96 	bl	8004414 <__sfp_lock_release>
 80044e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044f0:	6025      	str	r5, [r4, #0]
 80044f2:	61a5      	str	r5, [r4, #24]
 80044f4:	2208      	movs	r2, #8
 80044f6:	4629      	mov	r1, r5
 80044f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044fc:	f7fe fa46 	bl	800298c <memset>
 8004500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004508:	4620      	mov	r0, r4
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450c:	3468      	adds	r4, #104	; 0x68
 800450e:	e7d9      	b.n	80044c4 <__sfp+0x1c>
 8004510:	2104      	movs	r1, #4
 8004512:	4638      	mov	r0, r7
 8004514:	f7ff ff62 	bl	80043dc <__sfmoreglue>
 8004518:	4604      	mov	r4, r0
 800451a:	6030      	str	r0, [r6, #0]
 800451c:	2800      	cmp	r0, #0
 800451e:	d1d5      	bne.n	80044cc <__sfp+0x24>
 8004520:	f7ff ff78 	bl	8004414 <__sfp_lock_release>
 8004524:	230c      	movs	r3, #12
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	e7ee      	b.n	8004508 <__sfp+0x60>
 800452a:	bf00      	nop
 800452c:	080067cc 	.word	0x080067cc
 8004530:	ffff0001 	.word	0xffff0001

08004534 <_fwalk_reent>:
 8004534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004538:	4606      	mov	r6, r0
 800453a:	4688      	mov	r8, r1
 800453c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004540:	2700      	movs	r7, #0
 8004542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004546:	f1b9 0901 	subs.w	r9, r9, #1
 800454a:	d505      	bpl.n	8004558 <_fwalk_reent+0x24>
 800454c:	6824      	ldr	r4, [r4, #0]
 800454e:	2c00      	cmp	r4, #0
 8004550:	d1f7      	bne.n	8004542 <_fwalk_reent+0xe>
 8004552:	4638      	mov	r0, r7
 8004554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004558:	89ab      	ldrh	r3, [r5, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d907      	bls.n	800456e <_fwalk_reent+0x3a>
 800455e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004562:	3301      	adds	r3, #1
 8004564:	d003      	beq.n	800456e <_fwalk_reent+0x3a>
 8004566:	4629      	mov	r1, r5
 8004568:	4630      	mov	r0, r6
 800456a:	47c0      	blx	r8
 800456c:	4307      	orrs	r7, r0
 800456e:	3568      	adds	r5, #104	; 0x68
 8004570:	e7e9      	b.n	8004546 <_fwalk_reent+0x12>
	...

08004574 <_localeconv_r>:
 8004574:	4800      	ldr	r0, [pc, #0]	; (8004578 <_localeconv_r+0x4>)
 8004576:	4770      	bx	lr
 8004578:	20000160 	.word	0x20000160

0800457c <__retarget_lock_init_recursive>:
 800457c:	4770      	bx	lr

0800457e <__retarget_lock_acquire_recursive>:
 800457e:	4770      	bx	lr

08004580 <__retarget_lock_release_recursive>:
 8004580:	4770      	bx	lr

08004582 <__swhatbuf_r>:
 8004582:	b570      	push	{r4, r5, r6, lr}
 8004584:	460e      	mov	r6, r1
 8004586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458a:	2900      	cmp	r1, #0
 800458c:	b096      	sub	sp, #88	; 0x58
 800458e:	4614      	mov	r4, r2
 8004590:	461d      	mov	r5, r3
 8004592:	da08      	bge.n	80045a6 <__swhatbuf_r+0x24>
 8004594:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	602a      	str	r2, [r5, #0]
 800459c:	061a      	lsls	r2, r3, #24
 800459e:	d410      	bmi.n	80045c2 <__swhatbuf_r+0x40>
 80045a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a4:	e00e      	b.n	80045c4 <__swhatbuf_r+0x42>
 80045a6:	466a      	mov	r2, sp
 80045a8:	f000 fee0 	bl	800536c <_fstat_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	dbf1      	blt.n	8004594 <__swhatbuf_r+0x12>
 80045b0:	9a01      	ldr	r2, [sp, #4]
 80045b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045ba:	425a      	negs	r2, r3
 80045bc:	415a      	adcs	r2, r3
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	e7ee      	b.n	80045a0 <__swhatbuf_r+0x1e>
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	2000      	movs	r0, #0
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	b016      	add	sp, #88	; 0x58
 80045ca:	bd70      	pop	{r4, r5, r6, pc}

080045cc <__smakebuf_r>:
 80045cc:	898b      	ldrh	r3, [r1, #12]
 80045ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045d0:	079d      	lsls	r5, r3, #30
 80045d2:	4606      	mov	r6, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	d507      	bpl.n	80045e8 <__smakebuf_r+0x1c>
 80045d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	2301      	movs	r3, #1
 80045e2:	6163      	str	r3, [r4, #20]
 80045e4:	b002      	add	sp, #8
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	ab01      	add	r3, sp, #4
 80045ea:	466a      	mov	r2, sp
 80045ec:	f7ff ffc9 	bl	8004582 <__swhatbuf_r>
 80045f0:	9900      	ldr	r1, [sp, #0]
 80045f2:	4605      	mov	r5, r0
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 fc45 	bl	8004e84 <_malloc_r>
 80045fa:	b948      	cbnz	r0, 8004610 <__smakebuf_r+0x44>
 80045fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004600:	059a      	lsls	r2, r3, #22
 8004602:	d4ef      	bmi.n	80045e4 <__smakebuf_r+0x18>
 8004604:	f023 0303 	bic.w	r3, r3, #3
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	e7e3      	b.n	80045d8 <__smakebuf_r+0xc>
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <__smakebuf_r+0x7c>)
 8004612:	62b3      	str	r3, [r6, #40]	; 0x28
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	9b00      	ldr	r3, [sp, #0]
 8004620:	6163      	str	r3, [r4, #20]
 8004622:	9b01      	ldr	r3, [sp, #4]
 8004624:	6120      	str	r0, [r4, #16]
 8004626:	b15b      	cbz	r3, 8004640 <__smakebuf_r+0x74>
 8004628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800462c:	4630      	mov	r0, r6
 800462e:	f000 feaf 	bl	8005390 <_isatty_r>
 8004632:	b128      	cbz	r0, 8004640 <__smakebuf_r+0x74>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	89a0      	ldrh	r0, [r4, #12]
 8004642:	4305      	orrs	r5, r0
 8004644:	81a5      	strh	r5, [r4, #12]
 8004646:	e7cd      	b.n	80045e4 <__smakebuf_r+0x18>
 8004648:	080043d1 	.word	0x080043d1

0800464c <malloc>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <malloc+0xc>)
 800464e:	4601      	mov	r1, r0
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	f000 bc17 	b.w	8004e84 <_malloc_r>
 8004656:	bf00      	nop
 8004658:	2000000c 	.word	0x2000000c

0800465c <memcpy>:
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	f100 33ff 	add.w	r3, r0, #4294967295
 8004664:	d100      	bne.n	8004668 <memcpy+0xc>
 8004666:	4770      	bx	lr
 8004668:	b510      	push	{r4, lr}
 800466a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004672:	4291      	cmp	r1, r2
 8004674:	d1f9      	bne.n	800466a <memcpy+0xe>
 8004676:	bd10      	pop	{r4, pc}

08004678 <_Balloc>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800467c:	4604      	mov	r4, r0
 800467e:	460d      	mov	r5, r1
 8004680:	b976      	cbnz	r6, 80046a0 <_Balloc+0x28>
 8004682:	2010      	movs	r0, #16
 8004684:	f7ff ffe2 	bl	800464c <malloc>
 8004688:	4602      	mov	r2, r0
 800468a:	6260      	str	r0, [r4, #36]	; 0x24
 800468c:	b920      	cbnz	r0, 8004698 <_Balloc+0x20>
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <_Balloc+0x78>)
 8004690:	4818      	ldr	r0, [pc, #96]	; (80046f4 <_Balloc+0x7c>)
 8004692:	2166      	movs	r1, #102	; 0x66
 8004694:	f000 fe2a 	bl	80052ec <__assert_func>
 8004698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800469c:	6006      	str	r6, [r0, #0]
 800469e:	60c6      	str	r6, [r0, #12]
 80046a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046a2:	68f3      	ldr	r3, [r6, #12]
 80046a4:	b183      	cbz	r3, 80046c8 <_Balloc+0x50>
 80046a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046ae:	b9b8      	cbnz	r0, 80046e0 <_Balloc+0x68>
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f605 	lsl.w	r6, r1, r5
 80046b6:	1d72      	adds	r2, r6, #5
 80046b8:	0092      	lsls	r2, r2, #2
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 fb60 	bl	8004d80 <_calloc_r>
 80046c0:	b160      	cbz	r0, 80046dc <_Balloc+0x64>
 80046c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046c6:	e00e      	b.n	80046e6 <_Balloc+0x6e>
 80046c8:	2221      	movs	r2, #33	; 0x21
 80046ca:	2104      	movs	r1, #4
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fb57 	bl	8004d80 <_calloc_r>
 80046d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d4:	60f0      	str	r0, [r6, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e4      	bne.n	80046a6 <_Balloc+0x2e>
 80046dc:	2000      	movs	r0, #0
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	6802      	ldr	r2, [r0, #0]
 80046e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046e6:	2300      	movs	r3, #0
 80046e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046ec:	e7f7      	b.n	80046de <_Balloc+0x66>
 80046ee:	bf00      	nop
 80046f0:	08006811 	.word	0x08006811
 80046f4:	080068f4 	.word	0x080068f4

080046f8 <_Bfree>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046fc:	4605      	mov	r5, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b976      	cbnz	r6, 8004720 <_Bfree+0x28>
 8004702:	2010      	movs	r0, #16
 8004704:	f7ff ffa2 	bl	800464c <malloc>
 8004708:	4602      	mov	r2, r0
 800470a:	6268      	str	r0, [r5, #36]	; 0x24
 800470c:	b920      	cbnz	r0, 8004718 <_Bfree+0x20>
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <_Bfree+0x3c>)
 8004710:	4809      	ldr	r0, [pc, #36]	; (8004738 <_Bfree+0x40>)
 8004712:	218a      	movs	r1, #138	; 0x8a
 8004714:	f000 fdea 	bl	80052ec <__assert_func>
 8004718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800471c:	6006      	str	r6, [r0, #0]
 800471e:	60c6      	str	r6, [r0, #12]
 8004720:	b13c      	cbz	r4, 8004732 <_Bfree+0x3a>
 8004722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004724:	6862      	ldr	r2, [r4, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800472c:	6021      	str	r1, [r4, #0]
 800472e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	08006811 	.word	0x08006811
 8004738:	080068f4 	.word	0x080068f4

0800473c <__multadd>:
 800473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	690d      	ldr	r5, [r1, #16]
 8004742:	4607      	mov	r7, r0
 8004744:	460c      	mov	r4, r1
 8004746:	461e      	mov	r6, r3
 8004748:	f101 0c14 	add.w	ip, r1, #20
 800474c:	2000      	movs	r0, #0
 800474e:	f8dc 3000 	ldr.w	r3, [ip]
 8004752:	b299      	uxth	r1, r3
 8004754:	fb02 6101 	mla	r1, r2, r1, r6
 8004758:	0c1e      	lsrs	r6, r3, #16
 800475a:	0c0b      	lsrs	r3, r1, #16
 800475c:	fb02 3306 	mla	r3, r2, r6, r3
 8004760:	b289      	uxth	r1, r1
 8004762:	3001      	adds	r0, #1
 8004764:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004768:	4285      	cmp	r5, r0
 800476a:	f84c 1b04 	str.w	r1, [ip], #4
 800476e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004772:	dcec      	bgt.n	800474e <__multadd+0x12>
 8004774:	b30e      	cbz	r6, 80047ba <__multadd+0x7e>
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	42ab      	cmp	r3, r5
 800477a:	dc19      	bgt.n	80047b0 <__multadd+0x74>
 800477c:	6861      	ldr	r1, [r4, #4]
 800477e:	4638      	mov	r0, r7
 8004780:	3101      	adds	r1, #1
 8004782:	f7ff ff79 	bl	8004678 <_Balloc>
 8004786:	4680      	mov	r8, r0
 8004788:	b928      	cbnz	r0, 8004796 <__multadd+0x5a>
 800478a:	4602      	mov	r2, r0
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <__multadd+0x84>)
 800478e:	480d      	ldr	r0, [pc, #52]	; (80047c4 <__multadd+0x88>)
 8004790:	21b5      	movs	r1, #181	; 0xb5
 8004792:	f000 fdab 	bl	80052ec <__assert_func>
 8004796:	6922      	ldr	r2, [r4, #16]
 8004798:	3202      	adds	r2, #2
 800479a:	f104 010c 	add.w	r1, r4, #12
 800479e:	0092      	lsls	r2, r2, #2
 80047a0:	300c      	adds	r0, #12
 80047a2:	f7ff ff5b 	bl	800465c <memcpy>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ffa5 	bl	80046f8 <_Bfree>
 80047ae:	4644      	mov	r4, r8
 80047b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047b4:	3501      	adds	r5, #1
 80047b6:	615e      	str	r6, [r3, #20]
 80047b8:	6125      	str	r5, [r4, #16]
 80047ba:	4620      	mov	r0, r4
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	08006883 	.word	0x08006883
 80047c4:	080068f4 	.word	0x080068f4

080047c8 <__hi0bits>:
 80047c8:	0c03      	lsrs	r3, r0, #16
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	b9d3      	cbnz	r3, 8004804 <__hi0bits+0x3c>
 80047ce:	0400      	lsls	r0, r0, #16
 80047d0:	2310      	movs	r3, #16
 80047d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80047d6:	bf04      	itt	eq
 80047d8:	0200      	lsleq	r0, r0, #8
 80047da:	3308      	addeq	r3, #8
 80047dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80047e0:	bf04      	itt	eq
 80047e2:	0100      	lsleq	r0, r0, #4
 80047e4:	3304      	addeq	r3, #4
 80047e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80047ea:	bf04      	itt	eq
 80047ec:	0080      	lsleq	r0, r0, #2
 80047ee:	3302      	addeq	r3, #2
 80047f0:	2800      	cmp	r0, #0
 80047f2:	db05      	blt.n	8004800 <__hi0bits+0x38>
 80047f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80047f8:	f103 0301 	add.w	r3, r3, #1
 80047fc:	bf08      	it	eq
 80047fe:	2320      	moveq	r3, #32
 8004800:	4618      	mov	r0, r3
 8004802:	4770      	bx	lr
 8004804:	2300      	movs	r3, #0
 8004806:	e7e4      	b.n	80047d2 <__hi0bits+0xa>

08004808 <__lo0bits>:
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	f013 0207 	ands.w	r2, r3, #7
 800480e:	4601      	mov	r1, r0
 8004810:	d00b      	beq.n	800482a <__lo0bits+0x22>
 8004812:	07da      	lsls	r2, r3, #31
 8004814:	d423      	bmi.n	800485e <__lo0bits+0x56>
 8004816:	0798      	lsls	r0, r3, #30
 8004818:	bf49      	itett	mi
 800481a:	085b      	lsrmi	r3, r3, #1
 800481c:	089b      	lsrpl	r3, r3, #2
 800481e:	2001      	movmi	r0, #1
 8004820:	600b      	strmi	r3, [r1, #0]
 8004822:	bf5c      	itt	pl
 8004824:	600b      	strpl	r3, [r1, #0]
 8004826:	2002      	movpl	r0, #2
 8004828:	4770      	bx	lr
 800482a:	b298      	uxth	r0, r3
 800482c:	b9a8      	cbnz	r0, 800485a <__lo0bits+0x52>
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	2010      	movs	r0, #16
 8004832:	b2da      	uxtb	r2, r3
 8004834:	b90a      	cbnz	r2, 800483a <__lo0bits+0x32>
 8004836:	3008      	adds	r0, #8
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	071a      	lsls	r2, r3, #28
 800483c:	bf04      	itt	eq
 800483e:	091b      	lsreq	r3, r3, #4
 8004840:	3004      	addeq	r0, #4
 8004842:	079a      	lsls	r2, r3, #30
 8004844:	bf04      	itt	eq
 8004846:	089b      	lsreq	r3, r3, #2
 8004848:	3002      	addeq	r0, #2
 800484a:	07da      	lsls	r2, r3, #31
 800484c:	d403      	bmi.n	8004856 <__lo0bits+0x4e>
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	f100 0001 	add.w	r0, r0, #1
 8004854:	d005      	beq.n	8004862 <__lo0bits+0x5a>
 8004856:	600b      	str	r3, [r1, #0]
 8004858:	4770      	bx	lr
 800485a:	4610      	mov	r0, r2
 800485c:	e7e9      	b.n	8004832 <__lo0bits+0x2a>
 800485e:	2000      	movs	r0, #0
 8004860:	4770      	bx	lr
 8004862:	2020      	movs	r0, #32
 8004864:	4770      	bx	lr
	...

08004868 <__i2b>:
 8004868:	b510      	push	{r4, lr}
 800486a:	460c      	mov	r4, r1
 800486c:	2101      	movs	r1, #1
 800486e:	f7ff ff03 	bl	8004678 <_Balloc>
 8004872:	4602      	mov	r2, r0
 8004874:	b928      	cbnz	r0, 8004882 <__i2b+0x1a>
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <__i2b+0x24>)
 8004878:	4805      	ldr	r0, [pc, #20]	; (8004890 <__i2b+0x28>)
 800487a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800487e:	f000 fd35 	bl	80052ec <__assert_func>
 8004882:	2301      	movs	r3, #1
 8004884:	6144      	str	r4, [r0, #20]
 8004886:	6103      	str	r3, [r0, #16]
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	08006883 	.word	0x08006883
 8004890:	080068f4 	.word	0x080068f4

08004894 <__multiply>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	4691      	mov	r9, r2
 800489a:	690a      	ldr	r2, [r1, #16]
 800489c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	bfb8      	it	lt
 80048a4:	460b      	movlt	r3, r1
 80048a6:	460c      	mov	r4, r1
 80048a8:	bfbc      	itt	lt
 80048aa:	464c      	movlt	r4, r9
 80048ac:	4699      	movlt	r9, r3
 80048ae:	6927      	ldr	r7, [r4, #16]
 80048b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80048b4:	68a3      	ldr	r3, [r4, #8]
 80048b6:	6861      	ldr	r1, [r4, #4]
 80048b8:	eb07 060a 	add.w	r6, r7, sl
 80048bc:	42b3      	cmp	r3, r6
 80048be:	b085      	sub	sp, #20
 80048c0:	bfb8      	it	lt
 80048c2:	3101      	addlt	r1, #1
 80048c4:	f7ff fed8 	bl	8004678 <_Balloc>
 80048c8:	b930      	cbnz	r0, 80048d8 <__multiply+0x44>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b44      	ldr	r3, [pc, #272]	; (80049e0 <__multiply+0x14c>)
 80048ce:	4845      	ldr	r0, [pc, #276]	; (80049e4 <__multiply+0x150>)
 80048d0:	f240 115d 	movw	r1, #349	; 0x15d
 80048d4:	f000 fd0a 	bl	80052ec <__assert_func>
 80048d8:	f100 0514 	add.w	r5, r0, #20
 80048dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80048e0:	462b      	mov	r3, r5
 80048e2:	2200      	movs	r2, #0
 80048e4:	4543      	cmp	r3, r8
 80048e6:	d321      	bcc.n	800492c <__multiply+0x98>
 80048e8:	f104 0314 	add.w	r3, r4, #20
 80048ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80048f0:	f109 0314 	add.w	r3, r9, #20
 80048f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80048f8:	9202      	str	r2, [sp, #8]
 80048fa:	1b3a      	subs	r2, r7, r4
 80048fc:	3a15      	subs	r2, #21
 80048fe:	f022 0203 	bic.w	r2, r2, #3
 8004902:	3204      	adds	r2, #4
 8004904:	f104 0115 	add.w	r1, r4, #21
 8004908:	428f      	cmp	r7, r1
 800490a:	bf38      	it	cc
 800490c:	2204      	movcc	r2, #4
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	9a02      	ldr	r2, [sp, #8]
 8004912:	9303      	str	r3, [sp, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d80c      	bhi.n	8004932 <__multiply+0x9e>
 8004918:	2e00      	cmp	r6, #0
 800491a:	dd03      	ble.n	8004924 <__multiply+0x90>
 800491c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05a      	beq.n	80049da <__multiply+0x146>
 8004924:	6106      	str	r6, [r0, #16]
 8004926:	b005      	add	sp, #20
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	f843 2b04 	str.w	r2, [r3], #4
 8004930:	e7d8      	b.n	80048e4 <__multiply+0x50>
 8004932:	f8b3 a000 	ldrh.w	sl, [r3]
 8004936:	f1ba 0f00 	cmp.w	sl, #0
 800493a:	d024      	beq.n	8004986 <__multiply+0xf2>
 800493c:	f104 0e14 	add.w	lr, r4, #20
 8004940:	46a9      	mov	r9, r5
 8004942:	f04f 0c00 	mov.w	ip, #0
 8004946:	f85e 2b04 	ldr.w	r2, [lr], #4
 800494a:	f8d9 1000 	ldr.w	r1, [r9]
 800494e:	fa1f fb82 	uxth.w	fp, r2
 8004952:	b289      	uxth	r1, r1
 8004954:	fb0a 110b 	mla	r1, sl, fp, r1
 8004958:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800495c:	f8d9 2000 	ldr.w	r2, [r9]
 8004960:	4461      	add	r1, ip
 8004962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004966:	fb0a c20b 	mla	r2, sl, fp, ip
 800496a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800496e:	b289      	uxth	r1, r1
 8004970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004974:	4577      	cmp	r7, lr
 8004976:	f849 1b04 	str.w	r1, [r9], #4
 800497a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800497e:	d8e2      	bhi.n	8004946 <__multiply+0xb2>
 8004980:	9a01      	ldr	r2, [sp, #4]
 8004982:	f845 c002 	str.w	ip, [r5, r2]
 8004986:	9a03      	ldr	r2, [sp, #12]
 8004988:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800498c:	3304      	adds	r3, #4
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	d020      	beq.n	80049d6 <__multiply+0x142>
 8004994:	6829      	ldr	r1, [r5, #0]
 8004996:	f104 0c14 	add.w	ip, r4, #20
 800499a:	46ae      	mov	lr, r5
 800499c:	f04f 0a00 	mov.w	sl, #0
 80049a0:	f8bc b000 	ldrh.w	fp, [ip]
 80049a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049a8:	fb09 220b 	mla	r2, r9, fp, r2
 80049ac:	4492      	add	sl, r2
 80049ae:	b289      	uxth	r1, r1
 80049b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80049b4:	f84e 1b04 	str.w	r1, [lr], #4
 80049b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80049bc:	f8be 1000 	ldrh.w	r1, [lr]
 80049c0:	0c12      	lsrs	r2, r2, #16
 80049c2:	fb09 1102 	mla	r1, r9, r2, r1
 80049c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80049ca:	4567      	cmp	r7, ip
 80049cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80049d0:	d8e6      	bhi.n	80049a0 <__multiply+0x10c>
 80049d2:	9a01      	ldr	r2, [sp, #4]
 80049d4:	50a9      	str	r1, [r5, r2]
 80049d6:	3504      	adds	r5, #4
 80049d8:	e79a      	b.n	8004910 <__multiply+0x7c>
 80049da:	3e01      	subs	r6, #1
 80049dc:	e79c      	b.n	8004918 <__multiply+0x84>
 80049de:	bf00      	nop
 80049e0:	08006883 	.word	0x08006883
 80049e4:	080068f4 	.word	0x080068f4

080049e8 <__pow5mult>:
 80049e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ec:	4615      	mov	r5, r2
 80049ee:	f012 0203 	ands.w	r2, r2, #3
 80049f2:	4606      	mov	r6, r0
 80049f4:	460f      	mov	r7, r1
 80049f6:	d007      	beq.n	8004a08 <__pow5mult+0x20>
 80049f8:	4c25      	ldr	r4, [pc, #148]	; (8004a90 <__pow5mult+0xa8>)
 80049fa:	3a01      	subs	r2, #1
 80049fc:	2300      	movs	r3, #0
 80049fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a02:	f7ff fe9b 	bl	800473c <__multadd>
 8004a06:	4607      	mov	r7, r0
 8004a08:	10ad      	asrs	r5, r5, #2
 8004a0a:	d03d      	beq.n	8004a88 <__pow5mult+0xa0>
 8004a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a0e:	b97c      	cbnz	r4, 8004a30 <__pow5mult+0x48>
 8004a10:	2010      	movs	r0, #16
 8004a12:	f7ff fe1b 	bl	800464c <malloc>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6270      	str	r0, [r6, #36]	; 0x24
 8004a1a:	b928      	cbnz	r0, 8004a28 <__pow5mult+0x40>
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <__pow5mult+0xac>)
 8004a1e:	481e      	ldr	r0, [pc, #120]	; (8004a98 <__pow5mult+0xb0>)
 8004a20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a24:	f000 fc62 	bl	80052ec <__assert_func>
 8004a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a2c:	6004      	str	r4, [r0, #0]
 8004a2e:	60c4      	str	r4, [r0, #12]
 8004a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a38:	b94c      	cbnz	r4, 8004a4e <__pow5mult+0x66>
 8004a3a:	f240 2171 	movw	r1, #625	; 0x271
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f7ff ff12 	bl	8004868 <__i2b>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	6003      	str	r3, [r0, #0]
 8004a4e:	f04f 0900 	mov.w	r9, #0
 8004a52:	07eb      	lsls	r3, r5, #31
 8004a54:	d50a      	bpl.n	8004a6c <__pow5mult+0x84>
 8004a56:	4639      	mov	r1, r7
 8004a58:	4622      	mov	r2, r4
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ff1a 	bl	8004894 <__multiply>
 8004a60:	4639      	mov	r1, r7
 8004a62:	4680      	mov	r8, r0
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7ff fe47 	bl	80046f8 <_Bfree>
 8004a6a:	4647      	mov	r7, r8
 8004a6c:	106d      	asrs	r5, r5, #1
 8004a6e:	d00b      	beq.n	8004a88 <__pow5mult+0xa0>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	b938      	cbnz	r0, 8004a84 <__pow5mult+0x9c>
 8004a74:	4622      	mov	r2, r4
 8004a76:	4621      	mov	r1, r4
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ff0b 	bl	8004894 <__multiply>
 8004a7e:	6020      	str	r0, [r4, #0]
 8004a80:	f8c0 9000 	str.w	r9, [r0]
 8004a84:	4604      	mov	r4, r0
 8004a86:	e7e4      	b.n	8004a52 <__pow5mult+0x6a>
 8004a88:	4638      	mov	r0, r7
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	bf00      	nop
 8004a90:	08006a40 	.word	0x08006a40
 8004a94:	08006811 	.word	0x08006811
 8004a98:	080068f4 	.word	0x080068f4

08004a9c <__lshift>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	6849      	ldr	r1, [r1, #4]
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004aaa:	68a3      	ldr	r3, [r4, #8]
 8004aac:	4607      	mov	r7, r0
 8004aae:	4691      	mov	r9, r2
 8004ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ab4:	f108 0601 	add.w	r6, r8, #1
 8004ab8:	42b3      	cmp	r3, r6
 8004aba:	db0b      	blt.n	8004ad4 <__lshift+0x38>
 8004abc:	4638      	mov	r0, r7
 8004abe:	f7ff fddb 	bl	8004678 <_Balloc>
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	b948      	cbnz	r0, 8004ada <__lshift+0x3e>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <__lshift+0xd8>)
 8004aca:	482b      	ldr	r0, [pc, #172]	; (8004b78 <__lshift+0xdc>)
 8004acc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ad0:	f000 fc0c 	bl	80052ec <__assert_func>
 8004ad4:	3101      	adds	r1, #1
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__lshift+0x1c>
 8004ada:	2300      	movs	r3, #0
 8004adc:	f100 0114 	add.w	r1, r0, #20
 8004ae0:	f100 0210 	add.w	r2, r0, #16
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	4553      	cmp	r3, sl
 8004ae8:	db37      	blt.n	8004b5a <__lshift+0xbe>
 8004aea:	6920      	ldr	r0, [r4, #16]
 8004aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004af0:	f104 0314 	add.w	r3, r4, #20
 8004af4:	f019 091f 	ands.w	r9, r9, #31
 8004af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b00:	d02f      	beq.n	8004b62 <__lshift+0xc6>
 8004b02:	f1c9 0e20 	rsb	lr, r9, #32
 8004b06:	468a      	mov	sl, r1
 8004b08:	f04f 0c00 	mov.w	ip, #0
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	fa02 f209 	lsl.w	r2, r2, r9
 8004b12:	ea42 020c 	orr.w	r2, r2, ip
 8004b16:	f84a 2b04 	str.w	r2, [sl], #4
 8004b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1e:	4298      	cmp	r0, r3
 8004b20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004b24:	d8f2      	bhi.n	8004b0c <__lshift+0x70>
 8004b26:	1b03      	subs	r3, r0, r4
 8004b28:	3b15      	subs	r3, #21
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	3304      	adds	r3, #4
 8004b30:	f104 0215 	add.w	r2, r4, #21
 8004b34:	4290      	cmp	r0, r2
 8004b36:	bf38      	it	cc
 8004b38:	2304      	movcc	r3, #4
 8004b3a:	f841 c003 	str.w	ip, [r1, r3]
 8004b3e:	f1bc 0f00 	cmp.w	ip, #0
 8004b42:	d001      	beq.n	8004b48 <__lshift+0xac>
 8004b44:	f108 0602 	add.w	r6, r8, #2
 8004b48:	3e01      	subs	r6, #1
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	612e      	str	r6, [r5, #16]
 8004b4e:	4621      	mov	r1, r4
 8004b50:	f7ff fdd2 	bl	80046f8 <_Bfree>
 8004b54:	4628      	mov	r0, r5
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b5e:	3301      	adds	r3, #1
 8004b60:	e7c1      	b.n	8004ae6 <__lshift+0x4a>
 8004b62:	3904      	subs	r1, #4
 8004b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	d8f9      	bhi.n	8004b64 <__lshift+0xc8>
 8004b70:	e7ea      	b.n	8004b48 <__lshift+0xac>
 8004b72:	bf00      	nop
 8004b74:	08006883 	.word	0x08006883
 8004b78:	080068f4 	.word	0x080068f4

08004b7c <__mcmp>:
 8004b7c:	b530      	push	{r4, r5, lr}
 8004b7e:	6902      	ldr	r2, [r0, #16]
 8004b80:	690c      	ldr	r4, [r1, #16]
 8004b82:	1b12      	subs	r2, r2, r4
 8004b84:	d10e      	bne.n	8004ba4 <__mcmp+0x28>
 8004b86:	f100 0314 	add.w	r3, r0, #20
 8004b8a:	3114      	adds	r1, #20
 8004b8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004b90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004b94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004b98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004b9c:	42a5      	cmp	r5, r4
 8004b9e:	d003      	beq.n	8004ba8 <__mcmp+0x2c>
 8004ba0:	d305      	bcc.n	8004bae <__mcmp+0x32>
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	bd30      	pop	{r4, r5, pc}
 8004ba8:	4283      	cmp	r3, r0
 8004baa:	d3f3      	bcc.n	8004b94 <__mcmp+0x18>
 8004bac:	e7fa      	b.n	8004ba4 <__mcmp+0x28>
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	e7f7      	b.n	8004ba4 <__mcmp+0x28>

08004bb4 <__mdiff>:
 8004bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	460c      	mov	r4, r1
 8004bba:	4606      	mov	r6, r0
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4690      	mov	r8, r2
 8004bc2:	f7ff ffdb 	bl	8004b7c <__mcmp>
 8004bc6:	1e05      	subs	r5, r0, #0
 8004bc8:	d110      	bne.n	8004bec <__mdiff+0x38>
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff fd53 	bl	8004678 <_Balloc>
 8004bd2:	b930      	cbnz	r0, 8004be2 <__mdiff+0x2e>
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <__mdiff+0x10c>)
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f240 2132 	movw	r1, #562	; 0x232
 8004bdc:	4839      	ldr	r0, [pc, #228]	; (8004cc4 <__mdiff+0x110>)
 8004bde:	f000 fb85 	bl	80052ec <__assert_func>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	bfa4      	itt	ge
 8004bee:	4643      	movge	r3, r8
 8004bf0:	46a0      	movge	r8, r4
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004bf8:	bfa6      	itte	ge
 8004bfa:	461c      	movge	r4, r3
 8004bfc:	2500      	movge	r5, #0
 8004bfe:	2501      	movlt	r5, #1
 8004c00:	f7ff fd3a 	bl	8004678 <_Balloc>
 8004c04:	b920      	cbnz	r0, 8004c10 <__mdiff+0x5c>
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <__mdiff+0x10c>)
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c0e:	e7e5      	b.n	8004bdc <__mdiff+0x28>
 8004c10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c14:	6926      	ldr	r6, [r4, #16]
 8004c16:	60c5      	str	r5, [r0, #12]
 8004c18:	f104 0914 	add.w	r9, r4, #20
 8004c1c:	f108 0514 	add.w	r5, r8, #20
 8004c20:	f100 0e14 	add.w	lr, r0, #20
 8004c24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004c28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c2c:	f108 0210 	add.w	r2, r8, #16
 8004c30:	46f2      	mov	sl, lr
 8004c32:	2100      	movs	r1, #0
 8004c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c3c:	fa1f f883 	uxth.w	r8, r3
 8004c40:	fa11 f18b 	uxtah	r1, r1, fp
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	eba1 0808 	sub.w	r8, r1, r8
 8004c4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c52:	fa1f f888 	uxth.w	r8, r8
 8004c56:	1419      	asrs	r1, r3, #16
 8004c58:	454e      	cmp	r6, r9
 8004c5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c5e:	f84a 3b04 	str.w	r3, [sl], #4
 8004c62:	d8e7      	bhi.n	8004c34 <__mdiff+0x80>
 8004c64:	1b33      	subs	r3, r6, r4
 8004c66:	3b15      	subs	r3, #21
 8004c68:	f023 0303 	bic.w	r3, r3, #3
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	3415      	adds	r4, #21
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	bf38      	it	cc
 8004c74:	2304      	movcc	r3, #4
 8004c76:	441d      	add	r5, r3
 8004c78:	4473      	add	r3, lr
 8004c7a:	469e      	mov	lr, r3
 8004c7c:	462e      	mov	r6, r5
 8004c7e:	4566      	cmp	r6, ip
 8004c80:	d30e      	bcc.n	8004ca0 <__mdiff+0xec>
 8004c82:	f10c 0203 	add.w	r2, ip, #3
 8004c86:	1b52      	subs	r2, r2, r5
 8004c88:	f022 0203 	bic.w	r2, r2, #3
 8004c8c:	3d03      	subs	r5, #3
 8004c8e:	45ac      	cmp	ip, r5
 8004c90:	bf38      	it	cc
 8004c92:	2200      	movcc	r2, #0
 8004c94:	441a      	add	r2, r3
 8004c96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004c9a:	b17b      	cbz	r3, 8004cbc <__mdiff+0x108>
 8004c9c:	6107      	str	r7, [r0, #16]
 8004c9e:	e7a3      	b.n	8004be8 <__mdiff+0x34>
 8004ca0:	f856 8b04 	ldr.w	r8, [r6], #4
 8004ca4:	fa11 f288 	uxtah	r2, r1, r8
 8004ca8:	1414      	asrs	r4, r2, #16
 8004caa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004cb4:	f84e 2b04 	str.w	r2, [lr], #4
 8004cb8:	1421      	asrs	r1, r4, #16
 8004cba:	e7e0      	b.n	8004c7e <__mdiff+0xca>
 8004cbc:	3f01      	subs	r7, #1
 8004cbe:	e7ea      	b.n	8004c96 <__mdiff+0xe2>
 8004cc0:	08006883 	.word	0x08006883
 8004cc4:	080068f4 	.word	0x080068f4

08004cc8 <__d2b>:
 8004cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	4689      	mov	r9, r1
 8004cce:	2101      	movs	r1, #1
 8004cd0:	ec57 6b10 	vmov	r6, r7, d0
 8004cd4:	4690      	mov	r8, r2
 8004cd6:	f7ff fccf 	bl	8004678 <_Balloc>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	b930      	cbnz	r0, 8004cec <__d2b+0x24>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <__d2b+0xb0>)
 8004ce2:	4826      	ldr	r0, [pc, #152]	; (8004d7c <__d2b+0xb4>)
 8004ce4:	f240 310a 	movw	r1, #778	; 0x30a
 8004ce8:	f000 fb00 	bl	80052ec <__assert_func>
 8004cec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004cf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cf4:	bb35      	cbnz	r5, 8004d44 <__d2b+0x7c>
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	d028      	beq.n	8004d4e <__d2b+0x86>
 8004cfc:	4668      	mov	r0, sp
 8004cfe:	9600      	str	r6, [sp, #0]
 8004d00:	f7ff fd82 	bl	8004808 <__lo0bits>
 8004d04:	9900      	ldr	r1, [sp, #0]
 8004d06:	b300      	cbz	r0, 8004d4a <__d2b+0x82>
 8004d08:	9a01      	ldr	r2, [sp, #4]
 8004d0a:	f1c0 0320 	rsb	r3, r0, #32
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	430b      	orrs	r3, r1
 8004d14:	40c2      	lsrs	r2, r0
 8004d16:	6163      	str	r3, [r4, #20]
 8004d18:	9201      	str	r2, [sp, #4]
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	61a3      	str	r3, [r4, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2202      	movne	r2, #2
 8004d24:	2201      	moveq	r2, #1
 8004d26:	6122      	str	r2, [r4, #16]
 8004d28:	b1d5      	cbz	r5, 8004d60 <__d2b+0x98>
 8004d2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d2e:	4405      	add	r5, r0
 8004d30:	f8c9 5000 	str.w	r5, [r9]
 8004d34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d38:	f8c8 0000 	str.w	r0, [r8]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	b003      	add	sp, #12
 8004d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d48:	e7d5      	b.n	8004cf6 <__d2b+0x2e>
 8004d4a:	6161      	str	r1, [r4, #20]
 8004d4c:	e7e5      	b.n	8004d1a <__d2b+0x52>
 8004d4e:	a801      	add	r0, sp, #4
 8004d50:	f7ff fd5a 	bl	8004808 <__lo0bits>
 8004d54:	9b01      	ldr	r3, [sp, #4]
 8004d56:	6163      	str	r3, [r4, #20]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	6122      	str	r2, [r4, #16]
 8004d5c:	3020      	adds	r0, #32
 8004d5e:	e7e3      	b.n	8004d28 <__d2b+0x60>
 8004d60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d68:	f8c9 0000 	str.w	r0, [r9]
 8004d6c:	6918      	ldr	r0, [r3, #16]
 8004d6e:	f7ff fd2b 	bl	80047c8 <__hi0bits>
 8004d72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004d76:	e7df      	b.n	8004d38 <__d2b+0x70>
 8004d78:	08006883 	.word	0x08006883
 8004d7c:	080068f4 	.word	0x080068f4

08004d80 <_calloc_r>:
 8004d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d82:	fba1 2402 	umull	r2, r4, r1, r2
 8004d86:	b94c      	cbnz	r4, 8004d9c <_calloc_r+0x1c>
 8004d88:	4611      	mov	r1, r2
 8004d8a:	9201      	str	r2, [sp, #4]
 8004d8c:	f000 f87a 	bl	8004e84 <_malloc_r>
 8004d90:	9a01      	ldr	r2, [sp, #4]
 8004d92:	4605      	mov	r5, r0
 8004d94:	b930      	cbnz	r0, 8004da4 <_calloc_r+0x24>
 8004d96:	4628      	mov	r0, r5
 8004d98:	b003      	add	sp, #12
 8004d9a:	bd30      	pop	{r4, r5, pc}
 8004d9c:	220c      	movs	r2, #12
 8004d9e:	6002      	str	r2, [r0, #0]
 8004da0:	2500      	movs	r5, #0
 8004da2:	e7f8      	b.n	8004d96 <_calloc_r+0x16>
 8004da4:	4621      	mov	r1, r4
 8004da6:	f7fd fdf1 	bl	800298c <memset>
 8004daa:	e7f4      	b.n	8004d96 <_calloc_r+0x16>

08004dac <_free_r>:
 8004dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d044      	beq.n	8004e3c <_free_r+0x90>
 8004db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db6:	9001      	str	r0, [sp, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f1a1 0404 	sub.w	r4, r1, #4
 8004dbe:	bfb8      	it	lt
 8004dc0:	18e4      	addlt	r4, r4, r3
 8004dc2:	f000 fb19 	bl	80053f8 <__malloc_lock>
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <_free_r+0x94>)
 8004dc8:	9801      	ldr	r0, [sp, #4]
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x30>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	b003      	add	sp, #12
 8004dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dd8:	f000 bb14 	b.w	8005404 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x46>
 8004de0:	6825      	ldr	r5, [r4, #0]
 8004de2:	1961      	adds	r1, r4, r5
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1949      	addeq	r1, r1, r5
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x22>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x50>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x46>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1855      	adds	r5, r2, r1
 8004e00:	42a5      	cmp	r5, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x70>
 8004e04:	6824      	ldr	r4, [r4, #0]
 8004e06:	4421      	add	r1, r4
 8004e08:	1854      	adds	r4, r2, r1
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x26>
 8004e10:	681c      	ldr	r4, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	4421      	add	r1, r4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x26>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x78>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x26>
 8004e24:	6825      	ldr	r5, [r4, #0]
 8004e26:	1961      	adds	r1, r4, r5
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf04      	itt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	bf04      	itt	eq
 8004e34:	1949      	addeq	r1, r1, r5
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	6054      	str	r4, [r2, #4]
 8004e3a:	e7ca      	b.n	8004dd2 <_free_r+0x26>
 8004e3c:	b003      	add	sp, #12
 8004e3e:	bd30      	pop	{r4, r5, pc}
 8004e40:	200002fc 	.word	0x200002fc

08004e44 <sbrk_aligned>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4e0e      	ldr	r6, [pc, #56]	; (8004e80 <sbrk_aligned+0x3c>)
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b911      	cbnz	r1, 8004e56 <sbrk_aligned+0x12>
 8004e50:	f000 f9e6 	bl	8005220 <_sbrk_r>
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 f9e1 	bl	8005220 <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d00a      	beq.n	8004e78 <sbrk_aligned+0x34>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d007      	beq.n	8004e7c <sbrk_aligned+0x38>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 f9d6 	bl	8005220 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d101      	bne.n	8004e7c <sbrk_aligned+0x38>
 8004e78:	f04f 34ff 	mov.w	r4, #4294967295
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	20000300 	.word	0x20000300

08004e84 <_malloc_r>:
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	1ccd      	adds	r5, r1, #3
 8004e8a:	f025 0503 	bic.w	r5, r5, #3
 8004e8e:	3508      	adds	r5, #8
 8004e90:	2d0c      	cmp	r5, #12
 8004e92:	bf38      	it	cc
 8004e94:	250c      	movcc	r5, #12
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	4607      	mov	r7, r0
 8004e9a:	db01      	blt.n	8004ea0 <_malloc_r+0x1c>
 8004e9c:	42a9      	cmp	r1, r5
 8004e9e:	d905      	bls.n	8004eac <_malloc_r+0x28>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eac:	4e2e      	ldr	r6, [pc, #184]	; (8004f68 <_malloc_r+0xe4>)
 8004eae:	f000 faa3 	bl	80053f8 <__malloc_lock>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	bb34      	cbnz	r4, 8004f06 <_malloc_r+0x82>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f7ff ffc2 	bl	8004e44 <sbrk_aligned>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	d14d      	bne.n	8004f62 <_malloc_r+0xde>
 8004ec6:	6834      	ldr	r4, [r6, #0]
 8004ec8:	4626      	mov	r6, r4
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d140      	bne.n	8004f50 <_malloc_r+0xcc>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	eb04 0803 	add.w	r8, r4, r3
 8004ed8:	f000 f9a2 	bl	8005220 <_sbrk_r>
 8004edc:	4580      	cmp	r8, r0
 8004ede:	d13a      	bne.n	8004f56 <_malloc_r+0xd2>
 8004ee0:	6821      	ldr	r1, [r4, #0]
 8004ee2:	3503      	adds	r5, #3
 8004ee4:	1a6d      	subs	r5, r5, r1
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	f7ff ffa5 	bl	8004e44 <sbrk_aligned>
 8004efa:	3001      	adds	r0, #1
 8004efc:	d02b      	beq.n	8004f56 <_malloc_r+0xd2>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	442b      	add	r3, r5
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	e00e      	b.n	8004f24 <_malloc_r+0xa0>
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	1b52      	subs	r2, r2, r5
 8004f0a:	d41e      	bmi.n	8004f4a <_malloc_r+0xc6>
 8004f0c:	2a0b      	cmp	r2, #11
 8004f0e:	d916      	bls.n	8004f3e <_malloc_r+0xba>
 8004f10:	1961      	adds	r1, r4, r5
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	6025      	str	r5, [r4, #0]
 8004f16:	bf18      	it	ne
 8004f18:	6059      	strne	r1, [r3, #4]
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	bf08      	it	eq
 8004f1e:	6031      	streq	r1, [r6, #0]
 8004f20:	5162      	str	r2, [r4, r5]
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	4638      	mov	r0, r7
 8004f26:	f104 060b 	add.w	r6, r4, #11
 8004f2a:	f000 fa6b 	bl	8005404 <__malloc_unlock>
 8004f2e:	f026 0607 	bic.w	r6, r6, #7
 8004f32:	1d23      	adds	r3, r4, #4
 8004f34:	1af2      	subs	r2, r6, r3
 8004f36:	d0b6      	beq.n	8004ea6 <_malloc_r+0x22>
 8004f38:	1b9b      	subs	r3, r3, r6
 8004f3a:	50a3      	str	r3, [r4, r2]
 8004f3c:	e7b3      	b.n	8004ea6 <_malloc_r+0x22>
 8004f3e:	6862      	ldr	r2, [r4, #4]
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	bf0c      	ite	eq
 8004f44:	6032      	streq	r2, [r6, #0]
 8004f46:	605a      	strne	r2, [r3, #4]
 8004f48:	e7ec      	b.n	8004f24 <_malloc_r+0xa0>
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	6864      	ldr	r4, [r4, #4]
 8004f4e:	e7b2      	b.n	8004eb6 <_malloc_r+0x32>
 8004f50:	4634      	mov	r4, r6
 8004f52:	6876      	ldr	r6, [r6, #4]
 8004f54:	e7b9      	b.n	8004eca <_malloc_r+0x46>
 8004f56:	230c      	movs	r3, #12
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f000 fa52 	bl	8005404 <__malloc_unlock>
 8004f60:	e7a1      	b.n	8004ea6 <_malloc_r+0x22>
 8004f62:	6025      	str	r5, [r4, #0]
 8004f64:	e7de      	b.n	8004f24 <_malloc_r+0xa0>
 8004f66:	bf00      	nop
 8004f68:	200002fc 	.word	0x200002fc

08004f6c <__sfputc_r>:
 8004f6c:	6893      	ldr	r3, [r2, #8]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	b410      	push	{r4}
 8004f74:	6093      	str	r3, [r2, #8]
 8004f76:	da08      	bge.n	8004f8a <__sfputc_r+0x1e>
 8004f78:	6994      	ldr	r4, [r2, #24]
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	db01      	blt.n	8004f82 <__sfputc_r+0x16>
 8004f7e:	290a      	cmp	r1, #10
 8004f80:	d103      	bne.n	8004f8a <__sfputc_r+0x1e>
 8004f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f86:	f7fe ba01 	b.w	800338c <__swbuf_r>
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	1c58      	adds	r0, r3, #1
 8004f8e:	6010      	str	r0, [r2, #0]
 8004f90:	7019      	strb	r1, [r3, #0]
 8004f92:	4608      	mov	r0, r1
 8004f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <__sfputs_r>:
 8004f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	18d5      	adds	r5, r2, r3
 8004fa4:	42ac      	cmp	r4, r5
 8004fa6:	d101      	bne.n	8004fac <__sfputs_r+0x12>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e007      	b.n	8004fbc <__sfputs_r+0x22>
 8004fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb0:	463a      	mov	r2, r7
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7ff ffda 	bl	8004f6c <__sfputc_r>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d1f3      	bne.n	8004fa4 <__sfputs_r+0xa>
 8004fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fc0 <_vfiprintf_r>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	460d      	mov	r5, r1
 8004fc6:	b09d      	sub	sp, #116	; 0x74
 8004fc8:	4614      	mov	r4, r2
 8004fca:	4698      	mov	r8, r3
 8004fcc:	4606      	mov	r6, r0
 8004fce:	b118      	cbz	r0, 8004fd8 <_vfiprintf_r+0x18>
 8004fd0:	6983      	ldr	r3, [r0, #24]
 8004fd2:	b90b      	cbnz	r3, 8004fd8 <_vfiprintf_r+0x18>
 8004fd4:	f7ff fa30 	bl	8004438 <__sinit>
 8004fd8:	4b89      	ldr	r3, [pc, #548]	; (8005200 <_vfiprintf_r+0x240>)
 8004fda:	429d      	cmp	r5, r3
 8004fdc:	d11b      	bne.n	8005016 <_vfiprintf_r+0x56>
 8004fde:	6875      	ldr	r5, [r6, #4]
 8004fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fe2:	07d9      	lsls	r1, r3, #31
 8004fe4:	d405      	bmi.n	8004ff2 <_vfiprintf_r+0x32>
 8004fe6:	89ab      	ldrh	r3, [r5, #12]
 8004fe8:	059a      	lsls	r2, r3, #22
 8004fea:	d402      	bmi.n	8004ff2 <_vfiprintf_r+0x32>
 8004fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fee:	f7ff fac6 	bl	800457e <__retarget_lock_acquire_recursive>
 8004ff2:	89ab      	ldrh	r3, [r5, #12]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	d501      	bpl.n	8004ffc <_vfiprintf_r+0x3c>
 8004ff8:	692b      	ldr	r3, [r5, #16]
 8004ffa:	b9eb      	cbnz	r3, 8005038 <_vfiprintf_r+0x78>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7fe fa16 	bl	8003430 <__swsetup_r>
 8005004:	b1c0      	cbz	r0, 8005038 <_vfiprintf_r+0x78>
 8005006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005008:	07dc      	lsls	r4, r3, #31
 800500a:	d50e      	bpl.n	800502a <_vfiprintf_r+0x6a>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	b01d      	add	sp, #116	; 0x74
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005016:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <_vfiprintf_r+0x244>)
 8005018:	429d      	cmp	r5, r3
 800501a:	d101      	bne.n	8005020 <_vfiprintf_r+0x60>
 800501c:	68b5      	ldr	r5, [r6, #8]
 800501e:	e7df      	b.n	8004fe0 <_vfiprintf_r+0x20>
 8005020:	4b79      	ldr	r3, [pc, #484]	; (8005208 <_vfiprintf_r+0x248>)
 8005022:	429d      	cmp	r5, r3
 8005024:	bf08      	it	eq
 8005026:	68f5      	ldreq	r5, [r6, #12]
 8005028:	e7da      	b.n	8004fe0 <_vfiprintf_r+0x20>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	0598      	lsls	r0, r3, #22
 800502e:	d4ed      	bmi.n	800500c <_vfiprintf_r+0x4c>
 8005030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005032:	f7ff faa5 	bl	8004580 <__retarget_lock_release_recursive>
 8005036:	e7e9      	b.n	800500c <_vfiprintf_r+0x4c>
 8005038:	2300      	movs	r3, #0
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	2320      	movs	r3, #32
 800503e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005042:	f8cd 800c 	str.w	r8, [sp, #12]
 8005046:	2330      	movs	r3, #48	; 0x30
 8005048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800520c <_vfiprintf_r+0x24c>
 800504c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005050:	f04f 0901 	mov.w	r9, #1
 8005054:	4623      	mov	r3, r4
 8005056:	469a      	mov	sl, r3
 8005058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505c:	b10a      	cbz	r2, 8005062 <_vfiprintf_r+0xa2>
 800505e:	2a25      	cmp	r2, #37	; 0x25
 8005060:	d1f9      	bne.n	8005056 <_vfiprintf_r+0x96>
 8005062:	ebba 0b04 	subs.w	fp, sl, r4
 8005066:	d00b      	beq.n	8005080 <_vfiprintf_r+0xc0>
 8005068:	465b      	mov	r3, fp
 800506a:	4622      	mov	r2, r4
 800506c:	4629      	mov	r1, r5
 800506e:	4630      	mov	r0, r6
 8005070:	f7ff ff93 	bl	8004f9a <__sfputs_r>
 8005074:	3001      	adds	r0, #1
 8005076:	f000 80aa 	beq.w	80051ce <_vfiprintf_r+0x20e>
 800507a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507c:	445a      	add	r2, fp
 800507e:	9209      	str	r2, [sp, #36]	; 0x24
 8005080:	f89a 3000 	ldrb.w	r3, [sl]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80a2 	beq.w	80051ce <_vfiprintf_r+0x20e>
 800508a:	2300      	movs	r3, #0
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005094:	f10a 0a01 	add.w	sl, sl, #1
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a0:	931a      	str	r3, [sp, #104]	; 0x68
 80050a2:	4654      	mov	r4, sl
 80050a4:	2205      	movs	r2, #5
 80050a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050aa:	4858      	ldr	r0, [pc, #352]	; (800520c <_vfiprintf_r+0x24c>)
 80050ac:	f7fb f8a8 	bl	8000200 <memchr>
 80050b0:	9a04      	ldr	r2, [sp, #16]
 80050b2:	b9d8      	cbnz	r0, 80050ec <_vfiprintf_r+0x12c>
 80050b4:	06d1      	lsls	r1, r2, #27
 80050b6:	bf44      	itt	mi
 80050b8:	2320      	movmi	r3, #32
 80050ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050be:	0713      	lsls	r3, r2, #28
 80050c0:	bf44      	itt	mi
 80050c2:	232b      	movmi	r3, #43	; 0x2b
 80050c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c8:	f89a 3000 	ldrb.w	r3, [sl]
 80050cc:	2b2a      	cmp	r3, #42	; 0x2a
 80050ce:	d015      	beq.n	80050fc <_vfiprintf_r+0x13c>
 80050d0:	9a07      	ldr	r2, [sp, #28]
 80050d2:	4654      	mov	r4, sl
 80050d4:	2000      	movs	r0, #0
 80050d6:	f04f 0c0a 	mov.w	ip, #10
 80050da:	4621      	mov	r1, r4
 80050dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e0:	3b30      	subs	r3, #48	; 0x30
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d94e      	bls.n	8005184 <_vfiprintf_r+0x1c4>
 80050e6:	b1b0      	cbz	r0, 8005116 <_vfiprintf_r+0x156>
 80050e8:	9207      	str	r2, [sp, #28]
 80050ea:	e014      	b.n	8005116 <_vfiprintf_r+0x156>
 80050ec:	eba0 0308 	sub.w	r3, r0, r8
 80050f0:	fa09 f303 	lsl.w	r3, r9, r3
 80050f4:	4313      	orrs	r3, r2
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	46a2      	mov	sl, r4
 80050fa:	e7d2      	b.n	80050a2 <_vfiprintf_r+0xe2>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	1d19      	adds	r1, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	9103      	str	r1, [sp, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	bfbb      	ittet	lt
 8005108:	425b      	neglt	r3, r3
 800510a:	f042 0202 	orrlt.w	r2, r2, #2
 800510e:	9307      	strge	r3, [sp, #28]
 8005110:	9307      	strlt	r3, [sp, #28]
 8005112:	bfb8      	it	lt
 8005114:	9204      	strlt	r2, [sp, #16]
 8005116:	7823      	ldrb	r3, [r4, #0]
 8005118:	2b2e      	cmp	r3, #46	; 0x2e
 800511a:	d10c      	bne.n	8005136 <_vfiprintf_r+0x176>
 800511c:	7863      	ldrb	r3, [r4, #1]
 800511e:	2b2a      	cmp	r3, #42	; 0x2a
 8005120:	d135      	bne.n	800518e <_vfiprintf_r+0x1ce>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	9203      	str	r2, [sp, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfb8      	it	lt
 800512e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005132:	3402      	adds	r4, #2
 8005134:	9305      	str	r3, [sp, #20]
 8005136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800521c <_vfiprintf_r+0x25c>
 800513a:	7821      	ldrb	r1, [r4, #0]
 800513c:	2203      	movs	r2, #3
 800513e:	4650      	mov	r0, sl
 8005140:	f7fb f85e 	bl	8000200 <memchr>
 8005144:	b140      	cbz	r0, 8005158 <_vfiprintf_r+0x198>
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	eba0 000a 	sub.w	r0, r0, sl
 800514c:	fa03 f000 	lsl.w	r0, r3, r0
 8005150:	9b04      	ldr	r3, [sp, #16]
 8005152:	4303      	orrs	r3, r0
 8005154:	3401      	adds	r4, #1
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	482c      	ldr	r0, [pc, #176]	; (8005210 <_vfiprintf_r+0x250>)
 800515e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005162:	2206      	movs	r2, #6
 8005164:	f7fb f84c 	bl	8000200 <memchr>
 8005168:	2800      	cmp	r0, #0
 800516a:	d03f      	beq.n	80051ec <_vfiprintf_r+0x22c>
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <_vfiprintf_r+0x254>)
 800516e:	bb1b      	cbnz	r3, 80051b8 <_vfiprintf_r+0x1f8>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	3307      	adds	r3, #7
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	3308      	adds	r3, #8
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517e:	443b      	add	r3, r7
 8005180:	9309      	str	r3, [sp, #36]	; 0x24
 8005182:	e767      	b.n	8005054 <_vfiprintf_r+0x94>
 8005184:	fb0c 3202 	mla	r2, ip, r2, r3
 8005188:	460c      	mov	r4, r1
 800518a:	2001      	movs	r0, #1
 800518c:	e7a5      	b.n	80050da <_vfiprintf_r+0x11a>
 800518e:	2300      	movs	r3, #0
 8005190:	3401      	adds	r4, #1
 8005192:	9305      	str	r3, [sp, #20]
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0c0a 	mov.w	ip, #10
 800519a:	4620      	mov	r0, r4
 800519c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a0:	3a30      	subs	r2, #48	; 0x30
 80051a2:	2a09      	cmp	r2, #9
 80051a4:	d903      	bls.n	80051ae <_vfiprintf_r+0x1ee>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c5      	beq.n	8005136 <_vfiprintf_r+0x176>
 80051aa:	9105      	str	r1, [sp, #20]
 80051ac:	e7c3      	b.n	8005136 <_vfiprintf_r+0x176>
 80051ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b2:	4604      	mov	r4, r0
 80051b4:	2301      	movs	r3, #1
 80051b6:	e7f0      	b.n	800519a <_vfiprintf_r+0x1da>
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	462a      	mov	r2, r5
 80051be:	4b16      	ldr	r3, [pc, #88]	; (8005218 <_vfiprintf_r+0x258>)
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7fd fc8a 	bl	8002adc <_printf_float>
 80051c8:	4607      	mov	r7, r0
 80051ca:	1c78      	adds	r0, r7, #1
 80051cc:	d1d6      	bne.n	800517c <_vfiprintf_r+0x1bc>
 80051ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d0:	07d9      	lsls	r1, r3, #31
 80051d2:	d405      	bmi.n	80051e0 <_vfiprintf_r+0x220>
 80051d4:	89ab      	ldrh	r3, [r5, #12]
 80051d6:	059a      	lsls	r2, r3, #22
 80051d8:	d402      	bmi.n	80051e0 <_vfiprintf_r+0x220>
 80051da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051dc:	f7ff f9d0 	bl	8004580 <__retarget_lock_release_recursive>
 80051e0:	89ab      	ldrh	r3, [r5, #12]
 80051e2:	065b      	lsls	r3, r3, #25
 80051e4:	f53f af12 	bmi.w	800500c <_vfiprintf_r+0x4c>
 80051e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ea:	e711      	b.n	8005010 <_vfiprintf_r+0x50>
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <_vfiprintf_r+0x258>)
 80051f4:	a904      	add	r1, sp, #16
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7fd ff14 	bl	8003024 <_printf_i>
 80051fc:	e7e4      	b.n	80051c8 <_vfiprintf_r+0x208>
 80051fe:	bf00      	nop
 8005200:	080068b4 	.word	0x080068b4
 8005204:	080068d4 	.word	0x080068d4
 8005208:	08006894 	.word	0x08006894
 800520c:	08006a4c 	.word	0x08006a4c
 8005210:	08006a56 	.word	0x08006a56
 8005214:	08002add 	.word	0x08002add
 8005218:	08004f9b 	.word	0x08004f9b
 800521c:	08006a52 	.word	0x08006a52

08005220 <_sbrk_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d06      	ldr	r5, [pc, #24]	; (800523c <_sbrk_r+0x1c>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f7fc fc88 	bl	8001b40 <_sbrk>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_sbrk_r+0x1a>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_sbrk_r+0x1a>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	20000304 	.word	0x20000304

08005240 <__sread>:
 8005240:	b510      	push	{r4, lr}
 8005242:	460c      	mov	r4, r1
 8005244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005248:	f000 f8e2 	bl	8005410 <_read_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	bfab      	itete	ge
 8005250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005252:	89a3      	ldrhlt	r3, [r4, #12]
 8005254:	181b      	addge	r3, r3, r0
 8005256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800525a:	bfac      	ite	ge
 800525c:	6563      	strge	r3, [r4, #84]	; 0x54
 800525e:	81a3      	strhlt	r3, [r4, #12]
 8005260:	bd10      	pop	{r4, pc}

08005262 <__swrite>:
 8005262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	461f      	mov	r7, r3
 8005268:	898b      	ldrh	r3, [r1, #12]
 800526a:	05db      	lsls	r3, r3, #23
 800526c:	4605      	mov	r5, r0
 800526e:	460c      	mov	r4, r1
 8005270:	4616      	mov	r6, r2
 8005272:	d505      	bpl.n	8005280 <__swrite+0x1e>
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	2302      	movs	r3, #2
 800527a:	2200      	movs	r2, #0
 800527c:	f000 f898 	bl	80053b0 <_lseek_r>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	4632      	mov	r2, r6
 800528e:	463b      	mov	r3, r7
 8005290:	4628      	mov	r0, r5
 8005292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	f000 b817 	b.w	80052c8 <_write_r>

0800529a <__sseek>:
 800529a:	b510      	push	{r4, lr}
 800529c:	460c      	mov	r4, r1
 800529e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a2:	f000 f885 	bl	80053b0 <_lseek_r>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	bf15      	itete	ne
 80052ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052b6:	81a3      	strheq	r3, [r4, #12]
 80052b8:	bf18      	it	ne
 80052ba:	81a3      	strhne	r3, [r4, #12]
 80052bc:	bd10      	pop	{r4, pc}

080052be <__sclose>:
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 b831 	b.w	8005328 <_close_r>
	...

080052c8 <_write_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	; (80052e8 <_write_r+0x20>)
 80052cc:	4604      	mov	r4, r0
 80052ce:	4608      	mov	r0, r1
 80052d0:	4611      	mov	r1, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	602a      	str	r2, [r5, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f7fc fc16 	bl	8001b08 <_write>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_write_r+0x1e>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_write_r+0x1e>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20000304 	.word	0x20000304

080052ec <__assert_func>:
 80052ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052ee:	4614      	mov	r4, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <__assert_func+0x2c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4605      	mov	r5, r0
 80052f8:	68d8      	ldr	r0, [r3, #12]
 80052fa:	b14c      	cbz	r4, 8005310 <__assert_func+0x24>
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <__assert_func+0x30>)
 80052fe:	9100      	str	r1, [sp, #0]
 8005300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <__assert_func+0x34>)
 8005306:	462b      	mov	r3, r5
 8005308:	f000 f81e 	bl	8005348 <fiprintf>
 800530c:	f000 f89f 	bl	800544e <abort>
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <__assert_func+0x38>)
 8005312:	461c      	mov	r4, r3
 8005314:	e7f3      	b.n	80052fe <__assert_func+0x12>
 8005316:	bf00      	nop
 8005318:	2000000c 	.word	0x2000000c
 800531c:	08006a5d 	.word	0x08006a5d
 8005320:	08006a6a 	.word	0x08006a6a
 8005324:	08006a98 	.word	0x08006a98

08005328 <_close_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_close_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fc fbf6 	bl	8001b24 <_close>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_close_r+0x1a>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_close_r+0x1a>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	20000304 	.word	0x20000304

08005348 <fiprintf>:
 8005348:	b40e      	push	{r1, r2, r3}
 800534a:	b503      	push	{r0, r1, lr}
 800534c:	4601      	mov	r1, r0
 800534e:	ab03      	add	r3, sp, #12
 8005350:	4805      	ldr	r0, [pc, #20]	; (8005368 <fiprintf+0x20>)
 8005352:	f853 2b04 	ldr.w	r2, [r3], #4
 8005356:	6800      	ldr	r0, [r0, #0]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	f7ff fe31 	bl	8004fc0 <_vfiprintf_r>
 800535e:	b002      	add	sp, #8
 8005360:	f85d eb04 	ldr.w	lr, [sp], #4
 8005364:	b003      	add	sp, #12
 8005366:	4770      	bx	lr
 8005368:	2000000c 	.word	0x2000000c

0800536c <_fstat_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d07      	ldr	r5, [pc, #28]	; (800538c <_fstat_r+0x20>)
 8005370:	2300      	movs	r3, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	f7fc fbd7 	bl	8001b2c <_fstat>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d102      	bne.n	8005388 <_fstat_r+0x1c>
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	b103      	cbz	r3, 8005388 <_fstat_r+0x1c>
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop
 800538c:	20000304 	.word	0x20000304

08005390 <_isatty_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	; (80053ac <_isatty_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fc fbcc 	bl	8001b38 <_isatty>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_isatty_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_isatty_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20000304 	.word	0x20000304

080053b0 <_lseek_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	; (80053d0 <_lseek_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fc fbbc 	bl	8001b3c <_lseek>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_lseek_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_lseek_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20000304 	.word	0x20000304

080053d4 <__ascii_mbtowc>:
 80053d4:	b082      	sub	sp, #8
 80053d6:	b901      	cbnz	r1, 80053da <__ascii_mbtowc+0x6>
 80053d8:	a901      	add	r1, sp, #4
 80053da:	b142      	cbz	r2, 80053ee <__ascii_mbtowc+0x1a>
 80053dc:	b14b      	cbz	r3, 80053f2 <__ascii_mbtowc+0x1e>
 80053de:	7813      	ldrb	r3, [r2, #0]
 80053e0:	600b      	str	r3, [r1, #0]
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	1e10      	subs	r0, r2, #0
 80053e6:	bf18      	it	ne
 80053e8:	2001      	movne	r0, #1
 80053ea:	b002      	add	sp, #8
 80053ec:	4770      	bx	lr
 80053ee:	4610      	mov	r0, r2
 80053f0:	e7fb      	b.n	80053ea <__ascii_mbtowc+0x16>
 80053f2:	f06f 0001 	mvn.w	r0, #1
 80053f6:	e7f8      	b.n	80053ea <__ascii_mbtowc+0x16>

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f7ff b8c0 	b.w	800457e <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	200002f8 	.word	0x200002f8

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f7ff b8bb 	b.w	8004580 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	200002f8 	.word	0x200002f8

08005410 <_read_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	; (8005430 <_read_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fc fb64 	bl	8001aec <_read>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_read_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_read_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000304 	.word	0x20000304

08005434 <__ascii_wctomb>:
 8005434:	b149      	cbz	r1, 800544a <__ascii_wctomb+0x16>
 8005436:	2aff      	cmp	r2, #255	; 0xff
 8005438:	bf85      	ittet	hi
 800543a:	238a      	movhi	r3, #138	; 0x8a
 800543c:	6003      	strhi	r3, [r0, #0]
 800543e:	700a      	strbls	r2, [r1, #0]
 8005440:	f04f 30ff 	movhi.w	r0, #4294967295
 8005444:	bf98      	it	ls
 8005446:	2001      	movls	r0, #1
 8005448:	4770      	bx	lr
 800544a:	4608      	mov	r0, r1
 800544c:	4770      	bx	lr

0800544e <abort>:
 800544e:	b508      	push	{r3, lr}
 8005450:	2006      	movs	r0, #6
 8005452:	f000 f82b 	bl	80054ac <raise>
 8005456:	2001      	movs	r0, #1
 8005458:	f7fc fb42 	bl	8001ae0 <_exit>

0800545c <_raise_r>:
 800545c:	291f      	cmp	r1, #31
 800545e:	b538      	push	{r3, r4, r5, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	460d      	mov	r5, r1
 8005464:	d904      	bls.n	8005470 <_raise_r+0x14>
 8005466:	2316      	movs	r3, #22
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005472:	b112      	cbz	r2, 800547a <_raise_r+0x1e>
 8005474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005478:	b94b      	cbnz	r3, 800548e <_raise_r+0x32>
 800547a:	4620      	mov	r0, r4
 800547c:	f000 f830 	bl	80054e0 <_getpid_r>
 8005480:	462a      	mov	r2, r5
 8005482:	4601      	mov	r1, r0
 8005484:	4620      	mov	r0, r4
 8005486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548a:	f000 b817 	b.w	80054bc <_kill_r>
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00a      	beq.n	80054a8 <_raise_r+0x4c>
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	d103      	bne.n	800549e <_raise_r+0x42>
 8005496:	2316      	movs	r3, #22
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	2001      	movs	r0, #1
 800549c:	e7e7      	b.n	800546e <_raise_r+0x12>
 800549e:	2400      	movs	r4, #0
 80054a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80054a4:	4628      	mov	r0, r5
 80054a6:	4798      	blx	r3
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7e0      	b.n	800546e <_raise_r+0x12>

080054ac <raise>:
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <raise+0xc>)
 80054ae:	4601      	mov	r1, r0
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	f7ff bfd3 	b.w	800545c <_raise_r>
 80054b6:	bf00      	nop
 80054b8:	2000000c 	.word	0x2000000c

080054bc <_kill_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	; (80054dc <_kill_r+0x20>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	f7fc fb01 	bl	8001ad0 <_kill>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d102      	bne.n	80054d8 <_kill_r+0x1c>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	b103      	cbz	r3, 80054d8 <_kill_r+0x1c>
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	bf00      	nop
 80054dc:	20000304 	.word	0x20000304

080054e0 <_getpid_r>:
 80054e0:	f7fc baf4 	b.w	8001acc <_getpid>
 80054e4:	0000      	movs	r0, r0
	...

080054e8 <log10>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	ed2d 8b02 	vpush	{d8}
 80054ee:	ec55 4b10 	vmov	r4, r5, d0
 80054f2:	f000 f839 	bl	8005568 <__ieee754_log10>
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005502:	eef0 8a60 	vmov.f32	s17, s1
 8005506:	f7fb fb21 	bl	8000b4c <__aeabi_dcmpun>
 800550a:	b998      	cbnz	r0, 8005534 <log10+0x4c>
 800550c:	2200      	movs	r2, #0
 800550e:	2300      	movs	r3, #0
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f7fb fafc 	bl	8000b10 <__aeabi_dcmple>
 8005518:	b160      	cbz	r0, 8005534 <log10+0x4c>
 800551a:	2200      	movs	r2, #0
 800551c:	2300      	movs	r3, #0
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb fae1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005526:	b160      	cbz	r0, 8005542 <log10+0x5a>
 8005528:	f7fd fa06 	bl	8002938 <__errno>
 800552c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005558 <log10+0x70>
 8005530:	2322      	movs	r3, #34	; 0x22
 8005532:	6003      	str	r3, [r0, #0]
 8005534:	eeb0 0a48 	vmov.f32	s0, s16
 8005538:	eef0 0a68 	vmov.f32	s1, s17
 800553c:	ecbd 8b02 	vpop	{d8}
 8005540:	bd38      	pop	{r3, r4, r5, pc}
 8005542:	f7fd f9f9 	bl	8002938 <__errno>
 8005546:	ecbd 8b02 	vpop	{d8}
 800554a:	2321      	movs	r3, #33	; 0x21
 800554c:	6003      	str	r3, [r0, #0]
 800554e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005552:	4803      	ldr	r0, [pc, #12]	; (8005560 <log10+0x78>)
 8005554:	f000 b894 	b.w	8005680 <nan>
 8005558:	00000000 	.word	0x00000000
 800555c:	fff00000 	.word	0xfff00000
 8005560:	08006a98 	.word	0x08006a98
 8005564:	00000000 	.word	0x00000000

08005568 <__ieee754_log10>:
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	ec55 4b10 	vmov	r4, r5, d0
 8005570:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8005574:	462b      	mov	r3, r5
 8005576:	da2f      	bge.n	80055d8 <__ieee754_log10+0x70>
 8005578:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800557c:	4322      	orrs	r2, r4
 800557e:	d109      	bne.n	8005594 <__ieee754_log10+0x2c>
 8005580:	493b      	ldr	r1, [pc, #236]	; (8005670 <__ieee754_log10+0x108>)
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	2000      	movs	r0, #0
 8005588:	f7fb f970 	bl	800086c <__aeabi_ddiv>
 800558c:	ec41 0b10 	vmov	d0, r0, r1
 8005590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005594:	2d00      	cmp	r5, #0
 8005596:	da09      	bge.n	80055ac <__ieee754_log10+0x44>
 8005598:	ee10 2a10 	vmov	r2, s0
 800559c:	ee10 0a10 	vmov	r0, s0
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fa fe81 	bl	80002a8 <__aeabi_dsub>
 80055a6:	2200      	movs	r2, #0
 80055a8:	2300      	movs	r3, #0
 80055aa:	e7ed      	b.n	8005588 <__ieee754_log10+0x20>
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <__ieee754_log10+0x10c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	4629      	mov	r1, r5
 80055b2:	ee10 0a10 	vmov	r0, s0
 80055b6:	f7fb f82f 	bl	8000618 <__aeabi_dmul>
 80055ba:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	460b      	mov	r3, r1
 80055c4:	492c      	ldr	r1, [pc, #176]	; (8005678 <__ieee754_log10+0x110>)
 80055c6:	428b      	cmp	r3, r1
 80055c8:	dd08      	ble.n	80055dc <__ieee754_log10+0x74>
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fa fe6b 	bl	80002ac <__adddf3>
 80055d6:	e7d9      	b.n	800558c <__ieee754_log10+0x24>
 80055d8:	2200      	movs	r2, #0
 80055da:	e7f3      	b.n	80055c4 <__ieee754_log10+0x5c>
 80055dc:	1518      	asrs	r0, r3, #20
 80055de:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80055e2:	4410      	add	r0, r2
 80055e4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80055e8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80055ec:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80055f0:	f7fa ffa8 	bl	8000544 <__aeabi_i2d>
 80055f4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80055f8:	3303      	adds	r3, #3
 80055fa:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80055fe:	ec45 4b10 	vmov	d0, r4, r5
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	f000 f843 	bl	8005690 <__ieee754_log>
 800560a:	a313      	add	r3, pc, #76	; (adr r3, 8005658 <__ieee754_log10+0xf0>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	ec59 8b10 	vmov	r8, r9, d0
 8005618:	f7fa fffe 	bl	8000618 <__aeabi_dmul>
 800561c:	a310      	add	r3, pc, #64	; (adr r3, 8005660 <__ieee754_log10+0xf8>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	4604      	mov	r4, r0
 8005624:	460d      	mov	r5, r1
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa fff5 	bl	8000618 <__aeabi_dmul>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fa fe39 	bl	80002ac <__adddf3>
 800563a:	a30b      	add	r3, pc, #44	; (adr r3, 8005668 <__ieee754_log10+0x100>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	4604      	mov	r4, r0
 8005642:	460d      	mov	r5, r1
 8005644:	4630      	mov	r0, r6
 8005646:	4639      	mov	r1, r7
 8005648:	f7fa ffe6 	bl	8000618 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	e7bd      	b.n	80055d2 <__ieee754_log10+0x6a>
 8005656:	bf00      	nop
 8005658:	11f12b36 	.word	0x11f12b36
 800565c:	3d59fef3 	.word	0x3d59fef3
 8005660:	1526e50e 	.word	0x1526e50e
 8005664:	3fdbcb7b 	.word	0x3fdbcb7b
 8005668:	509f6000 	.word	0x509f6000
 800566c:	3fd34413 	.word	0x3fd34413
 8005670:	c3500000 	.word	0xc3500000
 8005674:	43500000 	.word	0x43500000
 8005678:	7fefffff 	.word	0x7fefffff
 800567c:	00000000 	.word	0x00000000

08005680 <nan>:
 8005680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005688 <nan+0x8>
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00000000 	.word	0x00000000
 800568c:	7ff80000 	.word	0x7ff80000

08005690 <__ieee754_log>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ec51 0b10 	vmov	r0, r1, d0
 8005698:	ed2d 8b04 	vpush	{d8-d9}
 800569c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80056a0:	b083      	sub	sp, #12
 80056a2:	460d      	mov	r5, r1
 80056a4:	da29      	bge.n	80056fa <__ieee754_log+0x6a>
 80056a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056aa:	4303      	orrs	r3, r0
 80056ac:	ee10 2a10 	vmov	r2, s0
 80056b0:	d10c      	bne.n	80056cc <__ieee754_log+0x3c>
 80056b2:	49cf      	ldr	r1, [pc, #828]	; (80059f0 <__ieee754_log+0x360>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	2300      	movs	r3, #0
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fb f8d7 	bl	800086c <__aeabi_ddiv>
 80056be:	ec41 0b10 	vmov	d0, r0, r1
 80056c2:	b003      	add	sp, #12
 80056c4:	ecbd 8b04 	vpop	{d8-d9}
 80056c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056cc:	2900      	cmp	r1, #0
 80056ce:	da05      	bge.n	80056dc <__ieee754_log+0x4c>
 80056d0:	460b      	mov	r3, r1
 80056d2:	f7fa fde9 	bl	80002a8 <__aeabi_dsub>
 80056d6:	2200      	movs	r2, #0
 80056d8:	2300      	movs	r3, #0
 80056da:	e7ee      	b.n	80056ba <__ieee754_log+0x2a>
 80056dc:	4bc5      	ldr	r3, [pc, #788]	; (80059f4 <__ieee754_log+0x364>)
 80056de:	2200      	movs	r2, #0
 80056e0:	f7fa ff9a 	bl	8000618 <__aeabi_dmul>
 80056e4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80056e8:	460d      	mov	r5, r1
 80056ea:	4ac3      	ldr	r2, [pc, #780]	; (80059f8 <__ieee754_log+0x368>)
 80056ec:	4295      	cmp	r5, r2
 80056ee:	dd06      	ble.n	80056fe <__ieee754_log+0x6e>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	f7fa fdda 	bl	80002ac <__adddf3>
 80056f8:	e7e1      	b.n	80056be <__ieee754_log+0x2e>
 80056fa:	2300      	movs	r3, #0
 80056fc:	e7f5      	b.n	80056ea <__ieee754_log+0x5a>
 80056fe:	152c      	asrs	r4, r5, #20
 8005700:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005704:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005708:	441c      	add	r4, r3
 800570a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800570e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005716:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800571a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800571e:	ea42 0105 	orr.w	r1, r2, r5
 8005722:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005726:	2200      	movs	r2, #0
 8005728:	4bb4      	ldr	r3, [pc, #720]	; (80059fc <__ieee754_log+0x36c>)
 800572a:	f7fa fdbd 	bl	80002a8 <__aeabi_dsub>
 800572e:	1cab      	adds	r3, r5, #2
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	2b02      	cmp	r3, #2
 8005736:	4682      	mov	sl, r0
 8005738:	468b      	mov	fp, r1
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	dc53      	bgt.n	80057e8 <__ieee754_log+0x158>
 8005740:	2300      	movs	r3, #0
 8005742:	f7fb f9d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005746:	b1d0      	cbz	r0, 800577e <__ieee754_log+0xee>
 8005748:	2c00      	cmp	r4, #0
 800574a:	f000 8122 	beq.w	8005992 <__ieee754_log+0x302>
 800574e:	4620      	mov	r0, r4
 8005750:	f7fa fef8 	bl	8000544 <__aeabi_i2d>
 8005754:	a390      	add	r3, pc, #576	; (adr r3, 8005998 <__ieee754_log+0x308>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	f7fa ff5b 	bl	8000618 <__aeabi_dmul>
 8005762:	a38f      	add	r3, pc, #572	; (adr r3, 80059a0 <__ieee754_log+0x310>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa ff52 	bl	8000618 <__aeabi_dmul>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	e7ba      	b.n	80056f4 <__ieee754_log+0x64>
 800577e:	a38a      	add	r3, pc, #552	; (adr r3, 80059a8 <__ieee754_log+0x318>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	4650      	mov	r0, sl
 8005786:	4659      	mov	r1, fp
 8005788:	f7fa ff46 	bl	8000618 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	2000      	movs	r0, #0
 8005792:	499b      	ldr	r1, [pc, #620]	; (8005a00 <__ieee754_log+0x370>)
 8005794:	f7fa fd88 	bl	80002a8 <__aeabi_dsub>
 8005798:	4652      	mov	r2, sl
 800579a:	4606      	mov	r6, r0
 800579c:	460f      	mov	r7, r1
 800579e:	465b      	mov	r3, fp
 80057a0:	4650      	mov	r0, sl
 80057a2:	4659      	mov	r1, fp
 80057a4:	f7fa ff38 	bl	8000618 <__aeabi_dmul>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7fa ff32 	bl	8000618 <__aeabi_dmul>
 80057b4:	4606      	mov	r6, r0
 80057b6:	460f      	mov	r7, r1
 80057b8:	b914      	cbnz	r4, 80057c0 <__ieee754_log+0x130>
 80057ba:	4632      	mov	r2, r6
 80057bc:	463b      	mov	r3, r7
 80057be:	e0a2      	b.n	8005906 <__ieee754_log+0x276>
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7fa febf 	bl	8000544 <__aeabi_i2d>
 80057c6:	a374      	add	r3, pc, #464	; (adr r3, 8005998 <__ieee754_log+0x308>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	f7fa ff22 	bl	8000618 <__aeabi_dmul>
 80057d4:	a372      	add	r3, pc, #456	; (adr r3, 80059a0 <__ieee754_log+0x310>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	4604      	mov	r4, r0
 80057dc:	460d      	mov	r5, r1
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa ff19 	bl	8000618 <__aeabi_dmul>
 80057e6:	e0a7      	b.n	8005938 <__ieee754_log+0x2a8>
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ec:	f7fa fd5e 	bl	80002ac <__adddf3>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4650      	mov	r0, sl
 80057f6:	4659      	mov	r1, fp
 80057f8:	f7fb f838 	bl	800086c <__aeabi_ddiv>
 80057fc:	ec41 0b18 	vmov	d8, r0, r1
 8005800:	4620      	mov	r0, r4
 8005802:	f7fa fe9f 	bl	8000544 <__aeabi_i2d>
 8005806:	ec53 2b18 	vmov	r2, r3, d8
 800580a:	ec41 0b19 	vmov	d9, r0, r1
 800580e:	ec51 0b18 	vmov	r0, r1, d8
 8005812:	f7fa ff01 	bl	8000618 <__aeabi_dmul>
 8005816:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800581a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4680      	mov	r8, r0
 8005826:	4689      	mov	r9, r1
 8005828:	f7fa fef6 	bl	8000618 <__aeabi_dmul>
 800582c:	a360      	add	r3, pc, #384	; (adr r3, 80059b0 <__ieee754_log+0x320>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	4606      	mov	r6, r0
 8005834:	460f      	mov	r7, r1
 8005836:	f7fa feef 	bl	8000618 <__aeabi_dmul>
 800583a:	a35f      	add	r3, pc, #380	; (adr r3, 80059b8 <__ieee754_log+0x328>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa fd34 	bl	80002ac <__adddf3>
 8005844:	4632      	mov	r2, r6
 8005846:	463b      	mov	r3, r7
 8005848:	f7fa fee6 	bl	8000618 <__aeabi_dmul>
 800584c:	a35c      	add	r3, pc, #368	; (adr r3, 80059c0 <__ieee754_log+0x330>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	f7fa fd2b 	bl	80002ac <__adddf3>
 8005856:	4632      	mov	r2, r6
 8005858:	463b      	mov	r3, r7
 800585a:	f7fa fedd 	bl	8000618 <__aeabi_dmul>
 800585e:	a35a      	add	r3, pc, #360	; (adr r3, 80059c8 <__ieee754_log+0x338>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f7fa fd22 	bl	80002ac <__adddf3>
 8005868:	4642      	mov	r2, r8
 800586a:	464b      	mov	r3, r9
 800586c:	f7fa fed4 	bl	8000618 <__aeabi_dmul>
 8005870:	a357      	add	r3, pc, #348	; (adr r3, 80059d0 <__ieee754_log+0x340>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	4680      	mov	r8, r0
 8005878:	4689      	mov	r9, r1
 800587a:	4630      	mov	r0, r6
 800587c:	4639      	mov	r1, r7
 800587e:	f7fa fecb 	bl	8000618 <__aeabi_dmul>
 8005882:	a355      	add	r3, pc, #340	; (adr r3, 80059d8 <__ieee754_log+0x348>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fd10 	bl	80002ac <__adddf3>
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	f7fa fec2 	bl	8000618 <__aeabi_dmul>
 8005894:	a352      	add	r3, pc, #328	; (adr r3, 80059e0 <__ieee754_log+0x350>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fd07 	bl	80002ac <__adddf3>
 800589e:	4632      	mov	r2, r6
 80058a0:	463b      	mov	r3, r7
 80058a2:	f7fa feb9 	bl	8000618 <__aeabi_dmul>
 80058a6:	460b      	mov	r3, r1
 80058a8:	4602      	mov	r2, r0
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	f7fa fcfd 	bl	80002ac <__adddf3>
 80058b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	3551      	adds	r5, #81	; 0x51
 80058ba:	431d      	orrs	r5, r3
 80058bc:	2d00      	cmp	r5, #0
 80058be:	4680      	mov	r8, r0
 80058c0:	4689      	mov	r9, r1
 80058c2:	dd48      	ble.n	8005956 <__ieee754_log+0x2c6>
 80058c4:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <__ieee754_log+0x370>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	f7fa fea4 	bl	8000618 <__aeabi_dmul>
 80058d0:	4652      	mov	r2, sl
 80058d2:	465b      	mov	r3, fp
 80058d4:	f7fa fea0 	bl	8000618 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fce2 	bl	80002ac <__adddf3>
 80058e8:	ec53 2b18 	vmov	r2, r3, d8
 80058ec:	f7fa fe94 	bl	8000618 <__aeabi_dmul>
 80058f0:	4680      	mov	r8, r0
 80058f2:	4689      	mov	r9, r1
 80058f4:	b964      	cbnz	r4, 8005910 <__ieee754_log+0x280>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fa fcd3 	bl	80002a8 <__aeabi_dsub>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4650      	mov	r0, sl
 8005908:	4659      	mov	r1, fp
 800590a:	f7fa fccd 	bl	80002a8 <__aeabi_dsub>
 800590e:	e6d6      	b.n	80056be <__ieee754_log+0x2e>
 8005910:	a321      	add	r3, pc, #132	; (adr r3, 8005998 <__ieee754_log+0x308>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	ec51 0b19 	vmov	r0, r1, d9
 800591a:	f7fa fe7d 	bl	8000618 <__aeabi_dmul>
 800591e:	a320      	add	r3, pc, #128	; (adr r3, 80059a0 <__ieee754_log+0x310>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	4604      	mov	r4, r0
 8005926:	460d      	mov	r5, r1
 8005928:	ec51 0b19 	vmov	r0, r1, d9
 800592c:	f7fa fe74 	bl	8000618 <__aeabi_dmul>
 8005930:	4642      	mov	r2, r8
 8005932:	464b      	mov	r3, r9
 8005934:	f7fa fcba 	bl	80002ac <__adddf3>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	f7fa fcb2 	bl	80002a8 <__aeabi_dsub>
 8005944:	4652      	mov	r2, sl
 8005946:	465b      	mov	r3, fp
 8005948:	f7fa fcae 	bl	80002a8 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	e7d9      	b.n	800590a <__ieee754_log+0x27a>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4650      	mov	r0, sl
 800595c:	4659      	mov	r1, fp
 800595e:	f7fa fca3 	bl	80002a8 <__aeabi_dsub>
 8005962:	ec53 2b18 	vmov	r2, r3, d8
 8005966:	f7fa fe57 	bl	8000618 <__aeabi_dmul>
 800596a:	4606      	mov	r6, r0
 800596c:	460f      	mov	r7, r1
 800596e:	2c00      	cmp	r4, #0
 8005970:	f43f af23 	beq.w	80057ba <__ieee754_log+0x12a>
 8005974:	a308      	add	r3, pc, #32	; (adr r3, 8005998 <__ieee754_log+0x308>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	ec51 0b19 	vmov	r0, r1, d9
 800597e:	f7fa fe4b 	bl	8000618 <__aeabi_dmul>
 8005982:	a307      	add	r3, pc, #28	; (adr r3, 80059a0 <__ieee754_log+0x310>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	ec51 0b19 	vmov	r0, r1, d9
 8005990:	e727      	b.n	80057e2 <__ieee754_log+0x152>
 8005992:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80059e8 <__ieee754_log+0x358>
 8005996:	e694      	b.n	80056c2 <__ieee754_log+0x32>
 8005998:	fee00000 	.word	0xfee00000
 800599c:	3fe62e42 	.word	0x3fe62e42
 80059a0:	35793c76 	.word	0x35793c76
 80059a4:	3dea39ef 	.word	0x3dea39ef
 80059a8:	55555555 	.word	0x55555555
 80059ac:	3fd55555 	.word	0x3fd55555
 80059b0:	df3e5244 	.word	0xdf3e5244
 80059b4:	3fc2f112 	.word	0x3fc2f112
 80059b8:	96cb03de 	.word	0x96cb03de
 80059bc:	3fc74664 	.word	0x3fc74664
 80059c0:	94229359 	.word	0x94229359
 80059c4:	3fd24924 	.word	0x3fd24924
 80059c8:	55555593 	.word	0x55555593
 80059cc:	3fe55555 	.word	0x3fe55555
 80059d0:	d078c69f 	.word	0xd078c69f
 80059d4:	3fc39a09 	.word	0x3fc39a09
 80059d8:	1d8e78af 	.word	0x1d8e78af
 80059dc:	3fcc71c5 	.word	0x3fcc71c5
 80059e0:	9997fa04 	.word	0x9997fa04
 80059e4:	3fd99999 	.word	0x3fd99999
	...
 80059f0:	c3500000 	.word	0xc3500000
 80059f4:	43500000 	.word	0x43500000
 80059f8:	7fefffff 	.word	0x7fefffff
 80059fc:	3ff00000 	.word	0x3ff00000
 8005a00:	3fe00000 	.word	0x3fe00000

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
